
TracealyzerDemo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c98  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000033c  08004e68  08004e68  00014e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051a4  080051a4  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  080051a4  080051a4  000151a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051ac  080051ac  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051ac  080051ac  000151ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051b0  080051b0  000151b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080051b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006594  20000024  080051d8  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  200065b8  080051d8  000265b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016348  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030c3  00000000  00000000  0003639c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001250  00000000  00000000  00039460  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010d8  00000000  00000000  0003a6b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029078  00000000  00000000  0003b788  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010cbb  00000000  00000000  00064800  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fc29a  00000000  00000000  000754bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00171755  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004af4  00000000  00000000  001717d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000024 	.word	0x20000024
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004e50 	.word	0x08004e50

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000028 	.word	0x20000028
 800020c:	08004e50 	.word	0x08004e50

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	4a07      	ldr	r2, [pc, #28]	; (800053c <vApplicationGetIdleTaskMemory+0x2c>)
 8000520:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	4a06      	ldr	r2, [pc, #24]	; (8000540 <vApplicationGetIdleTaskMemory+0x30>)
 8000526:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800052e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000530:	bf00      	nop
 8000532:	3714      	adds	r7, #20
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr
 800053c:	20000040 	.word	0x20000040
 8000540:	2000009c 	.word	0x2000009c

08000544 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000544:	b5b0      	push	{r4, r5, r7, lr}
 8000546:	b08e      	sub	sp, #56	; 0x38
 8000548:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task01 */
  osThreadDef(Task01, StartTask01, osPriorityNormal, 0, 256);
 800054a:	4b14      	ldr	r3, [pc, #80]	; (800059c <MX_FREERTOS_Init+0x58>)
 800054c:	f107 041c 	add.w	r4, r7, #28
 8000550:	461d      	mov	r5, r3
 8000552:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000554:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000556:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800055a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task01Handle = osThreadCreate(osThread(Task01), NULL);
 800055e:	f107 031c 	add.w	r3, r7, #28
 8000562:	2100      	movs	r1, #0
 8000564:	4618      	mov	r0, r3
 8000566:	f003 f89c 	bl	80036a2 <osThreadCreate>
 800056a:	4602      	mov	r2, r0
 800056c:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <MX_FREERTOS_Init+0x5c>)
 800056e:	601a      	str	r2, [r3, #0]

  /* definition and creation of Task02 */
  osThreadDef(Task02, StartTask02, osPriorityNormal, 0, 256);
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <MX_FREERTOS_Init+0x60>)
 8000572:	463c      	mov	r4, r7
 8000574:	461d      	mov	r5, r3
 8000576:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000578:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800057a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800057e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task02Handle = osThreadCreate(osThread(Task02), NULL);
 8000582:	463b      	mov	r3, r7
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f003 f88b 	bl	80036a2 <osThreadCreate>
 800058c:	4602      	mov	r2, r0
 800058e:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <MX_FREERTOS_Init+0x64>)
 8000590:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000592:	bf00      	nop
 8000594:	3738      	adds	r7, #56	; 0x38
 8000596:	46bd      	mov	sp, r7
 8000598:	bdb0      	pop	{r4, r5, r7, pc}
 800059a:	bf00      	nop
 800059c:	08004e70 	.word	0x08004e70
 80005a0:	2000513c 	.word	0x2000513c
 80005a4:	08004e94 	.word	0x08004e94
 80005a8:	20005138 	.word	0x20005138

080005ac <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask01 */
	uint32_t delay = 1;
 80005b4:	2301      	movs	r3, #1
 80005b6:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
//	  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, SET);
	  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);
 80005b8:	2102      	movs	r1, #2
 80005ba:	4805      	ldr	r0, [pc, #20]	; (80005d0 <StartTask01+0x24>)
 80005bc:	f002 f8ed 	bl	800279a <HAL_GPIO_TogglePin>
    osDelay(delay++);
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	1c5a      	adds	r2, r3, #1
 80005c4:	60fa      	str	r2, [r7, #12]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f003 f8b7 	bl	800373a <osDelay>
	  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);
 80005cc:	e7f4      	b.n	80005b8 <StartTask01+0xc>
 80005ce:	bf00      	nop
 80005d0:	40022000 	.word	0x40022000

080005d4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10);
 80005dc:	200a      	movs	r0, #10
 80005de:	f003 f8ac 	bl	800373a <osDelay>
 80005e2:	e7fb      	b.n	80005dc <StartTask02+0x8>

080005e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	4b1d      	ldr	r3, [pc, #116]	; (8000670 <MX_GPIO_Init+0x8c>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a1c      	ldr	r2, [pc, #112]	; (8000670 <MX_GPIO_Init+0x8c>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b1a      	ldr	r3, [pc, #104]	; (8000670 <MX_GPIO_Init+0x8c>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000612:	4b17      	ldr	r3, [pc, #92]	; (8000670 <MX_GPIO_Init+0x8c>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a16      	ldr	r2, [pc, #88]	; (8000670 <MX_GPIO_Init+0x8c>)
 8000618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b14      	ldr	r3, [pc, #80]	; (8000670 <MX_GPIO_Init+0x8c>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_GPIO_Init+0x8c>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a10      	ldr	r2, [pc, #64]	; (8000670 <MX_GPIO_Init+0x8c>)
 8000630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_GPIO_Init+0x8c>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	2102      	movs	r1, #2
 8000646:	480b      	ldr	r0, [pc, #44]	; (8000674 <MX_GPIO_Init+0x90>)
 8000648:	f002 f88e 	bl	8002768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800064c:	2302      	movs	r3, #2
 800064e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000650:	2301      	movs	r3, #1
 8000652:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000658:	2300      	movs	r3, #0
 800065a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	4619      	mov	r1, r3
 8000662:	4804      	ldr	r0, [pc, #16]	; (8000674 <MX_GPIO_Init+0x90>)
 8000664:	f001 fed6 	bl	8002414 <HAL_GPIO_Init>

}
 8000668:	bf00      	nop
 800066a:	3720      	adds	r7, #32
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40023800 	.word	0x40023800
 8000674:	40022000 	.word	0x40022000

08000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067c:	f001 fdba 	bl	80021f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000680:	f000 f80a 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000684:	f7ff ffae 	bl	80005e4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  vTraceEnable(TRC_INIT);
 8000688:	2000      	movs	r0, #0
 800068a:	f000 fcbd 	bl	8001008 <vTraceEnable>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800068e:	f7ff ff59 	bl	8000544 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000692:	f002 ffff 	bl	8003694 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000696:	e7fe      	b.n	8000696 <main+0x1e>

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	; 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	2230      	movs	r2, #48	; 0x30
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f004 fbc9 	bl	8004e3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	4b2b      	ldr	r3, [pc, #172]	; (800076c <SystemClock_Config+0xd4>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	4a2a      	ldr	r2, [pc, #168]	; (800076c <SystemClock_Config+0xd4>)
 80006c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c6:	6413      	str	r3, [r2, #64]	; 0x40
 80006c8:	4b28      	ldr	r3, [pc, #160]	; (800076c <SystemClock_Config+0xd4>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d4:	4b26      	ldr	r3, [pc, #152]	; (8000770 <SystemClock_Config+0xd8>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a25      	ldr	r2, [pc, #148]	; (8000770 <SystemClock_Config+0xd8>)
 80006da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006de:	6013      	str	r3, [r2, #0]
 80006e0:	4b23      	ldr	r3, [pc, #140]	; (8000770 <SystemClock_Config+0xd8>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ec:	2301      	movs	r3, #1
 80006ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f6:	2302      	movs	r3, #2
 80006f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000700:	2319      	movs	r3, #25
 8000702:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000704:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000708:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800070a:	2302      	movs	r3, #2
 800070c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800070e:	2302      	movs	r3, #2
 8000710:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000712:	f107 0320 	add.w	r3, r7, #32
 8000716:	4618      	mov	r0, r3
 8000718:	f002 f8aa 	bl	8002870 <HAL_RCC_OscConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000722:	f000 f839 	bl	8000798 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000726:	f002 f853 	bl	80027d0 <HAL_PWREx_EnableOverDrive>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000730:	f000 f832 	bl	8000798 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000734:	230f      	movs	r3, #15
 8000736:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000738:	2302      	movs	r3, #2
 800073a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000740:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000744:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000746:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	2107      	movs	r1, #7
 8000752:	4618      	mov	r0, r3
 8000754:	f002 fb30 	bl	8002db8 <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800075e:	f000 f81b 	bl	8000798 <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3750      	adds	r7, #80	; 0x50
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a04      	ldr	r2, [pc, #16]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d101      	bne.n	800078a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000786:	f001 fd43 	bl	8002210 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40010000 	.word	0x40010000

08000798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800079c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800079e:	e7fe      	b.n	800079e <Error_Handler+0x6>

080007a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007a6:	4b11      	ldr	r3, [pc, #68]	; (80007ec <HAL_MspInit+0x4c>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007aa:	4a10      	ldr	r2, [pc, #64]	; (80007ec <HAL_MspInit+0x4c>)
 80007ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b0:	6413      	str	r3, [r2, #64]	; 0x40
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <HAL_MspInit+0x4c>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <HAL_MspInit+0x4c>)
 80007c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c2:	4a0a      	ldr	r2, [pc, #40]	; (80007ec <HAL_MspInit+0x4c>)
 80007c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ca:	4b08      	ldr	r3, [pc, #32]	; (80007ec <HAL_MspInit+0x4c>)
 80007cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	210f      	movs	r1, #15
 80007da:	f06f 0001 	mvn.w	r0, #1
 80007de:	f001 fdef 	bl	80023c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800

080007f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08c      	sub	sp, #48	; 0x30
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000800:	2200      	movs	r2, #0
 8000802:	6879      	ldr	r1, [r7, #4]
 8000804:	2019      	movs	r0, #25
 8000806:	f001 fddb 	bl	80023c0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800080a:	2019      	movs	r0, #25
 800080c:	f001 fdf4 	bl	80023f8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000810:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <HAL_InitTick+0xa0>)
 8000812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000814:	4a1e      	ldr	r2, [pc, #120]	; (8000890 <HAL_InitTick+0xa0>)
 8000816:	f043 0301 	orr.w	r3, r3, #1
 800081a:	6453      	str	r3, [r2, #68]	; 0x44
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <HAL_InitTick+0xa0>)
 800081e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000820:	f003 0301 	and.w	r3, r3, #1
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000828:	f107 0210 	add.w	r2, r7, #16
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	4611      	mov	r1, r2
 8000832:	4618      	mov	r0, r3
 8000834:	f002 fc7e 	bl	8003134 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000838:	f002 fc68 	bl	800310c <HAL_RCC_GetPCLK2Freq>
 800083c:	4603      	mov	r3, r0
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000844:	4a13      	ldr	r2, [pc, #76]	; (8000894 <HAL_InitTick+0xa4>)
 8000846:	fba2 2303 	umull	r2, r3, r2, r3
 800084a:	0c9b      	lsrs	r3, r3, #18
 800084c:	3b01      	subs	r3, #1
 800084e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000850:	4b11      	ldr	r3, [pc, #68]	; (8000898 <HAL_InitTick+0xa8>)
 8000852:	4a12      	ldr	r2, [pc, #72]	; (800089c <HAL_InitTick+0xac>)
 8000854:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000856:	4b10      	ldr	r3, [pc, #64]	; (8000898 <HAL_InitTick+0xa8>)
 8000858:	f240 32e7 	movw	r2, #999	; 0x3e7
 800085c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800085e:	4a0e      	ldr	r2, [pc, #56]	; (8000898 <HAL_InitTick+0xa8>)
 8000860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000862:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <HAL_InitTick+0xa8>)
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <HAL_InitTick+0xa8>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000870:	4809      	ldr	r0, [pc, #36]	; (8000898 <HAL_InitTick+0xa8>)
 8000872:	f002 fc91 	bl	8003198 <HAL_TIM_Base_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d104      	bne.n	8000886 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800087c:	4806      	ldr	r0, [pc, #24]	; (8000898 <HAL_InitTick+0xa8>)
 800087e:	f002 fcc1 	bl	8003204 <HAL_TIM_Base_Start_IT>
 8000882:	4603      	mov	r3, r0
 8000884:	e000      	b.n	8000888 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000886:	2301      	movs	r3, #1
}
 8000888:	4618      	mov	r0, r3
 800088a:	3730      	adds	r7, #48	; 0x30
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40023800 	.word	0x40023800
 8000894:	431bde83 	.word	0x431bde83
 8000898:	20005140 	.word	0x20005140
 800089c:	40010000 	.word	0x40010000

080008a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <NMI_Handler+0x4>

080008a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <HardFault_Handler+0x4>

080008ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <MemManage_Handler+0x4>

080008b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <BusFault_Handler+0x4>

080008b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <UsageFault_Handler+0x4>

080008be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008d0:	4802      	ldr	r0, [pc, #8]	; (80008dc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80008d2:	f002 fcc1 	bl	8003258 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20005140 	.word	0x20005140

080008e0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008e4:	4b08      	ldr	r3, [pc, #32]	; (8000908 <SystemInit+0x28>)
 80008e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ea:	4a07      	ldr	r2, [pc, #28]	; (8000908 <SystemInit+0x28>)
 80008ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008f4:	4b04      	ldr	r3, [pc, #16]	; (8000908 <SystemInit+0x28>)
 80008f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008fa:	609a      	str	r2, [r3, #8]
#endif
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800090c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000944 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000910:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000912:	e003      	b.n	800091c <LoopCopyDataInit>

08000914 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000916:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000918:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800091a:	3104      	adds	r1, #4

0800091c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800091c:	480b      	ldr	r0, [pc, #44]	; (800094c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800091e:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000920:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000922:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000924:	d3f6      	bcc.n	8000914 <CopyDataInit>
  ldr  r2, =_sbss
 8000926:	4a0b      	ldr	r2, [pc, #44]	; (8000954 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000928:	e002      	b.n	8000930 <LoopFillZerobss>

0800092a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800092a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800092c:	f842 3b04 	str.w	r3, [r2], #4

08000930 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000932:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000934:	d3f9      	bcc.n	800092a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000936:	f7ff ffd3 	bl	80008e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800093a:	f004 fa51 	bl	8004de0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800093e:	f7ff fe9b 	bl	8000678 <main>
  bx  lr    
 8000942:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000944:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000948:	080051b4 	.word	0x080051b4
  ldr  r0, =_sdata
 800094c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000950:	20000024 	.word	0x20000024
  ldr  r2, =_sbss
 8000954:	20000024 	.word	0x20000024
  ldr  r3, = _ebss
 8000958:	200065b8 	.word	0x200065b8

0800095c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800095c:	e7fe      	b.n	800095c <ADC_IRQHandler>
	...

08000960 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8000966:	4b21      	ldr	r3, [pc, #132]	; (80009ec <_DoInit+0x8c>)
 8000968:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2203      	movs	r2, #3
 800096e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2203      	movs	r2, #3
 8000974:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4a1d      	ldr	r2, [pc, #116]	; (80009f0 <_DoInit+0x90>)
 800097a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4a1d      	ldr	r2, [pc, #116]	; (80009f4 <_DoInit+0x94>)
 8000980:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2240      	movs	r2, #64	; 0x40
 8000986:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2200      	movs	r2, #0
 800098c:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2200      	movs	r2, #0
 8000992:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2200      	movs	r2, #0
 8000998:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4a14      	ldr	r2, [pc, #80]	; (80009f0 <_DoInit+0x90>)
 800099e:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4a15      	ldr	r2, [pc, #84]	; (80009f8 <_DoInit+0x98>)
 80009a4:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2210      	movs	r2, #16
 80009aa:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2200      	movs	r2, #0
 80009b0:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2200      	movs	r2, #0
 80009b6:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2200      	movs	r2, #0
 80009bc:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	3307      	adds	r3, #7
 80009c2:	4a0e      	ldr	r2, [pc, #56]	; (80009fc <_DoInit+0x9c>)
 80009c4:	6810      	ldr	r0, [r2, #0]
 80009c6:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4a0d      	ldr	r2, [pc, #52]	; (8000a00 <_DoInit+0xa0>)
 80009cc:	6810      	ldr	r0, [r2, #0]
 80009ce:	6018      	str	r0, [r3, #0]
 80009d0:	8891      	ldrh	r1, [r2, #4]
 80009d2:	7992      	ldrb	r2, [r2, #6]
 80009d4:	8099      	strh	r1, [r3, #4]
 80009d6:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2220      	movs	r2, #32
 80009dc:	719a      	strb	r2, [r3, #6]
}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	20005180 	.word	0x20005180
 80009f0:	08004eb0 	.word	0x08004eb0
 80009f4:	2000049c 	.word	0x2000049c
 80009f8:	200004dc 	.word	0x200004dc
 80009fc:	08004ebc 	.word	0x08004ebc
 8000a00:	08004ec0 	.word	0x08004ec0

08000a04 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b088      	sub	sp, #32
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	60b9      	str	r1, [r7, #8]
 8000a0e:	607a      	str	r2, [r7, #4]
  unsigned RdOff;
  unsigned WrOff;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61bb      	str	r3, [r7, #24]
  WrOff = pRing->WrOff;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	617b      	str	r3, [r7, #20]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	691b      	ldr	r3, [r3, #16]
 8000a1e:	613b      	str	r3, [r7, #16]
    if (RdOff > WrOff) {
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d905      	bls.n	8000a34 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	3b01      	subs	r3, #1
 8000a30:	61fb      	str	r3, [r7, #28]
 8000a32:	e007      	b.n	8000a44 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	689a      	ldr	r2, [r3, #8]
 8000a38:	6939      	ldr	r1, [r7, #16]
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	1acb      	subs	r3, r1, r3
 8000a3e:	4413      	add	r3, r2
 8000a40:	3b01      	subs	r3, #1
 8000a42:	61fb      	str	r3, [r7, #28]
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	689a      	ldr	r2, [r3, #8]
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	1ad3      	subs	r3, r2, r3
 8000a4c:	69fa      	ldr	r2, [r7, #28]
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	bf28      	it	cs
 8000a52:	4613      	movcs	r3, r2
 8000a54:	61fb      	str	r3, [r7, #28]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8000a56:	69fa      	ldr	r2, [r7, #28]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	bf28      	it	cs
 8000a5e:	4613      	movcs	r3, r2
 8000a60:	61fb      	str	r3, [r7, #28]
    memcpy(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	685a      	ldr	r2, [r3, #4]
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	4413      	add	r3, r2
 8000a6a:	69fa      	ldr	r2, [r7, #28]
 8000a6c:	68b9      	ldr	r1, [r7, #8]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f004 f9da 	bl	8004e28 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8000a74:	69ba      	ldr	r2, [r7, #24]
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	4413      	add	r3, r2
 8000a7a:	61bb      	str	r3, [r7, #24]
    pBuffer         += NumBytesToWrite;
 8000a7c:	68ba      	ldr	r2, [r7, #8]
 8000a7e:	69fb      	ldr	r3, [r7, #28]
 8000a80:	4413      	add	r3, r2
 8000a82:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8000a8c:	697a      	ldr	r2, [r7, #20]
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	4413      	add	r3, r2
 8000a92:	617b      	str	r3, [r7, #20]
    if (WrOff == pRing->SizeOfBuffer) {
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	697a      	ldr	r2, [r7, #20]
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d101      	bne.n	8000aa2 <_WriteBlocking+0x9e>
      WrOff = 0u;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	617b      	str	r3, [r7, #20]
    }
    pRing->WrOff = WrOff;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	697a      	ldr	r2, [r7, #20]
 8000aa6:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d1b5      	bne.n	8000a1a <_WriteBlocking+0x16>
  //
  return NumBytesWritten;
 8000aae:	69bb      	ldr	r3, [r7, #24]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3720      	adds	r7, #32
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b088      	sub	sp, #32
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;

  WrOff = pRing->WrOff;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	689a      	ldr	r2, [r3, #8]
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8000ad4:	69ba      	ldr	r2, [r7, #24]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d90e      	bls.n	8000afa <_WriteNoCheck+0x42>
    //
    // All data fits before wrap around
    //
    memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	685a      	ldr	r2, [r3, #4]
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	68b9      	ldr	r1, [r7, #8]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f004 f99d 	bl	8004e28 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 8000aee:	69fa      	ldr	r2, [r7, #28]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	441a      	add	r2, r3
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	60da      	str	r2, [r3, #12]
    memcpy(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
    NumBytesAtOnce = NumBytes - Rem;
    memcpy(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    pRing->WrOff = NumBytesAtOnce;
  }
}
 8000af8:	e01a      	b.n	8000b30 <_WriteNoCheck+0x78>
    NumBytesAtOnce = Rem;
 8000afa:	69bb      	ldr	r3, [r7, #24]
 8000afc:	617b      	str	r3, [r7, #20]
    memcpy(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	685a      	ldr	r2, [r3, #4]
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	4413      	add	r3, r2
 8000b06:	697a      	ldr	r2, [r7, #20]
 8000b08:	68b9      	ldr	r1, [r7, #8]
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f004 f98c 	bl	8004e28 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	69bb      	ldr	r3, [r7, #24]
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	617b      	str	r3, [r7, #20]
    memcpy(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	6858      	ldr	r0, [r3, #4]
 8000b1c:	68ba      	ldr	r2, [r7, #8]
 8000b1e:	69bb      	ldr	r3, [r7, #24]
 8000b20:	4413      	add	r3, r2
 8000b22:	697a      	ldr	r2, [r7, #20]
 8000b24:	4619      	mov	r1, r3
 8000b26:	f004 f97f 	bl	8004e28 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	697a      	ldr	r2, [r7, #20]
 8000b2e:	60da      	str	r2, [r3, #12]
}
 8000b30:	bf00      	nop
 8000b32:	3720      	adds	r7, #32
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8000b38:	b480      	push	{r7}
 8000b3a:	b087      	sub	sp, #28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	691b      	ldr	r3, [r3, #16]
 8000b44:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	68db      	ldr	r3, [r3, #12]
 8000b4a:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8000b4c:	693a      	ldr	r2, [r7, #16]
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d808      	bhi.n	8000b66 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	689a      	ldr	r2, [r3, #8]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	1ad2      	subs	r2, r2, r3
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	4413      	add	r3, r2
 8000b60:	3b01      	subs	r3, #1
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	e004      	b.n	8000b70 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	1ad3      	subs	r3, r2, r3
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	617b      	str	r3, [r7, #20]
  }
  return r;
 8000b70:	697b      	ldr	r3, [r7, #20]
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	371c      	adds	r7, #28
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
	...

08000b80 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
  unsigned                RdOff;
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  //
  INIT();
 8000b8c:	4b3c      	ldr	r3, [pc, #240]	; (8000c80 <SEGGER_RTT_ReadNoLock+0x100>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d101      	bne.n	8000b98 <SEGGER_RTT_ReadNoLock+0x18>
 8000b94:	f7ff fee4 	bl	8000960 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8000b98:	68fa      	ldr	r2, [r7, #12]
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	4413      	add	r3, r2
 8000ba0:	00db      	lsls	r3, r3, #3
 8000ba2:	3360      	adds	r3, #96	; 0x60
 8000ba4:	4a36      	ldr	r2, [pc, #216]	; (8000c80 <SEGGER_RTT_ReadNoLock+0x100>)
 8000ba6:	4413      	add	r3, r2
 8000ba8:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	691b      	ldr	r3, [r3, #16]
 8000bb2:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8000bbe:	6a3a      	ldr	r2, [r7, #32]
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d92a      	bls.n	8000c1c <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8000bc6:	69bb      	ldr	r3, [r7, #24]
 8000bc8:	689a      	ldr	r2, [r3, #8]
 8000bca:	6a3b      	ldr	r3, [r7, #32]
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8000bd0:	693a      	ldr	r2, [r7, #16]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	bf28      	it	cs
 8000bd8:	4613      	movcs	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]
    memcpy(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	685a      	ldr	r2, [r3, #4]
 8000be0:	6a3b      	ldr	r3, [r7, #32]
 8000be2:	4413      	add	r3, r2
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	4619      	mov	r1, r3
 8000be8:	69f8      	ldr	r0, [r7, #28]
 8000bea:	f004 f91d 	bl	8004e28 <memcpy>
    NumBytesRead += NumBytesRem;
 8000bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8000bf6:	69fa      	ldr	r2, [r7, #28]
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	1ad3      	subs	r3, r2, r3
 8000c04:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8000c06:	6a3a      	ldr	r2, [r7, #32]
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	623b      	str	r3, [r7, #32]
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	6a3a      	ldr	r2, [r7, #32]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d101      	bne.n	8000c1c <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8000c1c:	697a      	ldr	r2, [r7, #20]
 8000c1e:	6a3b      	ldr	r3, [r7, #32]
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	bf28      	it	cs
 8000c2c:	4613      	movcs	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d018      	beq.n	8000c68 <SEGGER_RTT_ReadNoLock+0xe8>
    memcpy(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	685a      	ldr	r2, [r3, #4]
 8000c3a:	6a3b      	ldr	r3, [r7, #32]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	4619      	mov	r1, r3
 8000c42:	69f8      	ldr	r0, [r7, #28]
 8000c44:	f004 f8f0 	bl	8004e28 <memcpy>
    NumBytesRead += NumBytesRem;
 8000c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8000c50:	69fa      	ldr	r2, [r7, #28]
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	4413      	add	r3, r2
 8000c56:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8000c58:	687a      	ldr	r2, [r7, #4]
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8000c60:	6a3a      	ldr	r2, [r7, #32]
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	4413      	add	r3, r2
 8000c66:	623b      	str	r3, [r7, #32]
  }
  if (NumBytesRead) {
 8000c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d002      	beq.n	8000c74 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	6a3a      	ldr	r2, [r7, #32]
 8000c72:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8000c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3728      	adds	r7, #40	; 0x28
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20005180 	.word	0x20005180

08000c84 <SEGGER_RTT_Read>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_Read(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
  unsigned NumBytesRead;
  //
  SEGGER_RTT_LOCK();
 8000c90:	f3ef 8311 	mrs	r3, BASEPRI
 8000c94:	f04f 0120 	mov.w	r1, #32
 8000c98:	f381 8811 	msr	BASEPRI, r1
 8000c9c:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking read function
  //
  NumBytesRead = SEGGER_RTT_ReadNoLock(BufferIndex, pBuffer, BufferSize);
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	68b9      	ldr	r1, [r7, #8]
 8000ca2:	68f8      	ldr	r0, [r7, #12]
 8000ca4:	f7ff ff6c 	bl	8000b80 <SEGGER_RTT_ReadNoLock>
 8000ca8:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	f383 8811 	msr	BASEPRI, r3
  //
  return NumBytesRead;
 8000cb0:	693b      	ldr	r3, [r7, #16]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <SEGGER_RTT_WriteNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, remaining characters of pBuffer are dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b088      	sub	sp, #32
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
  unsigned              Status;
  unsigned              Avail;
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;

  pData = (const char *)pBuffer;
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	61bb      	str	r3, [r7, #24]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	1c5a      	adds	r2, r3, #1
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	4413      	add	r3, r2
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	4a1e      	ldr	r2, [pc, #120]	; (8000d54 <SEGGER_RTT_WriteNoLock+0x98>)
 8000cda:	4413      	add	r3, r2
 8000cdc:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	695b      	ldr	r3, [r3, #20]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d017      	beq.n	8000d16 <SEGGER_RTT_WriteNoLock+0x5a>
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d302      	bcc.n	8000cf0 <SEGGER_RTT_WriteNoLock+0x34>
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d023      	beq.n	8000d36 <SEGGER_RTT_WriteNoLock+0x7a>
 8000cee:	e029      	b.n	8000d44 <SEGGER_RTT_WriteNoLock+0x88>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8000cf0:	6978      	ldr	r0, [r7, #20]
 8000cf2:	f7ff ff21 	bl	8000b38 <_GetAvailWriteSpace>
 8000cf6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d202      	bcs.n	8000d06 <SEGGER_RTT_WriteNoLock+0x4a>
      Status = 0u;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8000d04:	e021      	b.n	8000d4a <SEGGER_RTT_WriteNoLock+0x8e>
      Status = NumBytes;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	69b9      	ldr	r1, [r7, #24]
 8000d0e:	6978      	ldr	r0, [r7, #20]
 8000d10:	f7ff fed2 	bl	8000ab8 <_WriteNoCheck>
    break;
 8000d14:	e019      	b.n	8000d4a <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8000d16:	6978      	ldr	r0, [r7, #20]
 8000d18:	f7ff ff0e 	bl	8000b38 <_GetAvailWriteSpace>
 8000d1c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	4293      	cmp	r3, r2
 8000d24:	bf28      	it	cs
 8000d26:	4613      	movcs	r3, r2
 8000d28:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8000d2a:	69fa      	ldr	r2, [r7, #28]
 8000d2c:	69b9      	ldr	r1, [r7, #24]
 8000d2e:	6978      	ldr	r0, [r7, #20]
 8000d30:	f7ff fec2 	bl	8000ab8 <_WriteNoCheck>
    break;
 8000d34:	e009      	b.n	8000d4a <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	69b9      	ldr	r1, [r7, #24]
 8000d3a:	6978      	ldr	r0, [r7, #20]
 8000d3c:	f7ff fe62 	bl	8000a04 <_WriteBlocking>
 8000d40:	61f8      	str	r0, [r7, #28]
    break;
 8000d42:	e002      	b.n	8000d4a <SEGGER_RTT_WriteNoLock+0x8e>
  default:
    Status = 0u;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61fb      	str	r3, [r7, #28]
    break;
 8000d48:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8000d4a:	69fb      	ldr	r3, [r7, #28]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3720      	adds	r7, #32
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20005180 	.word	0x20005180

08000d58 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) If there is not enough space in the "Up"-buffer, remaining characters of pBuffer are dropped.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
  unsigned Status;
  //
  INIT();
 8000d64:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <SEGGER_RTT_Write+0x44>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d101      	bne.n	8000d70 <SEGGER_RTT_Write+0x18>
 8000d6c:	f7ff fdf8 	bl	8000960 <_DoInit>
  SEGGER_RTT_LOCK();
 8000d70:	f3ef 8311 	mrs	r3, BASEPRI
 8000d74:	f04f 0120 	mov.w	r1, #32
 8000d78:	f381 8811 	msr	BASEPRI, r1
 8000d7c:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	68b9      	ldr	r1, [r7, #8]
 8000d82:	68f8      	ldr	r0, [r7, #12]
 8000d84:	f7ff ff9a 	bl	8000cbc <SEGGER_RTT_WriteNoLock>
 8000d88:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	f383 8811 	msr	BASEPRI, r3
  //
  return Status;
 8000d90:	693b      	ldr	r3, [r7, #16]
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20005180 	.word	0x20005180

08000da0 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
 8000dac:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8000dae:	4b30      	ldr	r3, [pc, #192]	; (8000e70 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d101      	bne.n	8000dba <SEGGER_RTT_ConfigUpBuffer+0x1a>
 8000db6:	f7ff fdd3 	bl	8000960 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 8000dba:	4b2d      	ldr	r3, [pc, #180]	; (8000e70 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8000dbc:	691b      	ldr	r3, [r3, #16]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d24c      	bcs.n	8000e60 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 8000dc6:	f3ef 8311 	mrs	r3, BASEPRI
 8000dca:	f04f 0120 	mov.w	r1, #32
 8000dce:	f381 8811 	msr	BASEPRI, r1
 8000dd2:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d032      	beq.n	8000e40 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8000dda:	4925      	ldr	r1, [pc, #148]	; (8000e70 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	1c5a      	adds	r2, r3, #1
 8000de0:	4613      	mov	r3, r2
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	4413      	add	r3, r2
 8000de6:	00db      	lsls	r3, r3, #3
 8000de8:	440b      	add	r3, r1
 8000dea:	68ba      	ldr	r2, [r7, #8]
 8000dec:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8000dee:	4920      	ldr	r1, [pc, #128]	; (8000e70 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	1c5a      	adds	r2, r3, #1
 8000df4:	4613      	mov	r3, r2
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	4413      	add	r3, r2
 8000dfa:	00db      	lsls	r3, r3, #3
 8000dfc:	440b      	add	r3, r1
 8000dfe:	3304      	adds	r3, #4
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8000e04:	491a      	ldr	r1, [pc, #104]	; (8000e70 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	4413      	add	r3, r2
 8000e0e:	00db      	lsls	r3, r3, #3
 8000e10:	440b      	add	r3, r1
 8000e12:	3320      	adds	r3, #32
 8000e14:	683a      	ldr	r2, [r7, #0]
 8000e16:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8000e18:	4915      	ldr	r1, [pc, #84]	; (8000e70 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	4413      	add	r3, r2
 8000e22:	00db      	lsls	r3, r3, #3
 8000e24:	440b      	add	r3, r1
 8000e26:	3328      	adds	r3, #40	; 0x28
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8000e2c:	4910      	ldr	r1, [pc, #64]	; (8000e70 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	4613      	mov	r3, r2
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	4413      	add	r3, r2
 8000e36:	00db      	lsls	r3, r3, #3
 8000e38:	440b      	add	r3, r1
 8000e3a:	3324      	adds	r3, #36	; 0x24
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 8000e40:	490b      	ldr	r1, [pc, #44]	; (8000e70 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	4613      	mov	r3, r2
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	4413      	add	r3, r2
 8000e4a:	00db      	lsls	r3, r3, #3
 8000e4c:	440b      	add	r3, r1
 8000e4e:	332c      	adds	r3, #44	; 0x2c
 8000e50:	6a3a      	ldr	r2, [r7, #32]
 8000e52:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
 8000e5e:	e002      	b.n	8000e66 <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 8000e60:	f04f 33ff 	mov.w	r3, #4294967295
 8000e64:	617b      	str	r3, [r7, #20]
  }
  return r;
 8000e66:	697b      	ldr	r3, [r7, #20]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3718      	adds	r7, #24
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20005180 	.word	0x20005180

08000e74 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
 8000e80:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8000e82:	4b30      	ldr	r3, [pc, #192]	; (8000f44 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d101      	bne.n	8000e8e <SEGGER_RTT_ConfigDownBuffer+0x1a>
 8000e8a:	f7ff fd69 	bl	8000960 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 8000e8e:	4b2d      	ldr	r3, [pc, #180]	; (8000f44 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	461a      	mov	r2, r3
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d24b      	bcs.n	8000f32 <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 8000e9a:	f3ef 8311 	mrs	r3, BASEPRI
 8000e9e:	f04f 0120 	mov.w	r1, #32
 8000ea2:	f381 8811 	msr	BASEPRI, r1
 8000ea6:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d031      	beq.n	8000f12 <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 8000eae:	4925      	ldr	r1, [pc, #148]	; (8000f44 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8000eb0:	68fa      	ldr	r2, [r7, #12]
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	4413      	add	r3, r2
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	440b      	add	r3, r1
 8000ebc:	3360      	adds	r3, #96	; 0x60
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8000ec2:	4920      	ldr	r1, [pc, #128]	; (8000f44 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8000ec4:	68fa      	ldr	r2, [r7, #12]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	4413      	add	r3, r2
 8000ecc:	00db      	lsls	r3, r3, #3
 8000ece:	440b      	add	r3, r1
 8000ed0:	3364      	adds	r3, #100	; 0x64
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8000ed6:	491b      	ldr	r1, [pc, #108]	; (8000f44 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8000ed8:	68fa      	ldr	r2, [r7, #12]
 8000eda:	4613      	mov	r3, r2
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	4413      	add	r3, r2
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	440b      	add	r3, r1
 8000ee4:	3368      	adds	r3, #104	; 0x68
 8000ee6:	683a      	ldr	r2, [r7, #0]
 8000ee8:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 8000eea:	4916      	ldr	r1, [pc, #88]	; (8000f44 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8000eec:	68fa      	ldr	r2, [r7, #12]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	4413      	add	r3, r2
 8000ef4:	00db      	lsls	r3, r3, #3
 8000ef6:	440b      	add	r3, r1
 8000ef8:	3370      	adds	r3, #112	; 0x70
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 8000efe:	4911      	ldr	r1, [pc, #68]	; (8000f44 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8000f00:	68fa      	ldr	r2, [r7, #12]
 8000f02:	4613      	mov	r3, r2
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	4413      	add	r3, r2
 8000f08:	00db      	lsls	r3, r3, #3
 8000f0a:	440b      	add	r3, r1
 8000f0c:	336c      	adds	r3, #108	; 0x6c
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 8000f12:	490c      	ldr	r1, [pc, #48]	; (8000f44 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8000f14:	68fa      	ldr	r2, [r7, #12]
 8000f16:	4613      	mov	r3, r2
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	4413      	add	r3, r2
 8000f1c:	00db      	lsls	r3, r3, #3
 8000f1e:	440b      	add	r3, r1
 8000f20:	3374      	adds	r3, #116	; 0x74
 8000f22:	6a3a      	ldr	r2, [r7, #32]
 8000f24:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	e002      	b.n	8000f38 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 8000f32:	f04f 33ff 	mov.w	r3, #4294967295
 8000f36:	617b      	str	r3, [r7, #20]
  }
  return r;
 8000f38:	697b      	ldr	r3, [r7, #20]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3718      	adds	r7, #24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20005180 	.word	0x20005180

08000f48 <readFromRTT>:

#if (TRC_USE_TRACEALYZER_RECORDER == 1)
#if (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

int32_t readFromRTT(void* ptrData, uint32_t size, int32_t* ptrBytesRead)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
	uint32_t bytesRead = 0; 
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
	
	if (SEGGER_RTT_HASDATA(TRC_CFG_RTT_DOWN_BUFFER_INDEX))
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <readFromRTT+0x44>)
 8000f5a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <readFromRTT+0x44>)
 8000f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d00b      	beq.n	8000f80 <readFromRTT+0x38>
	{
		bytesRead = SEGGER_RTT_Read((TRC_CFG_RTT_DOWN_BUFFER_INDEX), (char*)ptrData, size);
 8000f68:	68ba      	ldr	r2, [r7, #8]
 8000f6a:	68f9      	ldr	r1, [r7, #12]
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f7ff fe89 	bl	8000c84 <SEGGER_RTT_Read>
 8000f72:	6178      	str	r0, [r7, #20]
	
		if (ptrBytesRead != NULL)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d002      	beq.n	8000f80 <readFromRTT+0x38>
			*ptrBytesRead = (int32_t)bytesRead;
 8000f7a:	697a      	ldr	r2, [r7, #20]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	601a      	str	r2, [r3, #0]

	}

	return 0;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20005180 	.word	0x20005180

08000f90 <writeToRTT>:

int32_t writeToRTT(void* ptrData, uint32_t size, int32_t* ptrBytesWritten)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
	uint32_t bytesWritten = SEGGER_RTT_Write((TRC_CFG_RTT_UP_BUFFER_INDEX), (const char*)ptrData, size);
 8000f9c:	68ba      	ldr	r2, [r7, #8]
 8000f9e:	68f9      	ldr	r1, [r7, #12]
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	f7ff fed9 	bl	8000d58 <SEGGER_RTT_Write>
 8000fa6:	6178      	str	r0, [r7, #20]
	
	if (ptrBytesWritten != NULL)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d002      	beq.n	8000fb4 <writeToRTT+0x24>
		*ptrBytesWritten = (int32_t)bytesWritten;
 8000fae:	697a      	ldr	r2, [r7, #20]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	601a      	str	r2, [r3, #0]

	return 0;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3718      	adds	r7, #24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <prvTraceGetTaskNumberHigh16>:
{
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
}

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f003 f968 	bl	800429c <uxTaskGetTaskNumber>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	0c1b      	lsrs	r3, r3, #16
 8000fd0:	b29b      	uxth	r3, r3
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <prvTraceSetTaskNumberHigh16>:
{
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
}

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	807b      	strh	r3, [r7, #2]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f003 f958 	bl	800429c <uxTaskGetTaskNumber>
 8000fec:	4603      	mov	r3, r0
 8000fee:	b29a      	uxth	r2, r3
 8000ff0:	887b      	ldrh	r3, [r7, #2]
 8000ff2:	041b      	lsls	r3, r3, #16
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f003 f965 	bl	80042c8 <vTaskSetTaskNumber>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <vTraceEnable>:
 * Function that enables the tracing and creates the control task. It will halt
 * execution until a Start command has been received if haltUntilStart is true.
 *
 ******************************************************************************/
void vTraceEnable(int startOption)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	af04      	add	r7, sp, #16
 800100e:	6078      	str	r0, [r7, #4]
	int32_t bytes = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]
	int32_t status;
	extern uint32_t RecorderEnabled;
	TracealyzerCommandType msg;

	/* Only do this first time...*/
	if (HandleTzCtrl == NULL)
 8001014:	4b3d      	ldr	r3, [pc, #244]	; (800110c <vTraceEnable+0x104>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d12d      	bne.n	8001078 <vTraceEnable+0x70>
	{
		TRC_STREAM_PORT_INIT();
 800101c:	2300      	movs	r3, #0
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	f241 3388 	movw	r3, #5000	; 0x1388
 8001024:	4a3a      	ldr	r2, [pc, #232]	; (8001110 <vTraceEnable+0x108>)
 8001026:	493b      	ldr	r1, [pc, #236]	; (8001114 <vTraceEnable+0x10c>)
 8001028:	2001      	movs	r0, #1
 800102a:	f7ff feb9 	bl	8000da0 <SEGGER_RTT_ConfigUpBuffer>
 800102e:	2300      	movs	r3, #0
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2320      	movs	r3, #32
 8001034:	4a38      	ldr	r2, [pc, #224]	; (8001118 <vTraceEnable+0x110>)
 8001036:	4939      	ldr	r1, [pc, #228]	; (800111c <vTraceEnable+0x114>)
 8001038:	2001      	movs	r0, #1
 800103a:	f7ff ff1b 	bl	8000e74 <SEGGER_RTT_ConfigDownBuffer>
		* This is translated in Tracealyzer and shown as the full name,
		* "Warnings from Recorder".
		*
		* Note: Requires that TRC_CFG_INCLUDE_USER_EVENTS is 1. */
		
		trcWarningChannel = xTraceRegisterString("#WFR"); 
 800103e:	4838      	ldr	r0, [pc, #224]	; (8001120 <vTraceEnable+0x118>)
 8001040:	f000 f907 	bl	8001252 <xTraceRegisterString>
 8001044:	4602      	mov	r2, r0
 8001046:	4b37      	ldr	r3, [pc, #220]	; (8001124 <vTraceEnable+0x11c>)
 8001048:	601a      	str	r2, [r3, #0]

		/* Creates the TzCtrl task - receives trace commands (start, stop, ...) */
		#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
 800104a:	4b37      	ldr	r3, [pc, #220]	; (8001128 <vTraceEnable+0x120>)
 800104c:	9302      	str	r3, [sp, #8]
 800104e:	4b37      	ldr	r3, [pc, #220]	; (800112c <vTraceEnable+0x124>)
 8001050:	9301      	str	r3, [sp, #4]
 8001052:	2301      	movs	r3, #1
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	2300      	movs	r3, #0
 8001058:	f44f 7200 	mov.w	r2, #512	; 0x200
 800105c:	492f      	ldr	r1, [pc, #188]	; (800111c <vTraceEnable+0x114>)
 800105e:	4834      	ldr	r0, [pc, #208]	; (8001130 <vTraceEnable+0x128>)
 8001060:	f002 fc33 	bl	80038ca <xTaskCreateStatic>
 8001064:	4602      	mov	r2, r0
 8001066:	4b29      	ldr	r3, [pc, #164]	; (800110c <vTraceEnable+0x104>)
 8001068:	601a      	str	r2, [r3, #0]
		#else
		xTaskCreate( TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl );
		#endif

		if (HandleTzCtrl == NULL)
 800106a:	4b28      	ldr	r3, [pc, #160]	; (800110c <vTraceEnable+0x104>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d102      	bne.n	8001078 <vTraceEnable+0x70>
		{
			prvTraceError(PSF_ERROR_TZCTRLTASK_NOT_CREATED);
 8001072:	2005      	movs	r0, #5
 8001074:	f001 f846 	bl	8002104 <prvTraceError>
		}
	}

	if (startOption == TRC_START_AWAIT_HOST)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b02      	cmp	r3, #2
 800107c:	d130      	bne.n	80010e0 <vTraceEnable+0xd8>
	{
		/* We keep trying to read commands until the recorder has been started */
		do
		{
			bytes = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	613b      	str	r3, [r7, #16]
			
			status = TRC_STREAM_PORT_READ_DATA(&msg, sizeof(TracealyzerCommandType), (int32_t*)&bytes);
 8001082:	f107 0210 	add.w	r2, r7, #16
 8001086:	f107 0308 	add.w	r3, r7, #8
 800108a:	2108      	movs	r1, #8
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff5b 	bl	8000f48 <readFromRTT>
 8001092:	6178      	str	r0, [r7, #20]
			
			if (status != 0)
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d002      	beq.n	80010a0 <vTraceEnable+0x98>
			{
				prvTraceWarning(PSF_WARNING_STREAM_PORT_READ);
 800109a:	200b      	movs	r0, #11
 800109c:	f001 f804 	bl	80020a8 <prvTraceWarning>
			}

			if ((status == 0) && (bytes == sizeof(TracealyzerCommandType)))
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d117      	bne.n	80010d6 <vTraceEnable+0xce>
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	2b08      	cmp	r3, #8
 80010aa:	d114      	bne.n	80010d6 <vTraceEnable+0xce>
			{
				if (prvIsValidCommand(&msg))
 80010ac:	f107 0308 	add.w	r3, r7, #8
 80010b0:	4618      	mov	r0, r3
 80010b2:	f000 ffa5 	bl	8002000 <prvIsValidCommand>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d00c      	beq.n	80010d6 <vTraceEnable+0xce>
				{
					if (msg.cmdCode == CMD_SET_ACTIVE && msg.param1 == 1)
 80010bc:	7a3b      	ldrb	r3, [r7, #8]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d104      	bne.n	80010cc <vTraceEnable+0xc4>
 80010c2:	7a7b      	ldrb	r3, [r7, #9]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d101      	bne.n	80010cc <vTraceEnable+0xc4>
					{
						/* On start, init and reset the timestamping */
						TRC_PORT_SPECIFIC_INIT();
 80010c8:	f001 f856 	bl	8002178 <prvTraceInitCortexM>
					}
					
					prvProcessCommand(&msg);
 80010cc:	f107 0308 	add.w	r3, r7, #8
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 ffd6 	bl	8002082 <prvProcessCommand>
				}
			}
		}
		while (RecorderEnabled == 0);
 80010d6:	4b17      	ldr	r3, [pc, #92]	; (8001134 <vTraceEnable+0x12c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d0cf      	beq.n	800107e <vTraceEnable+0x76>
	else
	{
		/* On TRC_INIT */
		TRC_PORT_SPECIFIC_INIT();
	}
}
 80010de:	e010      	b.n	8001102 <vTraceEnable+0xfa>
	else if (startOption == TRC_START)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d10b      	bne.n	80010fe <vTraceEnable+0xf6>
		TRC_PORT_SPECIFIC_INIT();
 80010e6:	f001 f847 	bl	8002178 <prvTraceInitCortexM>
		msg.cmdCode = CMD_SET_ACTIVE;
 80010ea:	2301      	movs	r3, #1
 80010ec:	723b      	strb	r3, [r7, #8]
		msg.param1 = 1;
 80010ee:	2301      	movs	r3, #1
 80010f0:	727b      	strb	r3, [r7, #9]
		prvProcessCommand(&msg);
 80010f2:	f107 0308 	add.w	r3, r7, #8
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 ffc3 	bl	8002082 <prvProcessCommand>
}
 80010fc:	e001      	b.n	8001102 <vTraceEnable+0xfa>
		TRC_PORT_SPECIFIC_INIT();
 80010fe:	f001 f83b 	bl	8002178 <prvTraceInitCortexM>
}
 8001102:	bf00      	nop
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200004ec 	.word	0x200004ec
 8001110:	20005228 	.word	0x20005228
 8001114:	08004ec8 	.word	0x08004ec8
 8001118:	20000d50 	.word	0x20000d50
 800111c:	08004ed0 	.word	0x08004ed0
 8001120:	08004ed8 	.word	0x08004ed8
 8001124:	200065b0 	.word	0x200065b0
 8001128:	20000cf0 	.word	0x20000cf0
 800112c:	200004f0 	.word	0x200004f0
 8001130:	080011e1 	.word	0x080011e1
 8001134:	200013c8 	.word	0x200013c8

08001138 <prvTraceGetCurrentTaskHandle>:
 *
 * Function that returns the handle to the currently executing task.
 *
 ******************************************************************************/
void* prvTraceGetCurrentTaskHandle(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
 800113c:	f003 f9ac 	bl	8004498 <xTaskGetCurrentTaskHandle>
 8001140:	4603      	mov	r3, r0
}
 8001142:	4618      	mov	r0, r3
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <prvIsNewTCB>:
 *
 * Tells if this task is already executing, or if there has been a task-switch.
 * Assumed to be called within a trace hook in kernel context.
 ******************************************************************************/
uint32_t prvIsNewTCB(void* pNewTCB)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	if (pCurrentTCB != pNewTCB)
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <prvIsNewTCB+0x2c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	429a      	cmp	r2, r3
 8001158:	d004      	beq.n	8001164 <prvIsNewTCB+0x1c>
	{
		pCurrentTCB = pNewTCB;
 800115a:	4a06      	ldr	r2, [pc, #24]	; (8001174 <prvIsNewTCB+0x2c>)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6013      	str	r3, [r2, #0]
		return 1;
 8001160:	2301      	movs	r3, #1
 8001162:	e000      	b.n	8001166 <prvIsNewTCB+0x1e>
	}
	return 0;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	20000d4c 	.word	0x20000d4c

08001178 <prvCheckRecorderStatus>:
 * Called by TzCtrl task periodically (every 100 ms - seems reasonable).
 * Checks a number of diagnostic variables and give warnings as user events,
 * in most cases including a suggested solution.
 ******************************************************************************/
static void prvCheckRecorderStatus(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
		prvTraceWarning(PSF_WARNING_STACKMON_NO_SLOTS);
		tasksNotIncluded = 0;
	}
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

	if (NoRoomForSymbol > 0)
 800117c:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <prvCheckRecorderStatus+0x58>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d005      	beq.n	8001190 <prvCheckRecorderStatus+0x18>
	{
		prvTraceWarning(PSF_WARNING_SYMBOL_TABLE_SLOTS);
 8001184:	2007      	movs	r0, #7
 8001186:	f000 ff8f 	bl	80020a8 <prvTraceWarning>
		NoRoomForSymbol = 0;
 800118a:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <prvCheckRecorderStatus+0x58>)
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
	}

	if (NoRoomForObjectData > 0)
 8001190:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <prvCheckRecorderStatus+0x5c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d005      	beq.n	80011a4 <prvCheckRecorderStatus+0x2c>
	{
		prvTraceWarning(PSF_WARNING_OBJECT_DATA_SLOTS);
 8001198:	2009      	movs	r0, #9
 800119a:	f000 ff85 	bl	80020a8 <prvTraceWarning>
		NoRoomForObjectData = 0;
 800119e:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <prvCheckRecorderStatus+0x5c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
	}

	if (LongestSymbolName > (TRC_CFG_SYMBOL_MAX_LENGTH))
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <prvCheckRecorderStatus+0x60>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b19      	cmp	r3, #25
 80011aa:	d905      	bls.n	80011b8 <prvCheckRecorderStatus+0x40>
	{
		prvTraceWarning(PSF_WARNING_SYMBOL_MAX_LENGTH);
 80011ac:	2008      	movs	r0, #8
 80011ae:	f000 ff7b 	bl	80020a8 <prvTraceWarning>
		LongestSymbolName = 0;
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <prvCheckRecorderStatus+0x60>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
	}

	if (MaxBytesTruncated > 0)
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <prvCheckRecorderStatus+0x64>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d005      	beq.n	80011cc <prvCheckRecorderStatus+0x54>
	{
		prvTraceWarning(PSF_WARNING_STRING_TOO_LONG);
 80011c0:	200a      	movs	r0, #10
 80011c2:	f000 ff71 	bl	80020a8 <prvTraceWarning>
		MaxBytesTruncated = 0;
 80011c6:	4b05      	ldr	r3, [pc, #20]	; (80011dc <prvCheckRecorderStatus+0x64>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
	}
}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	200013d8 	.word	0x200013d8
 80011d4:	200013dc 	.word	0x200013dc
 80011d8:	200013e0 	.word	0x200013e0
 80011dc:	200013e4 	.word	0x200013e4

080011e0 <TzCtrl>:
 * Task for sending the trace data from the internal buffer to the stream 
 * interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
 * receiving commands from Tracealyzer. Also does some diagnostics.
 ******************************************************************************/
static portTASK_FUNCTION( TzCtrl, pvParameters )
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	TracealyzerCommandType msg;
	int32_t bytes = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60bb      	str	r3, [r7, #8]
	int32_t status = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
	while (1)
	{
		do
		{
			/* Listen for new commands */
			bytes = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60bb      	str	r3, [r7, #8]
			status = TRC_STREAM_PORT_READ_DATA(&msg, sizeof(TracealyzerCommandType), (int32_t*)&bytes);
 80011f4:	f107 0208 	add.w	r2, r7, #8
 80011f8:	f107 030c 	add.w	r3, r7, #12
 80011fc:	2108      	movs	r1, #8
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff fea2 	bl	8000f48 <readFromRTT>
 8001204:	6178      	str	r0, [r7, #20]

			if (status != 0)
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <TzCtrl+0x30>
			{
				/* The connection has failed, stop tracing */
				vTraceStop();
 800120c:	f000 f83f 	bl	800128e <vTraceStop>
			}

			if ((status == 0) && (bytes == sizeof(TracealyzerCommandType)))
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d10f      	bne.n	8001236 <TzCtrl+0x56>
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	2b08      	cmp	r3, #8
 800121a:	d10c      	bne.n	8001236 <TzCtrl+0x56>
			{
				if (prvIsValidCommand(&msg))
 800121c:	f107 030c 	add.w	r3, r7, #12
 8001220:	4618      	mov	r0, r3
 8001222:	f000 feed 	bl	8002000 <prvIsValidCommand>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d004      	beq.n	8001236 <TzCtrl+0x56>
				{
					prvProcessCommand(&msg); /* Start or Stop currently... */
 800122c:	f107 030c 	add.w	r3, r7, #12
 8001230:	4618      	mov	r0, r3
 8001232:	f000 ff26 	bl	8002082 <prvProcessCommand>
#endif			
			
		/* If there was data sent or received (bytes != 0), loop around and repeat, if there is more data to send or receive.
		Otherwise, step out of this loop and sleep for a while. */		
		
		} while (bytes != 0);
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1d9      	bne.n	80011f0 <TzCtrl+0x10>

		if (xTraceIsRecordingEnabled())
 800123c:	f000 f82e 	bl	800129c <xTraceIsRecordingEnabled>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <TzCtrl+0x6a>
		{
			prvCheckRecorderStatus();
 8001246:	f7ff ff97 	bl	8001178 <prvCheckRecorderStatus>
			prvReportStackUsage();
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
 800124a:	200a      	movs	r0, #10
 800124c:	f002 fd32 	bl	8003cb4 <vTaskDelay>
	while (1)
 8001250:	e7ce      	b.n	80011f0 <TzCtrl+0x10>

08001252 <xTraceRegisterString>:
* xTraceRegisterString
*
* Stores a name for a user event channel, returns the handle.
******************************************************************************/
traceString xTraceRegisterString(const char* name)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b084      	sub	sp, #16
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
	traceString str;
	uint16_t eventID = PSF_EVENT_OBJ_NAME;
 800125a:	2303      	movs	r3, #3
 800125c:	81fb      	strh	r3, [r7, #14]
	
	str = prvTraceSaveSymbol(name);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 fdd6 	bl	8001e10 <prvTraceSaveSymbol>
 8001264:	60b8      	str	r0, [r7, #8]

	PSF_ASSERT_RET(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE, str);
 8001266:	89fb      	ldrh	r3, [r7, #14]
 8001268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800126c:	d304      	bcc.n	8001278 <xTraceRegisterString+0x26>
 800126e:	2001      	movs	r0, #1
 8001270:	f000 ff48 	bl	8002104 <prvTraceError>
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	e006      	b.n	8001286 <xTraceRegisterString+0x34>

	/* Always save in symbol table, if the recording has not yet started */
	prvTraceStoreStringEvent(1, eventID, (const char*)name, str);
 8001278:	89f9      	ldrh	r1, [r7, #14]
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	2001      	movs	r0, #1
 8001280:	f000 fbd4 	bl	8001a2c <prvTraceStoreStringEvent>

	return str;
 8001284:	68bb      	ldr	r3, [r7, #8]
}
 8001286:	4618      	mov	r0, r3
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <vTraceStop>:
 * vTraceStop
 *
 * Stops the tracing.
 *****************************************************************************/
void vTraceStop(void)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	af00      	add	r7, sp, #0
	prvSetRecorderEnabled(0);
 8001292:	2000      	movs	r0, #0
 8001294:	f000 f80e 	bl	80012b4 <prvSetRecorderEnabled>
}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}

0800129c <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
	return (int)RecorderEnabled;
 80012a0:	4b03      	ldr	r3, [pc, #12]	; (80012b0 <xTraceIsRecordingEnabled+0x14>)
 80012a2:	681b      	ldr	r3, [r3, #0]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	200013c8 	.word	0x200013c8

080012b4 <prvSetRecorderEnabled>:
/*** INTERNAL FUNCTIONS *******************************************************/
/******************************************************************************/

/* Internal function for starting/stopping the recorder. */
static void prvSetRecorderEnabled(uint32_t isEnabled)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
	TRACE_ALLOC_CRITICAL_SECTION();
	
	if (RecorderEnabled == isEnabled)
 80012bc:	4b18      	ldr	r3, [pc, #96]	; (8001320 <prvSetRecorderEnabled+0x6c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d027      	beq.n	8001316 <prvSetRecorderEnabled+0x62>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80012c6:	f3ef 8310 	mrs	r3, PRIMASK
 80012ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80012cc:	68fb      	ldr	r3, [r7, #12]
	{
		return;
	}

	TRACE_ENTER_CRITICAL_SECTION();
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	2301      	movs	r3, #1
 80012d2:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	f383 8810 	msr	PRIMASK, r3

	if (isEnabled)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d011      	beq.n	8001304 <prvSetRecorderEnabled+0x50>

		#if (TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1)
		prvPagedEventBufferInit(_TzTraceData);
		#endif
		
     	eventCounter = 0;
 80012e0:	4b10      	ldr	r3, [pc, #64]	; (8001324 <prvSetRecorderEnabled+0x70>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
        ISR_stack_index = -1;
 80012e6:	4b10      	ldr	r3, [pc, #64]	; (8001328 <prvSetRecorderEnabled+0x74>)
 80012e8:	22ff      	movs	r2, #255	; 0xff
 80012ea:	701a      	strb	r2, [r3, #0]
        prvTraceStoreHeader();
 80012ec:	f000 f9d2 	bl	8001694 <prvTraceStoreHeader>
		prvTraceStoreSymbolTable();
 80012f0:	f000 f8fe 	bl	80014f0 <prvTraceStoreSymbolTable>
    	prvTraceStoreObjectDataTable();
 80012f4:	f000 f966 	bl	80015c4 <prvTraceStoreObjectDataTable>
    	prvTraceStoreExtensionInfo();
 80012f8:	f000 fa3a 	bl	8001770 <prvTraceStoreExtensionInfo>
        prvTraceStoreStartEvent();
 80012fc:	f000 f816 	bl	800132c <prvTraceStoreStartEvent>
        prvTraceStoreTSConfig();
 8001300:	f000 f88e 	bl	8001420 <prvTraceStoreTSConfig>
    else
    {
		TRC_STREAM_PORT_ON_TRACE_END();
    }
	
	RecorderEnabled = isEnabled;		
 8001304:	4a06      	ldr	r2, [pc, #24]	; (8001320 <prvSetRecorderEnabled+0x6c>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	f383 8810 	msr	PRIMASK, r3
 8001314:	e000      	b.n	8001318 <prvSetRecorderEnabled+0x64>
		return;
 8001316:	bf00      	nop

	TRACE_EXIT_CRITICAL_SECTION();
}
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	200013c8 	.word	0x200013c8
 8001324:	200013cc 	.word	0x200013cc
 8001328:	20000004 	.word	0x20000004

0800132c <prvTraceStoreStartEvent>:

static void prvTraceStoreStartEvent()
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b090      	sub	sp, #64	; 0x40
 8001330:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001332:	f3ef 8310 	mrs	r3, PRIMASK
 8001336:	61fb      	str	r3, [r7, #28]
  return(result);
 8001338:	69fb      	ldr	r3, [r7, #28]
	void* currentTask;
	
	TRACE_ALLOC_CRITICAL_SECTION();
	
	TRACE_ENTER_CRITICAL_SECTION();
 800133a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800133c:	2301      	movs	r3, #1
 800133e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001340:	6a3b      	ldr	r3, [r7, #32]
 8001342:	f383 8810 	msr	PRIMASK, r3
	
	if (uiTraceSystemState == TRC_STATE_IN_STARTUP)
 8001346:	4b32      	ldr	r3, [pc, #200]	; (8001410 <prvTraceStoreStartEvent+0xe4>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d102      	bne.n	8001354 <prvTraceStoreStartEvent+0x28>
	{
		currentTask = (void*)HANDLE_NO_TASK;
 800134e:	2302      	movs	r3, #2
 8001350:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001352:	e002      	b.n	800135a <prvTraceStoreStartEvent+0x2e>
	}
	else
	{
		currentTask = TRACE_GET_CURRENT_TASK();
 8001354:	f7ff fef0 	bl	8001138 <prvTraceGetCurrentTaskHandle>
 8001358:	63f8      	str	r0, [r7, #60]	; 0x3c
	}
	
	eventCounter++;
 800135a:	4b2e      	ldr	r3, [pc, #184]	; (8001414 <prvTraceStoreStartEvent+0xe8>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	3301      	adds	r3, #1
 8001360:	4a2c      	ldr	r2, [pc, #176]	; (8001414 <prvTraceStoreStartEvent+0xe8>)
 8001362:	6013      	str	r3, [r2, #0]
	
	{
		TRC_STREAM_PORT_ALLOCATE_EVENT_BLOCKING(EventWithParam_3, pxEvent, sizeof(EventWithParam_3));
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	62bb      	str	r3, [r7, #40]	; 0x28
		if (pxEvent != NULL)
 8001368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800136a:	2b00      	cmp	r3, #0
 800136c:	d047      	beq.n	80013fe <prvTraceStoreStartEvent+0xd2>
		{
			pxEvent->base.EventID = PSF_EVENT_TRACE_START | PARAM_COUNT(3);
 800136e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001370:	f243 0201 	movw	r2, #12289	; 0x3001
 8001374:	801a      	strh	r2, [r3, #0]
			pxEvent->base.EventCount = (uint16_t)eventCounter;
 8001376:	4b27      	ldr	r3, [pc, #156]	; (8001414 <prvTraceStoreStartEvent+0xe8>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	b29a      	uxth	r2, r3
 800137c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800137e:	805a      	strh	r2, [r3, #2]
			pxEvent->base.TS = prvGetTimestamp32();
 8001380:	f000 ff2c 	bl	80021dc <prvGetTimestamp32>
 8001384:	4602      	mov	r2, r0
 8001386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001388:	605a      	str	r2, [r3, #4]
			pxEvent->param1 = (uint32_t)TRACE_GET_OS_TICKS();
 800138a:	4b23      	ldr	r3, [pc, #140]	; (8001418 <prvTraceStoreStartEvent+0xec>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001390:	609a      	str	r2, [r3, #8]
			pxEvent->param2 = (uint32_t)currentTask;
 8001392:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001396:	60da      	str	r2, [r3, #12]
			pxEvent->param3 = SessionCounter++;
 8001398:	4b20      	ldr	r3, [pc, #128]	; (800141c <prvTraceStoreStartEvent+0xf0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	1c5a      	adds	r2, r3, #1
 800139e:	491f      	ldr	r1, [pc, #124]	; (800141c <prvTraceStoreStartEvent+0xf0>)
 80013a0:	600a      	str	r2, [r1, #0]
 80013a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013a4:	6113      	str	r3, [r2, #16]
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(pxEvent, sizeof(EventWithParam_3));
 80013a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80013aa:	2314      	movs	r3, #20
 80013ac:	637b      	str	r3, [r7, #52]	; 0x34
 80013ae:	2300      	movs	r3, #0
 80013b0:	633b      	str	r3, [r7, #48]	; 0x30
 80013b2:	2300      	movs	r3, #0
 80013b4:	603b      	str	r3, [r7, #0]
 80013b6:	463b      	mov	r3, r7
 80013b8:	461a      	mov	r2, r3
 80013ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80013bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80013be:	f7ff fde7 	bl	8000f90 <writeToRTT>
 80013c2:	6278      	str	r0, [r7, #36]	; 0x24
 80013c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <prvTraceStoreStartEvent+0xa6>
 80013ca:	2006      	movs	r0, #6
 80013cc:	f000 fe9a 	bl	8002104 <prvTraceError>
 80013d0:	e00f      	b.n	80013f2 <prvTraceStoreStartEvent+0xc6>
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	461a      	mov	r2, r3
 80013d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013d8:	4413      	add	r3, r2
 80013da:	63bb      	str	r3, [r7, #56]	; 0x38
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	461a      	mov	r2, r3
 80013e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013e2:	1a9b      	subs	r3, r3, r2
 80013e4:	637b      	str	r3, [r7, #52]	; 0x34
 80013e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013e8:	3301      	adds	r3, #1
 80013ea:	633b      	str	r3, [r7, #48]	; 0x30
 80013ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1df      	bne.n	80013b2 <prvTraceStoreStartEvent+0x86>
 80013f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d902      	bls.n	80013fe <prvTraceStoreStartEvent+0xd2>
 80013f8:	200d      	movs	r0, #13
 80013fa:	f000 fe55 	bl	80020a8 <prvTraceWarning>
 80013fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001400:	61bb      	str	r3, [r7, #24]
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	f383 8810 	msr	PRIMASK, r3
		}
	}
	
	TRACE_EXIT_CRITICAL_SECTION();
}
 8001408:	bf00      	nop
 800140a:	3740      	adds	r7, #64	; 0x40
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	200013e8 	.word	0x200013e8
 8001414:	200013cc 	.word	0x200013cc
 8001418:	200013d0 	.word	0x200013d0
 800141c:	200013c4 	.word	0x200013c4

08001420 <prvTraceStoreTSConfig>:

/* Store the Timestamp Config event */
static void prvTraceStoreTSConfig(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08c      	sub	sp, #48	; 0x30
 8001424:	af00      	add	r7, sp, #0
	/* If not overridden using vTraceSetFrequency, use default value */
	if (timestampFrequency == 0)
 8001426:	4b2f      	ldr	r3, [pc, #188]	; (80014e4 <prvTraceStoreTSConfig+0xc4>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d103      	bne.n	8001436 <prvTraceStoreTSConfig+0x16>
	{
		timestampFrequency = TRC_HWTC_FREQ_HZ;
 800142e:	4b2e      	ldr	r3, [pc, #184]	; (80014e8 <prvTraceStoreTSConfig+0xc8>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a2c      	ldr	r2, [pc, #176]	; (80014e4 <prvTraceStoreTSConfig+0xc4>)
 8001434:	6013      	str	r3, [r2, #0]
	}

	eventCounter++;
 8001436:	4b2d      	ldr	r3, [pc, #180]	; (80014ec <prvTraceStoreTSConfig+0xcc>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	3301      	adds	r3, #1
 800143c:	4a2b      	ldr	r2, [pc, #172]	; (80014ec <prvTraceStoreTSConfig+0xcc>)
 800143e:	6013      	str	r3, [r2, #0]
			event->param4 = (uint32_t)(TRC_CFG_ISR_TAILCHAINING_THRESHOLD);
			event->param5 = (uint32_t)(TRC_HWTC_PERIOD);
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(event, (uint32_t)sizeof(EventWithParam_5));
		}
#else
		TRC_STREAM_PORT_ALLOCATE_EVENT_BLOCKING(EventWithParam_4, event, sizeof(EventWithParam_4));
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	623b      	str	r3, [r7, #32]
		if (event != NULL)
 8001444:	6a3b      	ldr	r3, [r7, #32]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d047      	beq.n	80014da <prvTraceStoreTSConfig+0xba>
		{
			event->base.EventID = PSF_EVENT_TS_CONFIG | (uint16_t)PARAM_COUNT(4);
 800144a:	6a3b      	ldr	r3, [r7, #32]
 800144c:	f244 0202 	movw	r2, #16386	; 0x4002
 8001450:	801a      	strh	r2, [r3, #0]
			event->base.EventCount = (uint16_t)eventCounter;
 8001452:	4b26      	ldr	r3, [pc, #152]	; (80014ec <prvTraceStoreTSConfig+0xcc>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	b29a      	uxth	r2, r3
 8001458:	6a3b      	ldr	r3, [r7, #32]
 800145a:	805a      	strh	r2, [r3, #2]
			event->base.TS = prvGetTimestamp32();
 800145c:	f000 febe 	bl	80021dc <prvGetTimestamp32>
 8001460:	4602      	mov	r2, r0
 8001462:	6a3b      	ldr	r3, [r7, #32]
 8001464:	605a      	str	r2, [r3, #4]
						
			event->param1 = (uint32_t)timestampFrequency;
 8001466:	4b1f      	ldr	r3, [pc, #124]	; (80014e4 <prvTraceStoreTSConfig+0xc4>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	6a3b      	ldr	r3, [r7, #32]
 800146c:	609a      	str	r2, [r3, #8]
			event->param2 = (uint32_t)(TRACE_TICK_RATE_HZ);
 800146e:	6a3b      	ldr	r3, [r7, #32]
 8001470:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001474:	60da      	str	r2, [r3, #12]
			event->param3 = (uint32_t)(TRC_HWTC_TYPE);
 8001476:	6a3b      	ldr	r3, [r7, #32]
 8001478:	2201      	movs	r2, #1
 800147a:	611a      	str	r2, [r3, #16]
			event->param4 = (uint32_t)(TRC_CFG_ISR_TAILCHAINING_THRESHOLD);
 800147c:	6a3b      	ldr	r3, [r7, #32]
 800147e:	2200      	movs	r2, #0
 8001480:	615a      	str	r2, [r3, #20]
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(event, (uint32_t)sizeof(EventWithParam_4));
 8001482:	6a3b      	ldr	r3, [r7, #32]
 8001484:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001486:	2318      	movs	r3, #24
 8001488:	62bb      	str	r3, [r7, #40]	; 0x28
 800148a:	2300      	movs	r3, #0
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
 800148e:	2300      	movs	r3, #0
 8001490:	603b      	str	r3, [r7, #0]
 8001492:	463b      	mov	r3, r7
 8001494:	461a      	mov	r2, r3
 8001496:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001498:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800149a:	f7ff fd79 	bl	8000f90 <writeToRTT>
 800149e:	61f8      	str	r0, [r7, #28]
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <prvTraceStoreTSConfig+0x8e>
 80014a6:	2006      	movs	r0, #6
 80014a8:	f000 fe2c 	bl	8002104 <prvTraceError>
 80014ac:	e00f      	b.n	80014ce <prvTraceStoreTSConfig+0xae>
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	461a      	mov	r2, r3
 80014b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014b4:	4413      	add	r3, r2
 80014b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	461a      	mov	r2, r3
 80014bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014be:	1a9b      	subs	r3, r3, r2
 80014c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	3301      	adds	r3, #1
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
 80014c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1df      	bne.n	800148e <prvTraceStoreTSConfig+0x6e>
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d902      	bls.n	80014da <prvTraceStoreTSConfig+0xba>
 80014d4:	200d      	movs	r0, #13
 80014d6:	f000 fde7 	bl	80020a8 <prvTraceWarning>
		}			
#endif

	}
}
 80014da:	bf00      	nop
 80014dc:	3730      	adds	r7, #48	; 0x30
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200013d4 	.word	0x200013d4
 80014e8:	20000000 	.word	0x20000000
 80014ec:	200013cc 	.word	0x200013cc

080014f0 <prvTraceStoreSymbolTable>:

/* Stores the symbol table on Start */
static void prvTraceStoreSymbolTable(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b094      	sub	sp, #80	; 0x50
 80014f4:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t j = 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014fe:	f3ef 8310 	mrs	r3, PRIMASK
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8001504:	6abb      	ldr	r3, [r7, #40]	; 0x28
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
 8001506:	63bb      	str	r3, [r7, #56]	; 0x38
 8001508:	2301      	movs	r3, #1
 800150a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800150c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150e:	f383 8810 	msr	PRIMASK, r3
	
	{
		for (i = 0; i < (sizeof(SymbolTable) / sizeof(uint32_t)); i += (SYMBOL_TABLE_SLOT_SIZE / sizeof(uint32_t)))
 8001512:	2300      	movs	r3, #0
 8001514:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001516:	e045      	b.n	80015a4 <prvTraceStoreSymbolTable+0xb4>
		{
			TRC_STREAM_PORT_ALLOCATE_EVENT_BLOCKING(uint32_t, data, SYMBOL_TABLE_SLOT_SIZE);            
 8001518:	463b      	mov	r3, r7
 800151a:	637b      	str	r3, [r7, #52]	; 0x34
            
            for (j = 0; j < (SYMBOL_TABLE_SLOT_SIZE / sizeof(uint32_t)); j++)
 800151c:	2300      	movs	r3, #0
 800151e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001520:	e00d      	b.n	800153e <prvTraceStoreSymbolTable+0x4e>
            {
            	data[j] = symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT32[i+j];
 8001522:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001524:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001526:	441a      	add	r2, r3
 8001528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800152e:	440b      	add	r3, r1
 8001530:	4923      	ldr	r1, [pc, #140]	; (80015c0 <prvTraceStoreSymbolTable+0xd0>)
 8001532:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001536:	601a      	str	r2, [r3, #0]
            for (j = 0; j < (SYMBOL_TABLE_SLOT_SIZE / sizeof(uint32_t)); j++)
 8001538:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800153a:	3301      	adds	r3, #1
 800153c:	64bb      	str	r3, [r7, #72]	; 0x48
 800153e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001540:	2b07      	cmp	r3, #7
 8001542:	d9ee      	bls.n	8001522 <prvTraceStoreSymbolTable+0x32>
            }
			
			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(data, SYMBOL_TABLE_SLOT_SIZE);						
 8001544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001546:	647b      	str	r3, [r7, #68]	; 0x44
 8001548:	2320      	movs	r3, #32
 800154a:	643b      	str	r3, [r7, #64]	; 0x40
 800154c:	2300      	movs	r3, #0
 800154e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001550:	2300      	movs	r3, #0
 8001552:	623b      	str	r3, [r7, #32]
 8001554:	f107 0320 	add.w	r3, r7, #32
 8001558:	461a      	mov	r2, r3
 800155a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800155c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800155e:	f7ff fd17 	bl	8000f90 <writeToRTT>
 8001562:	6338      	str	r0, [r7, #48]	; 0x30
 8001564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <prvTraceStoreSymbolTable+0x82>
 800156a:	2006      	movs	r0, #6
 800156c:	f000 fdca 	bl	8002104 <prvTraceError>
 8001570:	e00f      	b.n	8001592 <prvTraceStoreSymbolTable+0xa2>
 8001572:	6a3b      	ldr	r3, [r7, #32]
 8001574:	461a      	mov	r2, r3
 8001576:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001578:	4413      	add	r3, r2
 800157a:	647b      	str	r3, [r7, #68]	; 0x44
 800157c:	6a3b      	ldr	r3, [r7, #32]
 800157e:	461a      	mov	r2, r3
 8001580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001582:	1a9b      	subs	r3, r3, r2
 8001584:	643b      	str	r3, [r7, #64]	; 0x40
 8001586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001588:	3301      	adds	r3, #1
 800158a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800158c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1de      	bne.n	8001550 <prvTraceStoreSymbolTable+0x60>
 8001592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001594:	2b01      	cmp	r3, #1
 8001596:	d902      	bls.n	800159e <prvTraceStoreSymbolTable+0xae>
 8001598:	200d      	movs	r0, #13
 800159a:	f000 fd85 	bl	80020a8 <prvTraceWarning>
		for (i = 0; i < (sizeof(SymbolTable) / sizeof(uint32_t)); i += (SYMBOL_TABLE_SLOT_SIZE / sizeof(uint32_t)))
 800159e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015a0:	3308      	adds	r3, #8
 80015a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80015a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015a6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80015aa:	d3b5      	bcc.n	8001518 <prvTraceStoreSymbolTable+0x28>
 80015ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
 80015b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b2:	f383 8810 	msr	PRIMASK, r3
		}
	}
	TRACE_EXIT_CRITICAL_SECTION();
}
 80015b6:	bf00      	nop
 80015b8:	3750      	adds	r7, #80	; 0x50
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000d78 	.word	0x20000d78

080015c4 <prvTraceStoreObjectDataTable>:

/* Stores the object table on Start */
static void prvTraceStoreObjectDataTable(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08e      	sub	sp, #56	; 0x38
 80015c8:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t j = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80015d2:	f3ef 8310 	mrs	r3, PRIMASK
 80015d6:	613b      	str	r3, [r7, #16]
  return(result);
 80015d8:	693b      	ldr	r3, [r7, #16]
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
 80015da:	623b      	str	r3, [r7, #32]
 80015dc:	2301      	movs	r3, #1
 80015de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	f383 8810 	msr	PRIMASK, r3

	{
		for (i = 0; i < (sizeof(ObjectDataTable) / sizeof(uint32_t)); i += (OBJECT_DATA_SLOT_SIZE / sizeof(uint32_t)))
 80015e6:	2300      	movs	r3, #0
 80015e8:	637b      	str	r3, [r7, #52]	; 0x34
 80015ea:	e044      	b.n	8001676 <prvTraceStoreObjectDataTable+0xb2>
        {
            TRC_STREAM_PORT_ALLOCATE_EVENT_BLOCKING(uint32_t, data, OBJECT_DATA_SLOT_SIZE);
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	61fb      	str	r3, [r7, #28]
            
            for (j = 0; j < (OBJECT_DATA_SLOT_SIZE / sizeof(uint32_t)); j++)
 80015f0:	2300      	movs	r3, #0
 80015f2:	633b      	str	r3, [r7, #48]	; 0x30
 80015f4:	e00d      	b.n	8001612 <prvTraceStoreObjectDataTable+0x4e>
            {
            	data[j] = objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[i+j];
 80015f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015fa:	441a      	add	r2, r3
 80015fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	69f9      	ldr	r1, [r7, #28]
 8001602:	440b      	add	r3, r1
 8001604:	4922      	ldr	r1, [pc, #136]	; (8001690 <prvTraceStoreObjectDataTable+0xcc>)
 8001606:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800160a:	601a      	str	r2, [r3, #0]
            for (j = 0; j < (OBJECT_DATA_SLOT_SIZE / sizeof(uint32_t)); j++)
 800160c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800160e:	3301      	adds	r3, #1
 8001610:	633b      	str	r3, [r7, #48]	; 0x30
 8001612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001614:	2b01      	cmp	r3, #1
 8001616:	d9ee      	bls.n	80015f6 <prvTraceStoreObjectDataTable+0x32>
            }

			TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(data, OBJECT_DATA_SLOT_SIZE);			
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800161c:	2308      	movs	r3, #8
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001620:	2300      	movs	r3, #0
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
 8001624:	2300      	movs	r3, #0
 8001626:	603b      	str	r3, [r7, #0]
 8001628:	463b      	mov	r3, r7
 800162a:	461a      	mov	r2, r3
 800162c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800162e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001630:	f7ff fcae 	bl	8000f90 <writeToRTT>
 8001634:	61b8      	str	r0, [r7, #24]
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d003      	beq.n	8001644 <prvTraceStoreObjectDataTable+0x80>
 800163c:	2006      	movs	r0, #6
 800163e:	f000 fd61 	bl	8002104 <prvTraceError>
 8001642:	e00f      	b.n	8001664 <prvTraceStoreObjectDataTable+0xa0>
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	461a      	mov	r2, r3
 8001648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800164a:	4413      	add	r3, r2
 800164c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	461a      	mov	r2, r3
 8001652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001654:	1a9b      	subs	r3, r3, r2
 8001656:	62bb      	str	r3, [r7, #40]	; 0x28
 8001658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165a:	3301      	adds	r3, #1
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
 800165e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1df      	bne.n	8001624 <prvTraceStoreObjectDataTable+0x60>
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	2b01      	cmp	r3, #1
 8001668:	d902      	bls.n	8001670 <prvTraceStoreObjectDataTable+0xac>
 800166a:	200d      	movs	r0, #13
 800166c:	f000 fd1c 	bl	80020a8 <prvTraceWarning>
		for (i = 0; i < (sizeof(ObjectDataTable) / sizeof(uint32_t)); i += (OBJECT_DATA_SLOT_SIZE / sizeof(uint32_t)))
 8001670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001672:	3302      	adds	r3, #2
 8001674:	637b      	str	r3, [r7, #52]	; 0x34
 8001676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001678:	2b4f      	cmp	r3, #79	; 0x4f
 800167a:	d9b7      	bls.n	80015ec <prvTraceStoreObjectDataTable+0x28>
 800167c:	6a3b      	ldr	r3, [r7, #32]
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f383 8810 	msr	PRIMASK, r3
        }
	}
	TRACE_EXIT_CRITICAL_SECTION();
}
 8001686:	bf00      	nop
 8001688:	3738      	adds	r7, #56	; 0x38
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	2000127c 	.word	0x2000127c

08001694 <prvTraceStoreHeader>:

/* Stores the header information on Start */
static void prvTraceStoreHeader(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b090      	sub	sp, #64	; 0x40
 8001698:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800169a:	f3ef 8310 	mrs	r3, PRIMASK
 800169e:	623b      	str	r3, [r7, #32]
  return(result);
 80016a0:	6a3b      	ldr	r3, [r7, #32]
  	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
 80016a2:	633b      	str	r3, [r7, #48]	; 0x30
 80016a4:	2301      	movs	r3, #1
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	f383 8810 	msr	PRIMASK, r3

	{
	  	TRC_STREAM_PORT_ALLOCATE_EVENT_BLOCKING(PSFHeaderInfo, header, sizeof(PSFHeaderInfo));
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	62fb      	str	r3, [r7, #44]	; 0x2c
		header->psf = PSFEndianessIdentifier;
 80016b2:	4b2c      	ldr	r3, [pc, #176]	; (8001764 <prvTraceStoreHeader+0xd0>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b8:	601a      	str	r2, [r3, #0]
		header->version = FormatVersion;
 80016ba:	4b2b      	ldr	r3, [pc, #172]	; (8001768 <prvTraceStoreHeader+0xd4>)
 80016bc:	881a      	ldrh	r2, [r3, #0]
 80016be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c0:	809a      	strh	r2, [r3, #4]
		header->platform = TRACE_KERNEL_VERSION;
 80016c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c4:	f641 22a1 	movw	r2, #6817	; 0x1aa1
 80016c8:	80da      	strh	r2, [r3, #6]
		header->options = 0;
 80016ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
		header->heapCounter = trcHeapCounter;
 80016d0:	4b26      	ldr	r3, [pc, #152]	; (800176c <prvTraceStoreHeader+0xd8>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d6:	60da      	str	r2, [r3, #12]
        /* Lowest bit used for TRC_IRQ_PRIORITY_ORDER */
		header->options = header->options | (TRC_IRQ_PRIORITY_ORDER << 0);
 80016d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016de:	609a      	str	r2, [r3, #8]
		header->symbolSize = SYMBOL_TABLE_SLOT_SIZE;
 80016e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e2:	2220      	movs	r2, #32
 80016e4:	821a      	strh	r2, [r3, #16]
		header->symbolCount = (TRC_CFG_SYMBOL_TABLE_SLOTS);
 80016e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e8:	2228      	movs	r2, #40	; 0x28
 80016ea:	825a      	strh	r2, [r3, #18]
		header->objectDataSize = 8;
 80016ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ee:	2208      	movs	r2, #8
 80016f0:	829a      	strh	r2, [r3, #20]
		header->objectDataCount = (TRC_CFG_OBJECT_DATA_SLOTS);
 80016f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f4:	2228      	movs	r2, #40	; 0x28
 80016f6:	82da      	strh	r2, [r3, #22]
		TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(header, sizeof(PSFHeaderInfo));
 80016f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016fc:	2318      	movs	r3, #24
 80016fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8001700:	2300      	movs	r3, #0
 8001702:	637b      	str	r3, [r7, #52]	; 0x34
 8001704:	2300      	movs	r3, #0
 8001706:	603b      	str	r3, [r7, #0]
 8001708:	463b      	mov	r3, r7
 800170a:	461a      	mov	r2, r3
 800170c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800170e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001710:	f7ff fc3e 	bl	8000f90 <writeToRTT>
 8001714:	62b8      	str	r0, [r7, #40]	; 0x28
 8001716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001718:	2b00      	cmp	r3, #0
 800171a:	d003      	beq.n	8001724 <prvTraceStoreHeader+0x90>
 800171c:	2006      	movs	r0, #6
 800171e:	f000 fcf1 	bl	8002104 <prvTraceError>
 8001722:	e00f      	b.n	8001744 <prvTraceStoreHeader+0xb0>
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	461a      	mov	r2, r3
 8001728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800172a:	4413      	add	r3, r2
 800172c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001734:	1a9b      	subs	r3, r3, r2
 8001736:	63bb      	str	r3, [r7, #56]	; 0x38
 8001738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800173a:	3301      	adds	r3, #1
 800173c:	637b      	str	r3, [r7, #52]	; 0x34
 800173e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1df      	bne.n	8001704 <prvTraceStoreHeader+0x70>
 8001744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001746:	2b01      	cmp	r3, #1
 8001748:	d902      	bls.n	8001750 <prvTraceStoreHeader+0xbc>
 800174a:	200d      	movs	r0, #13
 800174c:	f000 fcac 	bl	80020a8 <prvTraceWarning>
 8001750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001752:	61fb      	str	r3, [r7, #28]
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	f383 8810 	msr	PRIMASK, r3
	}
	TRACE_EXIT_CRITICAL_SECTION();
}
 800175a:	bf00      	nop
 800175c:	3740      	adds	r7, #64	; 0x40
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000008 	.word	0x20000008
 8001768:	2000000c 	.word	0x2000000c
 800176c:	20000d70 	.word	0x20000d70

08001770 <prvTraceStoreExtensionInfo>:

/* Stores the header information on Start */
static void prvTraceStoreExtensionInfo(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08c      	sub	sp, #48	; 0x30
 8001774:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001776:	f3ef 8310 	mrs	r3, PRIMASK
 800177a:	613b      	str	r3, [r7, #16]
  return(result);
 800177c:	693b      	ldr	r3, [r7, #16]
  	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
 800177e:	623b      	str	r3, [r7, #32]
 8001780:	2301      	movs	r3, #1
 8001782:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	f383 8810 	msr	PRIMASK, r3

	{
		TRC_STREAM_PORT_ALLOCATE_EVENT_BLOCKING(PSFExtensionInfoType, extinfo, sizeof(PSFExtensionInfoType));
 800178a:	f107 0308 	add.w	r3, r7, #8
 800178e:	61fb      	str	r3, [r7, #28]
		memcpy(extinfo, &PSFExtensionInfo, sizeof(PSFExtensionInfoType));
 8001790:	4b1c      	ldr	r3, [pc, #112]	; (8001804 <prvTraceStoreExtensionInfo+0x94>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	601a      	str	r2, [r3, #0]
		TRC_STREAM_PORT_COMMIT_EVENT_BLOCKING(extinfo, sizeof(PSFExtensionInfoType));		
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800179c:	2304      	movs	r3, #4
 800179e:	62bb      	str	r3, [r7, #40]	; 0x28
 80017a0:	2300      	movs	r3, #0
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
 80017a4:	2300      	movs	r3, #0
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	461a      	mov	r2, r3
 80017ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80017b0:	f7ff fbee 	bl	8000f90 <writeToRTT>
 80017b4:	61b8      	str	r0, [r7, #24]
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d003      	beq.n	80017c4 <prvTraceStoreExtensionInfo+0x54>
 80017bc:	2006      	movs	r0, #6
 80017be:	f000 fca1 	bl	8002104 <prvTraceError>
 80017c2:	e00f      	b.n	80017e4 <prvTraceStoreExtensionInfo+0x74>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	461a      	mov	r2, r3
 80017c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ca:	4413      	add	r3, r2
 80017cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	461a      	mov	r2, r3
 80017d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d4:	1a9b      	subs	r3, r3, r2
 80017d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	3301      	adds	r3, #1
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
 80017de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1df      	bne.n	80017a4 <prvTraceStoreExtensionInfo+0x34>
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d902      	bls.n	80017f0 <prvTraceStoreExtensionInfo+0x80>
 80017ea:	200d      	movs	r0, #13
 80017ec:	f000 fc5c 	bl	80020a8 <prvTraceWarning>
 80017f0:	6a3b      	ldr	r3, [r7, #32]
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f383 8810 	msr	PRIMASK, r3
	}
	TRACE_EXIT_CRITICAL_SECTION();
}
 80017fa:	bf00      	nop
 80017fc:	3730      	adds	r7, #48	; 0x30
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000010 	.word	0x20000010

08001808 <prvTraceGetError>:

/* Returns the error or warning, as a string, or NULL if none. */
static const char* prvTraceGetError(int errCode)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	/* Note: the error messages are short, in order to fit in a User Event.
	Instead, the users can read more in the below comments.*/

	switch (errCode)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3b01      	subs	r3, #1
 8001814:	2b0d      	cmp	r3, #13
 8001816:	d83b      	bhi.n	8001890 <prvTraceGetError+0x88>
 8001818:	a201      	add	r2, pc, #4	; (adr r2, 8001820 <prvTraceGetError+0x18>)
 800181a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800181e:	bf00      	nop
 8001820:	08001879 	.word	0x08001879
 8001824:	0800187d 	.word	0x0800187d
 8001828:	08001881 	.word	0x08001881
 800182c:	08001885 	.word	0x08001885
 8001830:	08001889 	.word	0x08001889
 8001834:	0800188d 	.word	0x0800188d
 8001838:	08001859 	.word	0x08001859
 800183c:	0800185d 	.word	0x0800185d
 8001840:	08001861 	.word	0x08001861
 8001844:	08001865 	.word	0x08001865
 8001848:	08001869 	.word	0x08001869
 800184c:	0800186d 	.word	0x0800186d
 8001850:	08001875 	.word	0x08001875
 8001854:	08001871 	.word	0x08001871
	case PSF_WARNING_SYMBOL_TABLE_SLOTS:
		/* There was not enough symbol table slots for storing symbol names.
		The number of missing slots is counted by NoRoomForSymbol. Inspect this
		variable and increase TRC_CFG_SYMBOL_TABLE_SLOTS by at least that value. */

		return "Exceeded SYMBOL_TABLE_SLOTS (see prvTraceGetError)";
 8001858:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <prvTraceGetError+0x98>)
 800185a:	e01a      	b.n	8001892 <prvTraceGetError+0x8a>
		/* A symbol name exceeded TRC_CFG_SYMBOL_MAX_LENGTH in length.
		Make sure the symbol names are at most TRC_CFG_SYMBOL_MAX_LENGTH,
		or inspect LongestSymbolName and increase TRC_CFG_SYMBOL_MAX_LENGTH
		to at least this value. */

		return "Exceeded SYMBOL_MAX_LENGTH (see prvTraceGetError)";
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <prvTraceGetError+0x9c>)
 800185e:	e018      	b.n	8001892 <prvTraceGetError+0x8a>
		/* There was not enough symbol object table slots for storing object
		properties, such as task priorites. The number of missing slots is
		counted by NoRoomForObjectData. Inspect this variable and increase
		TRC_CFG_OBJECT_DATA_SLOTS by at least that value. */

		return "Exceeded OBJECT_DATA_SLOTS (see prvTraceGetError)";
 8001860:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <prvTraceGetError+0xa0>)
 8001862:	e016      	b.n	8001892 <prvTraceGetError+0x8a>
		A PSF event may store maximum 60 bytes payload, including data
		arguments and string characters. For User Events, also the User
		Event Channel (4 bytes) must be squeezed in, if a channel is
		specified (can be NULL). */

		return "String too long (see prvTraceGetError)";
 8001864:	4b11      	ldr	r3, [pc, #68]	; (80018ac <prvTraceGetError+0xa4>)
 8001866:	e014      	b.n	8001892 <prvTraceGetError+0x8a>

	case PSF_WARNING_STREAM_PORT_READ:
		/* TRC_STREAM_PORT_READ_DATA is expected to return 0 when completed successfully.
		This means there is an error in the communication with host/Tracealyzer. */

		return "TRC_STREAM_PORT_READ_DATA returned error (!= 0).";
 8001868:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <prvTraceGetError+0xa8>)
 800186a:	e012      	b.n	8001892 <prvTraceGetError+0x8a>

	case PSF_WARNING_STREAM_PORT_WRITE:
		/* TRC_STREAM_PORT_WRITE_DATA is expected to return 0 when completed successfully.
		This means there is an error in the communication with host/Tracealyzer. */

		return "TRC_STREAM_PORT_WRITE_DATA returned error (!= 0).";
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <prvTraceGetError+0xac>)
 800186e:	e010      	b.n	8001892 <prvTraceGetError+0x8a>

	case PSF_WARNING_STACKMON_NO_SLOTS:
		/* TRC_CFG_STACK_MONITOR_MAX_TASKS is too small to monitor all tasks. */

		return "TRC_CFG_STACK_MONITOR_MAX_TASKS too small!";
 8001870:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <prvTraceGetError+0xb0>)
 8001872:	e00e      	b.n	8001892 <prvTraceGetError+0x8a>

	case PSF_WARNING_STREAM_PORT_INITIAL_BLOCKING:
		/* Blocking occurred during vTraceEnable. This happens if the trace buffer is
		smaller than the initial transmission (trace header, object table, and symbol table). */

		return "Blocking in vTraceEnable (see xTraceGetLastError)";
 8001874:	4b11      	ldr	r3, [pc, #68]	; (80018bc <prvTraceGetError+0xb4>)
 8001876:	e00c      	b.n	8001892 <prvTraceGetError+0x8a>

	case PSF_ERROR_EVENT_CODE_TOO_LARGE:
		/* The highest allowed event code is 4095, anything higher is an unexpected error.
		Please contact support@percepio.com for assistance.*/

		return "Invalid event code (see prvTraceGetError)";
 8001878:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <prvTraceGetError+0xb8>)
 800187a:	e00a      	b.n	8001892 <prvTraceGetError+0x8a>
	case PSF_ERROR_ISR_NESTING_OVERFLOW:
		/* Nesting of ISR trace calls exceeded the limit (TRC_CFG_MAX_ISR_NESTING).
		If this is unlikely, make sure that you call vTraceStoreISRExit in the end
		of all ISR handlers. Or increase TRC_CFG_MAX_ISR_NESTING. */

		return "Exceeded ISR nesting (see prvTraceGetError)";
 800187c:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <prvTraceGetError+0xbc>)
 800187e:	e008      	b.n	8001892 <prvTraceGetError+0x8a>
		/* On ARM Cortex-M only - failed to initialize DWT Cycle Counter since not supported by this chip.
		DWT timestamping is selected automatically for ART Cortex-M3, M4 and higher, based on the __CORTEX_M
		macro normally set by ARM's CMSIS library, since typically available. You can however select
		SysTick timestamping instead by defining adding "#define TRC_CFG_ARM_CM_USE_SYSTICK".*/

		return "DWT not supported (see prvTraceGetError)";
 8001880:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <prvTraceGetError+0xc0>)
 8001882:	e006      	b.n	8001892 <prvTraceGetError+0x8a>
		/* On ARM Cortex-M only - failed to initialize DWT Cycle Counter since not supported by this chip.
		DWT timestamping is selected automatically for ART Cortex-M3, M4 and higher, based on the __CORTEX_M
		macro normally set by ARM's CMSIS library, since typically available. You can however select
		SysTick timestamping instead by defining adding "#define TRC_CFG_ARM_CM_USE_SYSTICK".*/

		return "DWT_CYCCNT not supported (see prvTraceGetError)";
 8001884:	4b11      	ldr	r3, [pc, #68]	; (80018cc <prvTraceGetError+0xc4>)
 8001886:	e004      	b.n	8001892 <prvTraceGetError+0x8a>

	case PSF_ERROR_TZCTRLTASK_NOT_CREATED:
		/* vTraceEnable failed creating the trace control task (TzCtrl) - incorrect parameters (priority?)
		or insufficient heap size? */
		return "Could not create TzCtrl (see prvTraceGetError)";
 8001888:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <prvTraceGetError+0xc8>)
 800188a:	e002      	b.n	8001892 <prvTraceGetError+0x8a>

	case PSF_ERROR_STREAM_PORT_WRITE:
		/* TRC_STREAM_PORT_WRITE_DATA is expected to return 0 when completed successfully.
		This means there is an error in the communication with host/Tracealyzer. */
		return "TRC_STREAM_PORT_WRITE_DATA returned error (!= 0).";
 800188c:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <prvTraceGetError+0xac>)
 800188e:	e000      	b.n	8001892 <prvTraceGetError+0x8a>
	}

	return NULL;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	08004ef0 	.word	0x08004ef0
 80018a4:	08004f24 	.word	0x08004f24
 80018a8:	08004f58 	.word	0x08004f58
 80018ac:	08004f8c 	.word	0x08004f8c
 80018b0:	08004fb4 	.word	0x08004fb4
 80018b4:	08004fe8 	.word	0x08004fe8
 80018b8:	0800501c 	.word	0x0800501c
 80018bc:	08005048 	.word	0x08005048
 80018c0:	0800507c 	.word	0x0800507c
 80018c4:	080050a8 	.word	0x080050a8
 80018c8:	080050d4 	.word	0x080050d4
 80018cc:	08005100 	.word	0x08005100
 80018d0:	08005130 	.word	0x08005130

080018d4 <prvTraceStoreEvent1>:
	TRACE_EXIT_CRITICAL_SECTION();
}

/* Store an event with one 32-bit parameter (pointer address or an int) */
void prvTraceStoreEvent1(uint16_t eventID, uint32_t param1)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08c      	sub	sp, #48	; 0x30
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	6039      	str	r1, [r7, #0]
 80018de:	80fb      	strh	r3, [r7, #6]
  	TRACE_ALLOC_CRITICAL_SECTION();

	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 80018e0:	88fb      	ldrh	r3, [r7, #6]
 80018e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018e6:	d303      	bcc.n	80018f0 <prvTraceStoreEvent1+0x1c>
 80018e8:	2001      	movs	r0, #1
 80018ea:	f000 fc0b 	bl	8002104 <prvTraceError>
 80018ee:	e03e      	b.n	800196e <prvTraceStoreEvent1+0x9a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80018f0:	f3ef 8310 	mrs	r3, PRIMASK
 80018f4:	623b      	str	r3, [r7, #32]
  return(result);
 80018f6:	6a3b      	ldr	r3, [r7, #32]

	TRACE_ENTER_CRITICAL_SECTION();
 80018f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018fa:	2301      	movs	r3, #1
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	f383 8810 	msr	PRIMASK, r3

	if (RecorderEnabled)
 8001904:	4b1b      	ldr	r3, [pc, #108]	; (8001974 <prvTraceStoreEvent1+0xa0>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d02b      	beq.n	8001964 <prvTraceStoreEvent1+0x90>
	{
		eventCounter++;
 800190c:	4b1a      	ldr	r3, [pc, #104]	; (8001978 <prvTraceStoreEvent1+0xa4>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	3301      	adds	r3, #1
 8001912:	4a19      	ldr	r2, [pc, #100]	; (8001978 <prvTraceStoreEvent1+0xa4>)
 8001914:	6013      	str	r3, [r2, #0]
		
		{
			TRC_STREAM_PORT_ALLOCATE_EVENT(EventWithParam_1, event, sizeof(EventWithParam_1));
 8001916:	f107 0310 	add.w	r3, r7, #16
 800191a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (event != NULL)
 800191c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800191e:	2b00      	cmp	r3, #0
 8001920:	d020      	beq.n	8001964 <prvTraceStoreEvent1+0x90>
			{
				event->base.EventID = eventID | PARAM_COUNT(1);
 8001922:	88fb      	ldrh	r3, [r7, #6]
 8001924:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001928:	b29a      	uxth	r2, r3
 800192a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800192c:	801a      	strh	r2, [r3, #0]
				event->base.EventCount = (uint16_t)eventCounter;
 800192e:	4b12      	ldr	r3, [pc, #72]	; (8001978 <prvTraceStoreEvent1+0xa4>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	b29a      	uxth	r2, r3
 8001934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001936:	805a      	strh	r2, [r3, #2]
				event->base.TS = prvGetTimestamp32();
 8001938:	f000 fc50 	bl	80021dc <prvGetTimestamp32>
 800193c:	4602      	mov	r2, r0
 800193e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001940:	605a      	str	r2, [r3, #4]
				event->param1 = (uint32_t)param1;
 8001942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	609a      	str	r2, [r3, #8]
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(EventWithParam_1));
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	f107 030c 	add.w	r3, r7, #12
 8001950:	461a      	mov	r2, r3
 8001952:	210c      	movs	r1, #12
 8001954:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001956:	f7ff fb1b 	bl	8000f90 <writeToRTT>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <prvTraceStoreEvent1+0x90>
 8001960:	f7ff fc95 	bl	800128e <vTraceStop>
 8001964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001966:	61fb      	str	r3, [r7, #28]
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f383 8810 	msr	PRIMASK, r3
			}
		}
	}
	TRACE_EXIT_CRITICAL_SECTION();
}
 800196e:	3730      	adds	r7, #48	; 0x30
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	200013c8 	.word	0x200013c8
 8001978:	200013cc 	.word	0x200013cc

0800197c <prvTraceStoreEvent2>:

/* Store an event with two 32-bit parameters */
void prvTraceStoreEvent2(uint16_t eventID, uint32_t param1, uint32_t param2)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b08e      	sub	sp, #56	; 0x38
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
 8001988:	81fb      	strh	r3, [r7, #14]
  	TRACE_ALLOC_CRITICAL_SECTION();

	PSF_ASSERT_VOID(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 800198a:	89fb      	ldrh	r3, [r7, #14]
 800198c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001990:	d303      	bcc.n	800199a <prvTraceStoreEvent2+0x1e>
 8001992:	2001      	movs	r0, #1
 8001994:	f000 fbb6 	bl	8002104 <prvTraceError>
 8001998:	e041      	b.n	8001a1e <prvTraceStoreEvent2+0xa2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800199a:	f3ef 8310 	mrs	r3, PRIMASK
 800199e:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80019a0:	6abb      	ldr	r3, [r7, #40]	; 0x28

	TRACE_ENTER_CRITICAL_SECTION();
 80019a2:	637b      	str	r3, [r7, #52]	; 0x34
 80019a4:	2301      	movs	r3, #1
 80019a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019aa:	f383 8810 	msr	PRIMASK, r3

	if (RecorderEnabled)
 80019ae:	4b1d      	ldr	r3, [pc, #116]	; (8001a24 <prvTraceStoreEvent2+0xa8>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d02e      	beq.n	8001a14 <prvTraceStoreEvent2+0x98>
	{
		eventCounter++;
 80019b6:	4b1c      	ldr	r3, [pc, #112]	; (8001a28 <prvTraceStoreEvent2+0xac>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	3301      	adds	r3, #1
 80019bc:	4a1a      	ldr	r2, [pc, #104]	; (8001a28 <prvTraceStoreEvent2+0xac>)
 80019be:	6013      	str	r3, [r2, #0]

		{
			TRC_STREAM_PORT_ALLOCATE_EVENT(EventWithParam_2, event, sizeof(EventWithParam_2));
 80019c0:	f107 0314 	add.w	r3, r7, #20
 80019c4:	633b      	str	r3, [r7, #48]	; 0x30
			if (event != NULL)
 80019c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d023      	beq.n	8001a14 <prvTraceStoreEvent2+0x98>
			{
				event->base.EventID = eventID | PARAM_COUNT(2);
 80019cc:	89fb      	ldrh	r3, [r7, #14]
 80019ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d6:	801a      	strh	r2, [r3, #0]
				event->base.EventCount = (uint16_t)eventCounter;
 80019d8:	4b13      	ldr	r3, [pc, #76]	; (8001a28 <prvTraceStoreEvent2+0xac>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	b29a      	uxth	r2, r3
 80019de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019e0:	805a      	strh	r2, [r3, #2]
				event->base.TS = prvGetTimestamp32();
 80019e2:	f000 fbfb 	bl	80021dc <prvGetTimestamp32>
 80019e6:	4602      	mov	r2, r0
 80019e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ea:	605a      	str	r2, [r3, #4]
				event->param1 = (uint32_t)param1;
 80019ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ee:	68ba      	ldr	r2, [r7, #8]
 80019f0:	609a      	str	r2, [r3, #8]
				event->param2 = param2;
 80019f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	60da      	str	r2, [r3, #12]
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(EventWithParam_2));
 80019f8:	2300      	movs	r3, #0
 80019fa:	613b      	str	r3, [r7, #16]
 80019fc:	f107 0310 	add.w	r3, r7, #16
 8001a00:	461a      	mov	r2, r3
 8001a02:	2110      	movs	r1, #16
 8001a04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001a06:	f7ff fac3 	bl	8000f90 <writeToRTT>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <prvTraceStoreEvent2+0x98>
 8001a10:	f7ff fc3d 	bl	800128e <vTraceStop>
 8001a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	f383 8810 	msr	PRIMASK, r3
			}
		}
	}
	TRACE_EXIT_CRITICAL_SECTION();
}
 8001a1e:	3738      	adds	r7, #56	; 0x38
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	200013c8 	.word	0x200013c8
 8001a28:	200013cc 	.word	0x200013cc

08001a2c <prvTraceStoreStringEvent>:
	TRACE_EXIT_CRITICAL_SECTION();
}

/* Stories an event with a string and <nParam> 32-bit integer parameters */
void prvTraceStoreStringEvent(int nArgs, uint16_t eventID, const char* str, ...)
{
 8001a2c:	b40c      	push	{r2, r3}
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b086      	sub	sp, #24
 8001a32:	af02      	add	r7, sp, #8
 8001a34:	6078      	str	r0, [r7, #4]
 8001a36:	460b      	mov	r3, r1
 8001a38:	807b      	strh	r3, [r7, #2]
	int len;
  	va_list vl;

	for (len = 0; (str[len] != 0) && (len < 52); len++); /* empty loop */
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	e002      	b.n	8001a46 <prvTraceStoreStringEvent+0x1a>
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	3301      	adds	r3, #1
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d002      	beq.n	8001a58 <prvTraceStoreStringEvent+0x2c>
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2b33      	cmp	r3, #51	; 0x33
 8001a56:	ddf3      	ble.n	8001a40 <prvTraceStoreStringEvent+0x14>

	va_start(vl, str);
 8001a58:	f107 031c 	add.w	r3, r7, #28
 8001a5c:	60bb      	str	r3, [r7, #8]
	prvTraceStoreStringEventHelper(nArgs, eventID, NULL, len, str, vl);
 8001a5e:	8879      	ldrh	r1, [r7, #2]
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	9301      	str	r3, [sp, #4]
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 f807 	bl	8001a80 <prvTraceStoreStringEventHelper>
	va_end(vl);
}
 8001a72:	bf00      	nop
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a7c:	b002      	add	sp, #8
 8001a7e:	4770      	bx	lr

08001a80 <prvTraceStoreStringEventHelper>:
										uint16_t eventID,
										traceString userEvtChannel,
										int len,
										const char* str,
										va_list vl)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b0a4      	sub	sp, #144	; 0x90
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	607a      	str	r2, [r7, #4]
 8001a8a:	603b      	str	r3, [r7, #0]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	817b      	strh	r3, [r7, #10]
  	int nWords;
	int nStrWords;
	int i;
	int offset = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  	TRACE_ALLOC_CRITICAL_SECTION();
	
	/* The string length in multiples of 32 bit words (+1 for null character) */
	nStrWords = (len+1+3)/4;
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	3304      	adds	r3, #4
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	da00      	bge.n	8001aa0 <prvTraceStoreStringEventHelper+0x20>
 8001a9e:	3303      	adds	r3, #3
 8001aa0:	109b      	asrs	r3, r3, #2
 8001aa2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

	offset = nArgs * 4;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	/* The total number of 32-bit words needed for the whole payload */
	nWords = nStrWords + nArgs;
 8001aae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	if (nWords > 15) /* if attempting to store more than 60 byte (= max) */
 8001aba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001abe:	2b0f      	cmp	r3, #15
 8001ac0:	dd14      	ble.n	8001aec <prvTraceStoreStringEventHelper+0x6c>
		/* Truncate event if too large. The	string characters are stored
		last, so usually only the string is truncated, unless there a lot
		of parameters... */

		/* Diagnostics ... */
		uint32_t bytesTruncated = (uint32_t)(nWords - 15) * 4;
 8001ac2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ac6:	3b0f      	subs	r3, #15
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	67fb      	str	r3, [r7, #124]	; 0x7c

		if (bytesTruncated > MaxBytesTruncated)
 8001acc:	4b5a      	ldr	r3, [pc, #360]	; (8001c38 <prvTraceStoreStringEventHelper+0x1b8>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d902      	bls.n	8001adc <prvTraceStoreStringEventHelper+0x5c>
		{
			MaxBytesTruncated = bytesTruncated;
 8001ad6:	4a58      	ldr	r2, [pc, #352]	; (8001c38 <prvTraceStoreStringEventHelper+0x1b8>)
 8001ad8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ada:	6013      	str	r3, [r2, #0]
		}

		nWords = 15;
 8001adc:	230f      	movs	r3, #15
 8001ade:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		len = 15 * 4 - offset;
 8001ae2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ae6:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8001aea:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001aec:	f3ef 8310 	mrs	r3, PRIMASK
 8001af0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8001af2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
	}

	TRACE_ENTER_CRITICAL_SECTION();
 8001af4:	67bb      	str	r3, [r7, #120]	; 0x78
 8001af6:	2301      	movs	r3, #1
 8001af8:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001afa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001afc:	f383 8810 	msr	PRIMASK, r3

	if (RecorderEnabled)
 8001b00:	4b4e      	ldr	r3, [pc, #312]	; (8001c3c <prvTraceStoreStringEventHelper+0x1bc>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f000 808e 	beq.w	8001c26 <prvTraceStoreStringEventHelper+0x1a6>
	{
		int eventSize = (int)sizeof(BaseEvent) + nWords * (int)sizeof(uint32_t);
 8001b0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b0e:	3302      	adds	r3, #2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	677b      	str	r3, [r7, #116]	; 0x74

		eventCounter++;
 8001b14:	4b4a      	ldr	r3, [pc, #296]	; (8001c40 <prvTraceStoreStringEventHelper+0x1c0>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	4a49      	ldr	r2, [pc, #292]	; (8001c40 <prvTraceStoreStringEventHelper+0x1c0>)
 8001b1c:	6013      	str	r3, [r2, #0]

		{
			TRC_STREAM_PORT_ALLOCATE_DYNAMIC_EVENT(largestEventType, event, eventSize);
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	673b      	str	r3, [r7, #112]	; 0x70
			if (event != NULL)
 8001b24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d07d      	beq.n	8001c26 <prvTraceStoreStringEventHelper+0x1a6>
			{
				uint32_t* data32;
				uint8_t* data8;
				event->base.EventID = (eventID) | (uint16_t)PARAM_COUNT(nWords);
 8001b2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	031b      	lsls	r3, r3, #12
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	897b      	ldrh	r3, [r7, #10]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b3c:	801a      	strh	r2, [r3, #0]
				event->base.EventCount = (uint16_t)eventCounter;
 8001b3e:	4b40      	ldr	r3, [pc, #256]	; (8001c40 <prvTraceStoreStringEventHelper+0x1c0>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b46:	805a      	strh	r2, [r3, #2]
				event->base.TS = prvGetTimestamp32();
 8001b48:	f000 fb48 	bl	80021dc <prvGetTimestamp32>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b50:	605a      	str	r2, [r3, #4]

				/* 32-bit write-pointer for the data argument */
				data32 = (uint32_t*) &(event->data[0]);
 8001b52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b54:	3308      	adds	r3, #8
 8001b56:	66fb      	str	r3, [r7, #108]	; 0x6c

				for (i = 0; i < nArgs; i++)
 8001b58:	2300      	movs	r3, #0
 8001b5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001b5e:	e01f      	b.n	8001ba0 <prvTraceStoreStringEventHelper+0x120>
				{
					if ((userEvtChannel != NULL) && (i == 0))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00b      	beq.n	8001b7e <prvTraceStoreStringEventHelper+0xfe>
 8001b66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d107      	bne.n	8001b7e <prvTraceStoreStringEventHelper+0xfe>
					{
						/* First, add the User Event Channel if not NULL */
						data32[i] = (uint32_t)userEvtChannel;
 8001b6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001b76:	4413      	add	r3, r2
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	e00b      	b.n	8001b96 <prvTraceStoreStringEventHelper+0x116>
					}
					else
					{
						/* Add data arguments... */
						data32[i] = va_arg(vl, uint32_t);
 8001b7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001b86:	441a      	add	r2, r3
 8001b88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b8c:	1d19      	adds	r1, r3, #4
 8001b8e:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6013      	str	r3, [r2, #0]
				for (i = 0; i < nArgs; i++)
 8001b96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001ba0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	dbda      	blt.n	8001b60 <prvTraceStoreStringEventHelper+0xe0>
					}
				}
				data8 = (uint8_t*)&(event->data[0]);
 8001baa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bac:	3308      	adds	r3, #8
 8001bae:	66bb      	str	r3, [r7, #104]	; 0x68
				for (i = 0; i < len; i++)
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001bb6:	e013      	b.n	8001be0 <prvTraceStoreStringEventHelper+0x160>
				{
					data8[offset + i] = str[i];
 8001bb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001bbc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001bc0:	441a      	add	r2, r3
 8001bc2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8001bc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001bca:	440b      	add	r3, r1
 8001bcc:	4619      	mov	r1, r3
 8001bce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bd0:	440b      	add	r3, r1
 8001bd2:	7812      	ldrb	r2, [r2, #0]
 8001bd4:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < len; i++)
 8001bd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001bda:	3301      	adds	r3, #1
 8001bdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001be0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	dbe6      	blt.n	8001bb8 <prvTraceStoreStringEventHelper+0x138>
				}

				if (len < (15 * 4 - offset))
 8001bea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bee:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	da08      	bge.n	8001c0a <prvTraceStoreStringEventHelper+0x18a>
					data8[offset + len] = 0;	/* Only truncate if we don't fill up the buffer completely */
 8001bf8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	4413      	add	r3, r2
 8001c00:	461a      	mov	r2, r3
 8001c02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c04:	4413      	add	r3, r2
 8001c06:	2200      	movs	r2, #0
 8001c08:	701a      	strb	r2, [r3, #0]
				TRC_STREAM_PORT_COMMIT_EVENT(event, (uint32_t)eventSize);
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8001c0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c10:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001c14:	4619      	mov	r1, r3
 8001c16:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001c18:	f7ff f9ba 	bl	8000f90 <writeToRTT>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <prvTraceStoreStringEventHelper+0x1a6>
 8001c22:	f7ff fb34 	bl	800128e <vTraceStop>
 8001c26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c2c:	f383 8810 	msr	PRIMASK, r3
			}
		}
	}
	
	TRACE_EXIT_CRITICAL_SECTION();
}
 8001c30:	bf00      	nop
 8001c32:	3790      	adds	r7, #144	; 0x90
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	200013e4 	.word	0x200013e4
 8001c3c:	200013c8 	.word	0x200013c8
 8001c40:	200013cc 	.word	0x200013cc

08001c44 <prvTraceStoreSimpleStringEventHelper>:

/* Internal common function for storing string events without additional arguments */
void prvTraceStoreSimpleStringEventHelper(uint16_t eventID,
													traceString userEvtChannel,
													const char* str)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b0a6      	sub	sp, #152	; 0x98
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
 8001c50:	81fb      	strh	r3, [r7, #14]
	int len;
  	int nWords;
	int nStrWords;
	int i;
	int nArgs = 0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	int offset = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  	TRACE_ALLOC_CRITICAL_SECTION();

	for (len = 0; (str[len] != 0) && (len < 52); len++); /* empty loop */
 8001c5e:	2300      	movs	r3, #0
 8001c60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001c64:	e004      	b.n	8001c70 <prvTraceStoreSimpleStringEventHelper+0x2c>
 8001c66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001c70:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	4413      	add	r3, r2
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <prvTraceStoreSimpleStringEventHelper+0x42>
 8001c7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001c82:	2b33      	cmp	r3, #51	; 0x33
 8001c84:	ddef      	ble.n	8001c66 <prvTraceStoreSimpleStringEventHelper+0x22>
	
	/* The string length in multiples of 32 bit words (+1 for null character) */
	nStrWords = (len+1+3)/4;
 8001c86:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001c8a:	3304      	adds	r3, #4
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	da00      	bge.n	8001c92 <prvTraceStoreSimpleStringEventHelper+0x4e>
 8001c90:	3303      	adds	r3, #3
 8001c92:	109b      	asrs	r3, r3, #2
 8001c94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

	/* If a user event channel is specified, add in the list */
	if (userEvtChannel)
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d007      	beq.n	8001cae <prvTraceStoreSimpleStringEventHelper+0x6a>
	{
		nArgs++;
 8001c9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		eventID++;
 8001ca8:	89fb      	ldrh	r3, [r7, #14]
 8001caa:	3301      	adds	r3, #1
 8001cac:	81fb      	strh	r3, [r7, #14]
	}

	offset = nArgs * 4;
 8001cae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	/* The total number of 32-bit words needed for the whole payload */
	nWords = nStrWords + nArgs;
 8001cb8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001cbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cc0:	4413      	add	r3, r2
 8001cc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	if (nWords > 15) /* if attempting to store more than 60 byte (= max) */
 8001cc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001cca:	2b0f      	cmp	r3, #15
 8001ccc:	dd15      	ble.n	8001cfa <prvTraceStoreSimpleStringEventHelper+0xb6>
		/* Truncate event if too large. The	string characters are stored
		last, so usually only the string is truncated, unless there a lot
		of parameters... */

		/* Diagnostics ... */
		uint32_t bytesTruncated = (uint32_t)(nWords - 15) * 4;
 8001cce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001cd2:	3b0f      	subs	r3, #15
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	67fb      	str	r3, [r7, #124]	; 0x7c

		if (bytesTruncated > MaxBytesTruncated)
 8001cd8:	4b4a      	ldr	r3, [pc, #296]	; (8001e04 <prvTraceStoreSimpleStringEventHelper+0x1c0>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d902      	bls.n	8001ce8 <prvTraceStoreSimpleStringEventHelper+0xa4>
		{
			MaxBytesTruncated = bytesTruncated;
 8001ce2:	4a48      	ldr	r2, [pc, #288]	; (8001e04 <prvTraceStoreSimpleStringEventHelper+0x1c0>)
 8001ce4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ce6:	6013      	str	r3, [r2, #0]
		}

		nWords = 15;
 8001ce8:	230f      	movs	r3, #15
 8001cea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		len = 15 * 4 - offset;
 8001cee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001cf2:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8001cf6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001cfa:	f3ef 8310 	mrs	r3, PRIMASK
 8001cfe:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8001d00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
	}

	TRACE_ENTER_CRITICAL_SECTION();
 8001d02:	67bb      	str	r3, [r7, #120]	; 0x78
 8001d04:	2301      	movs	r3, #1
 8001d06:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d0a:	f383 8810 	msr	PRIMASK, r3

	if (RecorderEnabled)
 8001d0e:	4b3e      	ldr	r3, [pc, #248]	; (8001e08 <prvTraceStoreSimpleStringEventHelper+0x1c4>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d06c      	beq.n	8001df0 <prvTraceStoreSimpleStringEventHelper+0x1ac>
	{
		int eventSize = (int)sizeof(BaseEvent) + nWords * (int)sizeof(uint32_t);
 8001d16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d1a:	3302      	adds	r3, #2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	677b      	str	r3, [r7, #116]	; 0x74

		eventCounter++;
 8001d20:	4b3a      	ldr	r3, [pc, #232]	; (8001e0c <prvTraceStoreSimpleStringEventHelper+0x1c8>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	3301      	adds	r3, #1
 8001d26:	4a39      	ldr	r2, [pc, #228]	; (8001e0c <prvTraceStoreSimpleStringEventHelper+0x1c8>)
 8001d28:	6013      	str	r3, [r2, #0]

		{
			TRC_STREAM_PORT_ALLOCATE_DYNAMIC_EVENT(largestEventType, event, eventSize);
 8001d2a:	f107 0314 	add.w	r3, r7, #20
 8001d2e:	673b      	str	r3, [r7, #112]	; 0x70
			if (event != NULL)
 8001d30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d05c      	beq.n	8001df0 <prvTraceStoreSimpleStringEventHelper+0x1ac>
			{
				uint32_t* data32;
				uint8_t* data8;
				event->base.EventID = (eventID) | (uint16_t)PARAM_COUNT(nWords);
 8001d36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	031b      	lsls	r3, r3, #12
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	89fb      	ldrh	r3, [r7, #14]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d48:	801a      	strh	r2, [r3, #0]
				event->base.EventCount = (uint16_t)eventCounter;
 8001d4a:	4b30      	ldr	r3, [pc, #192]	; (8001e0c <prvTraceStoreSimpleStringEventHelper+0x1c8>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d52:	805a      	strh	r2, [r3, #2]
				event->base.TS = prvGetTimestamp32();
 8001d54:	f000 fa42 	bl	80021dc <prvGetTimestamp32>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d5c:	605a      	str	r2, [r3, #4]

				/* 32-bit write-pointer for the data argument */
				data32 = (uint32_t*) &(event->data[0]);
 8001d5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d60:	3308      	adds	r3, #8
 8001d62:	66fb      	str	r3, [r7, #108]	; 0x6c

				if (userEvtChannel != NULL)
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d002      	beq.n	8001d70 <prvTraceStoreSimpleStringEventHelper+0x12c>
				{
					/* First, add the User Event Channel if not NULL */
					data32[0] = (uint32_t)userEvtChannel;
 8001d6a:	68ba      	ldr	r2, [r7, #8]
 8001d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d6e:	601a      	str	r2, [r3, #0]
				}

				data8 = (uint8_t*) &(event->data[0]);
 8001d70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d72:	3308      	adds	r3, #8
 8001d74:	66bb      	str	r3, [r7, #104]	; 0x68
				for (i = 0; i < len; i++)
 8001d76:	2300      	movs	r3, #0
 8001d78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001d7c:	e012      	b.n	8001da4 <prvTraceStoreSimpleStringEventHelper+0x160>
				{
					data8[offset + i] = str[i];
 8001d7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	441a      	add	r2, r3
 8001d86:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8001d8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d8e:	440b      	add	r3, r1
 8001d90:	4619      	mov	r1, r3
 8001d92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d94:	440b      	add	r3, r1
 8001d96:	7812      	ldrb	r2, [r2, #0]
 8001d98:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < len; i++)
 8001d9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d9e:	3301      	adds	r3, #1
 8001da0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001da4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001da8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001dac:	429a      	cmp	r2, r3
 8001dae:	dbe6      	blt.n	8001d7e <prvTraceStoreSimpleStringEventHelper+0x13a>
				}

				if (len < (15 * 4 - offset))
 8001db0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001db4:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8001db8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	da09      	bge.n	8001dd4 <prvTraceStoreSimpleStringEventHelper+0x190>
					data8[offset + len] = 0;	/* Only truncate if we don't fill up the buffer completely */
 8001dc0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001dc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001dc8:	4413      	add	r3, r2
 8001dca:	461a      	mov	r2, r3
 8001dcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dce:	4413      	add	r3, r2
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	701a      	strb	r2, [r3, #0]
				TRC_STREAM_PORT_COMMIT_EVENT(event, (uint32_t)eventSize);
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	65bb      	str	r3, [r7, #88]	; 0x58
 8001dd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dda:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001dde:	4619      	mov	r1, r3
 8001de0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001de2:	f7ff f8d5 	bl	8000f90 <writeToRTT>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <prvTraceStoreSimpleStringEventHelper+0x1ac>
 8001dec:	f7ff fa4f 	bl	800128e <vTraceStop>
 8001df0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001df2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001df4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001df6:	f383 8810 	msr	PRIMASK, r3
			}
		}
	}
	
	TRACE_EXIT_CRITICAL_SECTION();
}
 8001dfa:	bf00      	nop
 8001dfc:	3798      	adds	r7, #152	; 0x98
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	200013e4 	.word	0x200013e4
 8001e08:	200013c8 	.word	0x200013c8
 8001e0c:	200013cc 	.word	0x200013cc

08001e10 <prvTraceSaveSymbol>:

/* Saves a symbol name in the symbol table and returns the slot address */
void* prvTraceSaveSymbol(const char *name)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b088      	sub	sp, #32
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
	void* retVal = 0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e1c:	f3ef 8310 	mrs	r3, PRIMASK
 8001e20:	613b      	str	r3, [r7, #16]
  return(result);
 8001e22:	693b      	ldr	r3, [r7, #16]
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
 8001e24:	61bb      	str	r3, [r7, #24]
 8001e26:	2301      	movs	r3, #1
 8001e28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	f383 8810 	msr	PRIMASK, r3
	if (firstFreeSymbolTableIndex < SYMBOL_TABLE_BUFFER_SIZE)
 8001e30:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <prvTraceSaveSymbol+0x50>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001e38:	d208      	bcs.n	8001e4c <prvTraceSaveSymbol+0x3c>
	{
		/* The address to the available symbol table slot is the address we use */
		retVal = &symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT8[firstFreeSymbolTableIndex];
 8001e3a:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <prvTraceSaveSymbol+0x50>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a09      	ldr	r2, [pc, #36]	; (8001e64 <prvTraceSaveSymbol+0x54>)
 8001e40:	4413      	add	r3, r2
 8001e42:	61fb      	str	r3, [r7, #28]
		prvTraceSaveObjectSymbol(retVal, name);
 8001e44:	6879      	ldr	r1, [r7, #4]
 8001e46:	69f8      	ldr	r0, [r7, #28]
 8001e48:	f000 f80e 	bl	8001e68 <prvTraceSaveObjectSymbol>
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f383 8810 	msr	PRIMASK, r3
	}
	TRACE_EXIT_CRITICAL_SECTION();
	
	return retVal;
 8001e56:	69fb      	ldr	r3, [r7, #28]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3720      	adds	r7, #32
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	20001278 	.word	0x20001278
 8001e64:	20000d78 	.word	0x20000d78

08001e68 <prvTraceSaveObjectSymbol>:

/* Saves a string in the symbol table for an object (task name etc.) */
void prvTraceSaveObjectSymbol(void* address, const char *name)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b089      	sub	sp, #36	; 0x24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e72:	f3ef 8310 	mrs	r3, PRIMASK
 8001e76:	60fb      	str	r3, [r7, #12]
  return(result);
 8001e78:	68fb      	ldr	r3, [r7, #12]
	uint32_t i;
	uint8_t *ptrSymbol;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
 8001e7a:	61bb      	str	r3, [r7, #24]
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	f383 8810 	msr	PRIMASK, r3

	/* We do not look for previous entries -> changing a registered string is no longer possible */
	if (firstFreeSymbolTableIndex < SYMBOL_TABLE_BUFFER_SIZE)
 8001e86:	4b2b      	ldr	r3, [pc, #172]	; (8001f34 <prvTraceSaveObjectSymbol+0xcc>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001e8e:	d240      	bcs.n	8001f12 <prvTraceSaveObjectSymbol+0xaa>
	{
		/* We access the symbol table via the union member pSymbolTableBufferUINT32 to avoid strict-aliasing issues */
		symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT32[firstFreeSymbolTableIndex / sizeof(uint32_t)] = (uint32_t)address;
 8001e90:	4b28      	ldr	r3, [pc, #160]	; (8001f34 <prvTraceSaveObjectSymbol+0xcc>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	089b      	lsrs	r3, r3, #2
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	4927      	ldr	r1, [pc, #156]	; (8001f38 <prvTraceSaveObjectSymbol+0xd0>)
 8001e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		
		/* We access the symbol table via the union member pSymbolTableBufferUINT8 to avoid strict-aliasing issues */
		ptrSymbol = &symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT8[firstFreeSymbolTableIndex + sizeof(uint32_t)];
 8001e9e:	4b25      	ldr	r3, [pc, #148]	; (8001f34 <prvTraceSaveObjectSymbol+0xcc>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	3304      	adds	r3, #4
 8001ea4:	4a24      	ldr	r2, [pc, #144]	; (8001f38 <prvTraceSaveObjectSymbol+0xd0>)
 8001ea6:	4413      	add	r3, r2
 8001ea8:	617b      	str	r3, [r7, #20]
		for (i = 0; i < (TRC_CFG_SYMBOL_MAX_LENGTH); i++)
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
 8001eae:	e010      	b.n	8001ed2 <prvTraceSaveObjectSymbol+0x6a>
		{
			ptrSymbol[i] = (uint8_t)name[i];	/* We do this first to ensure we also get the 0 termination, if there is one */
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	441a      	add	r2, r3
 8001eb6:	6979      	ldr	r1, [r7, #20]
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	440b      	add	r3, r1
 8001ebc:	7812      	ldrb	r2, [r2, #0]
 8001ebe:	701a      	strb	r2, [r3, #0]

			if (name[i] == 0)
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d006      	beq.n	8001eda <prvTraceSaveObjectSymbol+0x72>
		for (i = 0; i < (TRC_CFG_SYMBOL_MAX_LENGTH); i++)
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	61fb      	str	r3, [r7, #28]
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	2b18      	cmp	r3, #24
 8001ed6:	d9eb      	bls.n	8001eb0 <prvTraceSaveObjectSymbol+0x48>
 8001ed8:	e004      	b.n	8001ee4 <prvTraceSaveObjectSymbol+0x7c>
			break;
 8001eda:	bf00      	nop
		}

		/* Check the length of "name", if longer than SYMBOL_MAX_LENGTH */
		while ((name[i] != 0) && i < 128)
 8001edc:	e002      	b.n	8001ee4 <prvTraceSaveObjectSymbol+0x7c>
		{
			i++;
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	61fb      	str	r3, [r7, #28]
		while ((name[i] != 0) && i < 128)
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	4413      	add	r3, r2
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d002      	beq.n	8001ef6 <prvTraceSaveObjectSymbol+0x8e>
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	2b7f      	cmp	r3, #127	; 0x7f
 8001ef4:	d9f3      	bls.n	8001ede <prvTraceSaveObjectSymbol+0x76>
		}

		/* Remember the longest symbol name, for diagnostic purposes */
		if (i > LongestSymbolName)
 8001ef6:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <prvTraceSaveObjectSymbol+0xd4>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	69fa      	ldr	r2, [r7, #28]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d902      	bls.n	8001f06 <prvTraceSaveObjectSymbol+0x9e>
		{
			LongestSymbolName = i;
 8001f00:	4a0e      	ldr	r2, [pc, #56]	; (8001f3c <prvTraceSaveObjectSymbol+0xd4>)
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	6013      	str	r3, [r2, #0]
		}

		firstFreeSymbolTableIndex += SYMBOL_TABLE_SLOT_SIZE;
 8001f06:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <prvTraceSaveObjectSymbol+0xcc>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	3320      	adds	r3, #32
 8001f0c:	4a09      	ldr	r2, [pc, #36]	; (8001f34 <prvTraceSaveObjectSymbol+0xcc>)
 8001f0e:	6013      	str	r3, [r2, #0]
 8001f10:	e004      	b.n	8001f1c <prvTraceSaveObjectSymbol+0xb4>
	}
	else
	{
		NoRoomForSymbol++;
 8001f12:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <prvTraceSaveObjectSymbol+0xd8>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	3301      	adds	r3, #1
 8001f18:	4a09      	ldr	r2, [pc, #36]	; (8001f40 <prvTraceSaveObjectSymbol+0xd8>)
 8001f1a:	6013      	str	r3, [r2, #0]
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	60bb      	str	r3, [r7, #8]
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	f383 8810 	msr	PRIMASK, r3
	}

	TRACE_EXIT_CRITICAL_SECTION();
}
 8001f26:	bf00      	nop
 8001f28:	3724      	adds	r7, #36	; 0x24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	20001278 	.word	0x20001278
 8001f38:	20000d78 	.word	0x20000d78
 8001f3c:	200013e0 	.word	0x200013e0
 8001f40:	200013d8 	.word	0x200013d8

08001f44 <prvTraceSaveObjectData>:
	TRACE_EXIT_CRITICAL_SECTION();
}

/* Saves an object data entry (current task priority) in object data table */
void prvTraceSaveObjectData(const void *address, uint32_t data)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b08b      	sub	sp, #44	; 0x2c
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f4e:	f3ef 8310 	mrs	r3, PRIMASK
 8001f52:	613b      	str	r3, [r7, #16]
  return(result);
 8001f54:	693b      	ldr	r3, [r7, #16]
	uint32_t i;
	uint32_t foundSlot;
	uint32_t *ptr;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
 8001f56:	61fb      	str	r3, [r7, #28]
 8001f58:	2301      	movs	r3, #1
 8001f5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	f383 8810 	msr	PRIMASK, r3
	
	foundSlot = firstFreeObjectDataTableIndex;
 8001f62:	4b24      	ldr	r3, [pc, #144]	; (8001ff4 <prvTraceSaveObjectData+0xb0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	623b      	str	r3, [r7, #32]

	/* First look for previous entries using this address */
	for (i = 0; i < firstFreeObjectDataTableIndex; i += OBJECT_DATA_SLOT_SIZE)
 8001f68:	2300      	movs	r3, #0
 8001f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f6c:	e010      	b.n	8001f90 <prvTraceSaveObjectData+0x4c>
	{
		/* We access the data table via the union member pObjectDataTableBufferUINT32 to avoid strict-aliasing issues */
		ptr = &objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[i / sizeof(uint32_t)];
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	089b      	lsrs	r3, r3, #2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4a20      	ldr	r2, [pc, #128]	; (8001ff8 <prvTraceSaveObjectData+0xb4>)
 8001f76:	4413      	add	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
		if (*ptr == (uint32_t)address)
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d102      	bne.n	8001f8a <prvTraceSaveObjectData+0x46>
		{
			foundSlot = i;
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	623b      	str	r3, [r7, #32]
			break;
 8001f88:	e007      	b.n	8001f9a <prvTraceSaveObjectData+0x56>
	for (i = 0; i < firstFreeObjectDataTableIndex; i += OBJECT_DATA_SLOT_SIZE)
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	3308      	adds	r3, #8
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f90:	4b18      	ldr	r3, [pc, #96]	; (8001ff4 <prvTraceSaveObjectData+0xb0>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d3e9      	bcc.n	8001f6e <prvTraceSaveObjectData+0x2a>
		}
	}

	if (foundSlot < OBJECT_DATA_TABLE_BUFFER_SIZE)
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
 8001f9c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001fa0:	d217      	bcs.n	8001fd2 <prvTraceSaveObjectData+0x8e>
	{
		/* We access the data table via the union member pObjectDataTableBufferUINT32 to avoid strict-aliasing issues */
		objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[foundSlot / sizeof(uint32_t)] = (uint32_t)address;
 8001fa2:	6a3b      	ldr	r3, [r7, #32]
 8001fa4:	089b      	lsrs	r3, r3, #2
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	4913      	ldr	r1, [pc, #76]	; (8001ff8 <prvTraceSaveObjectData+0xb4>)
 8001faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[foundSlot / sizeof(uint32_t) + 1] = data;
 8001fae:	6a3b      	ldr	r3, [r7, #32]
 8001fb0:	089b      	lsrs	r3, r3, #2
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	4910      	ldr	r1, [pc, #64]	; (8001ff8 <prvTraceSaveObjectData+0xb4>)
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		/* Is this the last entry in the object data table? */
		if (foundSlot == firstFreeObjectDataTableIndex)
 8001fbc:	4b0d      	ldr	r3, [pc, #52]	; (8001ff4 <prvTraceSaveObjectData+0xb0>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6a3a      	ldr	r2, [r7, #32]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d10a      	bne.n	8001fdc <prvTraceSaveObjectData+0x98>
		{
			firstFreeObjectDataTableIndex += OBJECT_DATA_SLOT_SIZE;
 8001fc6:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <prvTraceSaveObjectData+0xb0>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	3308      	adds	r3, #8
 8001fcc:	4a09      	ldr	r2, [pc, #36]	; (8001ff4 <prvTraceSaveObjectData+0xb0>)
 8001fce:	6013      	str	r3, [r2, #0]
 8001fd0:	e004      	b.n	8001fdc <prvTraceSaveObjectData+0x98>
		}
	}
	else
	{
		NoRoomForObjectData++;
 8001fd2:	4b0a      	ldr	r3, [pc, #40]	; (8001ffc <prvTraceSaveObjectData+0xb8>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	4a08      	ldr	r2, [pc, #32]	; (8001ffc <prvTraceSaveObjectData+0xb8>)
 8001fda:	6013      	str	r3, [r2, #0]
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f383 8810 	msr	PRIMASK, r3
	}

	TRACE_EXIT_CRITICAL_SECTION();
}
 8001fe6:	bf00      	nop
 8001fe8:	372c      	adds	r7, #44	; 0x2c
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	200013bc 	.word	0x200013bc
 8001ff8:	2000127c 	.word	0x2000127c
 8001ffc:	200013dc 	.word	0x200013dc

08002000 <prvIsValidCommand>:
	TRACE_EXIT_CRITICAL_SECTION();
}

/* Checks if the provided command is a valid command */
int prvIsValidCommand(TracealyzerCommandType* cmd)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  	uint16_t checksum = (uint16_t)(0xFFFF - (	cmd->cmdCode +
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	b29a      	uxth	r2, r3
												cmd->param1 +
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	785b      	ldrb	r3, [r3, #1]
 8002012:	b29b      	uxth	r3, r3
  	uint16_t checksum = (uint16_t)(0xFFFF - (	cmd->cmdCode +
 8002014:	4413      	add	r3, r2
 8002016:	b29a      	uxth	r2, r3
												cmd->param2 +
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	789b      	ldrb	r3, [r3, #2]
 800201c:	b29b      	uxth	r3, r3
												cmd->param1 +
 800201e:	4413      	add	r3, r2
 8002020:	b29a      	uxth	r2, r3
												cmd->param3 +
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	78db      	ldrb	r3, [r3, #3]
 8002026:	b29b      	uxth	r3, r3
												cmd->param2 +
 8002028:	4413      	add	r3, r2
 800202a:	b29a      	uxth	r2, r3
												cmd->param4 +
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	791b      	ldrb	r3, [r3, #4]
 8002030:	b29b      	uxth	r3, r3
												cmd->param3 +
 8002032:	4413      	add	r3, r2
 8002034:	b29a      	uxth	r2, r3
												cmd->param5));
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	795b      	ldrb	r3, [r3, #5]
 800203a:	b29b      	uxth	r3, r3
												cmd->param4 +
 800203c:	4413      	add	r3, r2
 800203e:	b29b      	uxth	r3, r3
  	uint16_t checksum = (uint16_t)(0xFFFF - (	cmd->cmdCode +
 8002040:	43db      	mvns	r3, r3
 8002042:	81fb      	strh	r3, [r7, #14]

	if (cmd->checksumMSB != (unsigned char)(checksum >> 8))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	79da      	ldrb	r2, [r3, #7]
 8002048:	89fb      	ldrh	r3, [r7, #14]
 800204a:	0a1b      	lsrs	r3, r3, #8
 800204c:	b29b      	uxth	r3, r3
 800204e:	b2db      	uxtb	r3, r3
 8002050:	429a      	cmp	r2, r3
 8002052:	d001      	beq.n	8002058 <prvIsValidCommand+0x58>
		return 0;
 8002054:	2300      	movs	r3, #0
 8002056:	e00e      	b.n	8002076 <prvIsValidCommand+0x76>

	if (cmd->checksumLSB != (unsigned char)(checksum & 0xFF))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	799a      	ldrb	r2, [r3, #6]
 800205c:	89fb      	ldrh	r3, [r7, #14]
 800205e:	b2db      	uxtb	r3, r3
 8002060:	429a      	cmp	r2, r3
 8002062:	d001      	beq.n	8002068 <prvIsValidCommand+0x68>
		return 0;
 8002064:	2300      	movs	r3, #0
 8002066:	e006      	b.n	8002076 <prvIsValidCommand+0x76>

	if (cmd->cmdCode > CMD_LAST_COMMAND)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d901      	bls.n	8002074 <prvIsValidCommand+0x74>
		return 0;
 8002070:	2300      	movs	r3, #0
 8002072:	e000      	b.n	8002076 <prvIsValidCommand+0x76>

	return 1;
 8002074:	2301      	movs	r3, #1
}
 8002076:	4618      	mov	r0, r3
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <prvProcessCommand>:

/* Executed the received command (Start or Stop) */
void prvProcessCommand(TracealyzerCommandType* cmd)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  	switch(cmd->cmdCode)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d000      	beq.n	8002094 <prvProcessCommand+0x12>
	{
		case CMD_SET_ACTIVE:
		  	prvSetRecorderEnabled(cmd->param1);
		  	break;
		default:
		  	break;
 8002092:	e005      	b.n	80020a0 <prvProcessCommand+0x1e>
		  	prvSetRecorderEnabled(cmd->param1);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	785b      	ldrb	r3, [r3, #1]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff f90b 	bl	80012b4 <prvSetRecorderEnabled>
		  	break;
 800209e:	bf00      	nop
	}
}
 80020a0:	bf00      	nop
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <prvTraceWarning>:

/* Called on warnings, when the recording can continue. */
void prvTraceWarning(int errCode)
{
 80020a8:	b590      	push	{r4, r7, lr}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
	if (GET_ERROR_WARNING_FLAG(errCode) == 0)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	2201      	movs	r2, #1
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	461a      	mov	r2, r3
 80020bc:	4b0f      	ldr	r3, [pc, #60]	; (80020fc <prvTraceWarning+0x54>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4013      	ands	r3, r2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d115      	bne.n	80020f2 <prvTraceWarning+0x4a>
	{
		/* Will never reach this point more than once per warning type, since we verify if ErrorAndWarningFlags[errCode] has already been set */
		SET_ERROR_WARNING_FLAG(errCode);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	3b01      	subs	r3, #1
 80020ca:	2201      	movs	r2, #1
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	461a      	mov	r2, r3
 80020d2:	4b0a      	ldr	r3, [pc, #40]	; (80020fc <prvTraceWarning+0x54>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	4a08      	ldr	r2, [pc, #32]	; (80020fc <prvTraceWarning+0x54>)
 80020da:	6013      	str	r3, [r2, #0]

		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errCode));
 80020dc:	4b08      	ldr	r3, [pc, #32]	; (8002100 <prvTraceWarning+0x58>)
 80020de:	681c      	ldr	r4, [r3, #0]
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f7ff fb91 	bl	8001808 <prvTraceGetError>
 80020e6:	4603      	mov	r3, r0
 80020e8:	461a      	mov	r2, r3
 80020ea:	4621      	mov	r1, r4
 80020ec:	2090      	movs	r0, #144	; 0x90
 80020ee:	f7ff fda9 	bl	8001c44 <prvTraceStoreSimpleStringEventHelper>
	}
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd90      	pop	{r4, r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000d74 	.word	0x20000d74
 8002100:	200065b0 	.word	0x200065b0

08002104 <prvTraceError>:

/* Called on critical errors in the recorder. Stops the recorder! */
void prvTraceError(int errCode)
{
 8002104:	b590      	push	{r4, r7, lr}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
	if (errorCode == PSF_ERROR_NONE)
 800210c:	4b16      	ldr	r3, [pc, #88]	; (8002168 <prvTraceError+0x64>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d125      	bne.n	8002160 <prvTraceError+0x5c>
	{
		/* Will never reach this point more than once, since we verify if errorCode has already been set */
		errorCode = errCode;
 8002114:	4a14      	ldr	r2, [pc, #80]	; (8002168 <prvTraceError+0x64>)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6013      	str	r3, [r2, #0]
		SET_ERROR_WARNING_FLAG(errorCode);
 800211a:	4b13      	ldr	r3, [pc, #76]	; (8002168 <prvTraceError+0x64>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	3b01      	subs	r3, #1
 8002120:	2201      	movs	r2, #1
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	461a      	mov	r2, r3
 8002128:	4b10      	ldr	r3, [pc, #64]	; (800216c <prvTraceError+0x68>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4313      	orrs	r3, r2
 800212e:	4a0f      	ldr	r2, [pc, #60]	; (800216c <prvTraceError+0x68>)
 8002130:	6013      	str	r3, [r2, #0]

		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, prvTraceGetError(errorCode));
 8002132:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <prvTraceError+0x6c>)
 8002134:	681c      	ldr	r4, [r3, #0]
 8002136:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <prvTraceError+0x64>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff fb64 	bl	8001808 <prvTraceGetError>
 8002140:	4603      	mov	r3, r0
 8002142:	461a      	mov	r2, r3
 8002144:	4621      	mov	r1, r4
 8002146:	2090      	movs	r0, #144	; 0x90
 8002148:	f7ff fd7c 	bl	8001c44 <prvTraceStoreSimpleStringEventHelper>
		prvTraceStoreSimpleStringEventHelper(PSF_EVENT_USER_EVENT, trcWarningChannel, "Recorder stopped in prvTraceError()");
 800214c:	4b08      	ldr	r3, [pc, #32]	; (8002170 <prvTraceError+0x6c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a08      	ldr	r2, [pc, #32]	; (8002174 <prvTraceError+0x70>)
 8002152:	4619      	mov	r1, r3
 8002154:	2090      	movs	r0, #144	; 0x90
 8002156:	f7ff fd75 	bl	8001c44 <prvTraceStoreSimpleStringEventHelper>

		prvSetRecorderEnabled(0);
 800215a:	2000      	movs	r0, #0
 800215c:	f7ff f8aa 	bl	80012b4 <prvSetRecorderEnabled>
	}
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	bd90      	pop	{r4, r7, pc}
 8002168:	200013c0 	.word	0x200013c0
 800216c:	20000d74 	.word	0x20000d74
 8002170:	200065b0 	.word	0x200065b0
 8002174:	08005160 	.word	0x08005160

08002178 <prvTraceInitCortexM>:
/* If using DWT timestamping (default on ARM Cortex-M3, M4 and M7), make sure the DWT unit is initialized. */
#ifndef TRC_CFG_ARM_CM_USE_SYSTICK
#if ((TRC_CFG_HARDWARE_PORT == TRC_HARDWARE_PORT_ARM_Cortex_M) && (defined (__CORTEX_M) && (__CORTEX_M >= 0x03)))

void prvTraceInitCortexM()
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
	/* Make sure the DWT registers are unlocked, in case the debugger doesn't do this. */
	TRC_REG_ITM_LOCKACCESS = TRC_ITM_LOCKACCESS_UNLOCK;
 800217c:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <prvTraceInitCortexM+0x50>)
 800217e:	4a13      	ldr	r2, [pc, #76]	; (80021cc <prvTraceInitCortexM+0x54>)
 8002180:	601a      	str	r2, [r3, #0]

	/* Make sure DWT is enabled is enabled, if supported */
	TRC_REG_DEMCR |= TRC_DEMCR_TRCENA;
 8002182:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <prvTraceInitCortexM+0x58>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a12      	ldr	r2, [pc, #72]	; (80021d0 <prvTraceInitCortexM+0x58>)
 8002188:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800218c:	6013      	str	r3, [r2, #0]

	do
	{
		/* Verify that DWT is supported */
		if (TRC_REG_DEMCR == 0)
 800218e:	4b10      	ldr	r3, [pc, #64]	; (80021d0 <prvTraceInitCortexM+0x58>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d103      	bne.n	800219e <prvTraceInitCortexM+0x26>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/
			
			prvTraceError(PSF_ERROR_DWT_NOT_SUPPORTED);
 8002196:	2003      	movs	r0, #3
 8002198:	f7ff ffb4 	bl	8002104 <prvTraceError>
			break;
 800219c:	e012      	b.n	80021c4 <prvTraceInitCortexM+0x4c>
		}

		/* Verify that DWT_CYCCNT is supported */
		if (TRC_REG_DWT_CTRL & TRC_DWT_CTRL_NOCYCCNT)
 800219e:	4b0d      	ldr	r3, [pc, #52]	; (80021d4 <prvTraceInitCortexM+0x5c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <prvTraceInitCortexM+0x3a>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/

			prvTraceError(PSF_ERROR_DWT_CYCCNT_NOT_SUPPORTED);
 80021aa:	2004      	movs	r0, #4
 80021ac:	f7ff ffaa 	bl	8002104 <prvTraceError>
			break;
 80021b0:	e008      	b.n	80021c4 <prvTraceInitCortexM+0x4c>
		}

		/* Reset the cycle counter */
		TRC_REG_DWT_CYCCNT = 0;
 80021b2:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <prvTraceInitCortexM+0x60>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]

		/* Enable the cycle counter */
		TRC_REG_DWT_CTRL |= TRC_DWT_CTRL_CYCCNTENA;
 80021b8:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <prvTraceInitCortexM+0x5c>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a05      	ldr	r2, [pc, #20]	; (80021d4 <prvTraceInitCortexM+0x5c>)
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	6013      	str	r3, [r2, #0]

	} while(0);	/* breaks above jump here */
}
 80021c4:	bf00      	nop
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	e0001fb0 	.word	0xe0001fb0
 80021cc:	c5acce55 	.word	0xc5acce55
 80021d0:	e000edfc 	.word	0xe000edfc
 80021d4:	e0001000 	.word	0xe0001000
 80021d8:	e0001004 	.word	0xe0001004

080021dc <prvGetTimestamp32>:
#endif
#endif

/* Performs timestamping using definitions in trcHardwarePort.h */
static uint32_t prvGetTimestamp32(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
#if ((TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR) || (TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR))
	return TRC_HWTC_COUNT;
 80021e0:	4b03      	ldr	r3, [pc, #12]	; (80021f0 <prvGetTimestamp32+0x14>)
 80021e2:	681b      	ldr	r3, [r3, #0]
	
#if ((TRC_HWTC_TYPE == TRC_OS_TIMER_INCR) || (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR))
	uint32_t ticks = TRACE_GET_OS_TICKS();
	return ((TRC_HWTC_COUNT) & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
#endif
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	e0001004 	.word	0xe0001004

080021f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021f8:	2003      	movs	r0, #3
 80021fa:	f000 f8d6 	bl	80023aa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021fe:	2000      	movs	r0, #0
 8002200:	f7fe faf6 	bl	80007f0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002204:	f7fe facc 	bl	80007a0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	bd80      	pop	{r7, pc}
	...

08002210 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002214:	4b06      	ldr	r3, [pc, #24]	; (8002230 <HAL_IncTick+0x20>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	461a      	mov	r2, r3
 800221a:	4b06      	ldr	r3, [pc, #24]	; (8002234 <HAL_IncTick+0x24>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4413      	add	r3, r2
 8002220:	4a04      	ldr	r2, [pc, #16]	; (8002234 <HAL_IncTick+0x24>)
 8002222:	6013      	str	r3, [r2, #0]
}
 8002224:	bf00      	nop
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	2000001c 	.word	0x2000001c
 8002234:	200065b4 	.word	0x200065b4

08002238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  return uwTick;
 800223c:	4b03      	ldr	r3, [pc, #12]	; (800224c <HAL_GetTick+0x14>)
 800223e:	681b      	ldr	r3, [r3, #0]
}
 8002240:	4618      	mov	r0, r3
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	200065b4 	.word	0x200065b4

08002250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002260:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <__NVIC_SetPriorityGrouping+0x40>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800226c:	4013      	ands	r3, r2
 800226e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002278:	4b06      	ldr	r3, [pc, #24]	; (8002294 <__NVIC_SetPriorityGrouping+0x44>)
 800227a:	4313      	orrs	r3, r2
 800227c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800227e:	4a04      	ldr	r2, [pc, #16]	; (8002290 <__NVIC_SetPriorityGrouping+0x40>)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	60d3      	str	r3, [r2, #12]
}
 8002284:	bf00      	nop
 8002286:	3714      	adds	r7, #20
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	e000ed00 	.word	0xe000ed00
 8002294:	05fa0000 	.word	0x05fa0000

08002298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800229c:	4b04      	ldr	r3, [pc, #16]	; (80022b0 <__NVIC_GetPriorityGrouping+0x18>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	0a1b      	lsrs	r3, r3, #8
 80022a2:	f003 0307 	and.w	r3, r3, #7
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	db0b      	blt.n	80022de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022c6:	79fb      	ldrb	r3, [r7, #7]
 80022c8:	f003 021f 	and.w	r2, r3, #31
 80022cc:	4907      	ldr	r1, [pc, #28]	; (80022ec <__NVIC_EnableIRQ+0x38>)
 80022ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d2:	095b      	lsrs	r3, r3, #5
 80022d4:	2001      	movs	r0, #1
 80022d6:	fa00 f202 	lsl.w	r2, r0, r2
 80022da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	e000e100 	.word	0xe000e100

080022f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	6039      	str	r1, [r7, #0]
 80022fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002300:	2b00      	cmp	r3, #0
 8002302:	db0a      	blt.n	800231a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	b2da      	uxtb	r2, r3
 8002308:	490c      	ldr	r1, [pc, #48]	; (800233c <__NVIC_SetPriority+0x4c>)
 800230a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230e:	0112      	lsls	r2, r2, #4
 8002310:	b2d2      	uxtb	r2, r2
 8002312:	440b      	add	r3, r1
 8002314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002318:	e00a      	b.n	8002330 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	b2da      	uxtb	r2, r3
 800231e:	4908      	ldr	r1, [pc, #32]	; (8002340 <__NVIC_SetPriority+0x50>)
 8002320:	79fb      	ldrb	r3, [r7, #7]
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	3b04      	subs	r3, #4
 8002328:	0112      	lsls	r2, r2, #4
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	440b      	add	r3, r1
 800232e:	761a      	strb	r2, [r3, #24]
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	e000e100 	.word	0xe000e100
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002344:	b480      	push	{r7}
 8002346:	b089      	sub	sp, #36	; 0x24
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	f1c3 0307 	rsb	r3, r3, #7
 800235e:	2b04      	cmp	r3, #4
 8002360:	bf28      	it	cs
 8002362:	2304      	movcs	r3, #4
 8002364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	3304      	adds	r3, #4
 800236a:	2b06      	cmp	r3, #6
 800236c:	d902      	bls.n	8002374 <NVIC_EncodePriority+0x30>
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	3b03      	subs	r3, #3
 8002372:	e000      	b.n	8002376 <NVIC_EncodePriority+0x32>
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002378:	f04f 32ff 	mov.w	r2, #4294967295
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43da      	mvns	r2, r3
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	401a      	ands	r2, r3
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800238c:	f04f 31ff 	mov.w	r1, #4294967295
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	fa01 f303 	lsl.w	r3, r1, r3
 8002396:	43d9      	mvns	r1, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800239c:	4313      	orrs	r3, r2
         );
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3724      	adds	r7, #36	; 0x24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7ff ff4c 	bl	8002250 <__NVIC_SetPriorityGrouping>
}
 80023b8:	bf00      	nop
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
 80023cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023d2:	f7ff ff61 	bl	8002298 <__NVIC_GetPriorityGrouping>
 80023d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	68b9      	ldr	r1, [r7, #8]
 80023dc:	6978      	ldr	r0, [r7, #20]
 80023de:	f7ff ffb1 	bl	8002344 <NVIC_EncodePriority>
 80023e2:	4602      	mov	r2, r0
 80023e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023e8:	4611      	mov	r1, r2
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff ff80 	bl	80022f0 <__NVIC_SetPriority>
}
 80023f0:	bf00      	nop
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff ff54 	bl	80022b4 <__NVIC_EnableIRQ>
}
 800240c:	bf00      	nop
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002414:	b480      	push	{r7}
 8002416:	b089      	sub	sp, #36	; 0x24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800241e:	2300      	movs	r3, #0
 8002420:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002422:	2300      	movs	r3, #0
 8002424:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002426:	2300      	movs	r3, #0
 8002428:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800242a:	2300      	movs	r3, #0
 800242c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800242e:	2300      	movs	r3, #0
 8002430:	61fb      	str	r3, [r7, #28]
 8002432:	e175      	b.n	8002720 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002434:	2201      	movs	r2, #1
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	4013      	ands	r3, r2
 8002446:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	429a      	cmp	r2, r3
 800244e:	f040 8164 	bne.w	800271a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d00b      	beq.n	8002472 <HAL_GPIO_Init+0x5e>
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2b02      	cmp	r3, #2
 8002460:	d007      	beq.n	8002472 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002466:	2b11      	cmp	r3, #17
 8002468:	d003      	beq.n	8002472 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b12      	cmp	r3, #18
 8002470:	d130      	bne.n	80024d4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	2203      	movs	r2, #3
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43db      	mvns	r3, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4013      	ands	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4313      	orrs	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024a8:	2201      	movs	r2, #1
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	43db      	mvns	r3, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4013      	ands	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	091b      	lsrs	r3, r3, #4
 80024be:	f003 0201 	and.w	r2, r3, #1
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	2203      	movs	r2, #3
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4013      	ands	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b02      	cmp	r3, #2
 800250a:	d003      	beq.n	8002514 <HAL_GPIO_Init+0x100>
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2b12      	cmp	r3, #18
 8002512:	d123      	bne.n	800255c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	08da      	lsrs	r2, r3, #3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3208      	adds	r2, #8
 800251c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	220f      	movs	r2, #15
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	08da      	lsrs	r2, r3, #3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	3208      	adds	r2, #8
 8002556:	69b9      	ldr	r1, [r7, #24]
 8002558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	2203      	movs	r2, #3
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4013      	ands	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 0203 	and.w	r2, r3, #3
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4313      	orrs	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 80be 	beq.w	800271a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800259e:	4b65      	ldr	r3, [pc, #404]	; (8002734 <HAL_GPIO_Init+0x320>)
 80025a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a2:	4a64      	ldr	r2, [pc, #400]	; (8002734 <HAL_GPIO_Init+0x320>)
 80025a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025a8:	6453      	str	r3, [r2, #68]	; 0x44
 80025aa:	4b62      	ldr	r3, [pc, #392]	; (8002734 <HAL_GPIO_Init+0x320>)
 80025ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80025b6:	4a60      	ldr	r2, [pc, #384]	; (8002738 <HAL_GPIO_Init+0x324>)
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	089b      	lsrs	r3, r3, #2
 80025bc:	3302      	adds	r3, #2
 80025be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	220f      	movs	r2, #15
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43db      	mvns	r3, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4013      	ands	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a57      	ldr	r2, [pc, #348]	; (800273c <HAL_GPIO_Init+0x328>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d037      	beq.n	8002652 <HAL_GPIO_Init+0x23e>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a56      	ldr	r2, [pc, #344]	; (8002740 <HAL_GPIO_Init+0x32c>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d031      	beq.n	800264e <HAL_GPIO_Init+0x23a>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a55      	ldr	r2, [pc, #340]	; (8002744 <HAL_GPIO_Init+0x330>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d02b      	beq.n	800264a <HAL_GPIO_Init+0x236>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a54      	ldr	r2, [pc, #336]	; (8002748 <HAL_GPIO_Init+0x334>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d025      	beq.n	8002646 <HAL_GPIO_Init+0x232>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a53      	ldr	r2, [pc, #332]	; (800274c <HAL_GPIO_Init+0x338>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d01f      	beq.n	8002642 <HAL_GPIO_Init+0x22e>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a52      	ldr	r2, [pc, #328]	; (8002750 <HAL_GPIO_Init+0x33c>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d019      	beq.n	800263e <HAL_GPIO_Init+0x22a>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a51      	ldr	r2, [pc, #324]	; (8002754 <HAL_GPIO_Init+0x340>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d013      	beq.n	800263a <HAL_GPIO_Init+0x226>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a50      	ldr	r2, [pc, #320]	; (8002758 <HAL_GPIO_Init+0x344>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d00d      	beq.n	8002636 <HAL_GPIO_Init+0x222>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a4f      	ldr	r2, [pc, #316]	; (800275c <HAL_GPIO_Init+0x348>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d007      	beq.n	8002632 <HAL_GPIO_Init+0x21e>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a4e      	ldr	r2, [pc, #312]	; (8002760 <HAL_GPIO_Init+0x34c>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d101      	bne.n	800262e <HAL_GPIO_Init+0x21a>
 800262a:	2309      	movs	r3, #9
 800262c:	e012      	b.n	8002654 <HAL_GPIO_Init+0x240>
 800262e:	230a      	movs	r3, #10
 8002630:	e010      	b.n	8002654 <HAL_GPIO_Init+0x240>
 8002632:	2308      	movs	r3, #8
 8002634:	e00e      	b.n	8002654 <HAL_GPIO_Init+0x240>
 8002636:	2307      	movs	r3, #7
 8002638:	e00c      	b.n	8002654 <HAL_GPIO_Init+0x240>
 800263a:	2306      	movs	r3, #6
 800263c:	e00a      	b.n	8002654 <HAL_GPIO_Init+0x240>
 800263e:	2305      	movs	r3, #5
 8002640:	e008      	b.n	8002654 <HAL_GPIO_Init+0x240>
 8002642:	2304      	movs	r3, #4
 8002644:	e006      	b.n	8002654 <HAL_GPIO_Init+0x240>
 8002646:	2303      	movs	r3, #3
 8002648:	e004      	b.n	8002654 <HAL_GPIO_Init+0x240>
 800264a:	2302      	movs	r3, #2
 800264c:	e002      	b.n	8002654 <HAL_GPIO_Init+0x240>
 800264e:	2301      	movs	r3, #1
 8002650:	e000      	b.n	8002654 <HAL_GPIO_Init+0x240>
 8002652:	2300      	movs	r3, #0
 8002654:	69fa      	ldr	r2, [r7, #28]
 8002656:	f002 0203 	and.w	r2, r2, #3
 800265a:	0092      	lsls	r2, r2, #2
 800265c:	4093      	lsls	r3, r2
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4313      	orrs	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002664:	4934      	ldr	r1, [pc, #208]	; (8002738 <HAL_GPIO_Init+0x324>)
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	089b      	lsrs	r3, r3, #2
 800266a:	3302      	adds	r3, #2
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002672:	4b3c      	ldr	r3, [pc, #240]	; (8002764 <HAL_GPIO_Init+0x350>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	43db      	mvns	r3, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4013      	ands	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	4313      	orrs	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002696:	4a33      	ldr	r2, [pc, #204]	; (8002764 <HAL_GPIO_Init+0x350>)
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800269c:	4b31      	ldr	r3, [pc, #196]	; (8002764 <HAL_GPIO_Init+0x350>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	43db      	mvns	r3, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4013      	ands	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	4313      	orrs	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026c0:	4a28      	ldr	r2, [pc, #160]	; (8002764 <HAL_GPIO_Init+0x350>)
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026c6:	4b27      	ldr	r3, [pc, #156]	; (8002764 <HAL_GPIO_Init+0x350>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	43db      	mvns	r3, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4013      	ands	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026ea:	4a1e      	ldr	r2, [pc, #120]	; (8002764 <HAL_GPIO_Init+0x350>)
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026f0:	4b1c      	ldr	r3, [pc, #112]	; (8002764 <HAL_GPIO_Init+0x350>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	43db      	mvns	r3, r3
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4013      	ands	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d003      	beq.n	8002714 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4313      	orrs	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002714:	4a13      	ldr	r2, [pc, #76]	; (8002764 <HAL_GPIO_Init+0x350>)
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	3301      	adds	r3, #1
 800271e:	61fb      	str	r3, [r7, #28]
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	2b0f      	cmp	r3, #15
 8002724:	f67f ae86 	bls.w	8002434 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002728:	bf00      	nop
 800272a:	3724      	adds	r7, #36	; 0x24
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	40023800 	.word	0x40023800
 8002738:	40013800 	.word	0x40013800
 800273c:	40020000 	.word	0x40020000
 8002740:	40020400 	.word	0x40020400
 8002744:	40020800 	.word	0x40020800
 8002748:	40020c00 	.word	0x40020c00
 800274c:	40021000 	.word	0x40021000
 8002750:	40021400 	.word	0x40021400
 8002754:	40021800 	.word	0x40021800
 8002758:	40021c00 	.word	0x40021c00
 800275c:	40022000 	.word	0x40022000
 8002760:	40022400 	.word	0x40022400
 8002764:	40013c00 	.word	0x40013c00

08002768 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	460b      	mov	r3, r1
 8002772:	807b      	strh	r3, [r7, #2]
 8002774:	4613      	mov	r3, r2
 8002776:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002778:	787b      	ldrb	r3, [r7, #1]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800277e:	887a      	ldrh	r2, [r7, #2]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002784:	e003      	b.n	800278e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002786:	887b      	ldrh	r3, [r7, #2]
 8002788:	041a      	lsls	r2, r3, #16
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	619a      	str	r2, [r3, #24]
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
 80027a2:	460b      	mov	r3, r1
 80027a4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	695a      	ldr	r2, [r3, #20]
 80027aa:	887b      	ldrh	r3, [r7, #2]
 80027ac:	4013      	ands	r3, r2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d004      	beq.n	80027bc <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80027b2:	887b      	ldrh	r3, [r7, #2]
 80027b4:	041a      	lsls	r2, r3, #16
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80027ba:	e002      	b.n	80027c2 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027bc:	887a      	ldrh	r2, [r7, #2]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	619a      	str	r2, [r3, #24]
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
	...

080027d0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80027da:	4b23      	ldr	r3, [pc, #140]	; (8002868 <HAL_PWREx_EnableOverDrive+0x98>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	4a22      	ldr	r2, [pc, #136]	; (8002868 <HAL_PWREx_EnableOverDrive+0x98>)
 80027e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e4:	6413      	str	r3, [r2, #64]	; 0x40
 80027e6:	4b20      	ldr	r3, [pc, #128]	; (8002868 <HAL_PWREx_EnableOverDrive+0x98>)
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ee:	603b      	str	r3, [r7, #0]
 80027f0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80027f2:	4b1e      	ldr	r3, [pc, #120]	; (800286c <HAL_PWREx_EnableOverDrive+0x9c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a1d      	ldr	r2, [pc, #116]	; (800286c <HAL_PWREx_EnableOverDrive+0x9c>)
 80027f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027fc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027fe:	f7ff fd1b 	bl	8002238 <HAL_GetTick>
 8002802:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002804:	e009      	b.n	800281a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002806:	f7ff fd17 	bl	8002238 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002814:	d901      	bls.n	800281a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e022      	b.n	8002860 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800281a:	4b14      	ldr	r3, [pc, #80]	; (800286c <HAL_PWREx_EnableOverDrive+0x9c>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002826:	d1ee      	bne.n	8002806 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002828:	4b10      	ldr	r3, [pc, #64]	; (800286c <HAL_PWREx_EnableOverDrive+0x9c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a0f      	ldr	r2, [pc, #60]	; (800286c <HAL_PWREx_EnableOverDrive+0x9c>)
 800282e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002832:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002834:	f7ff fd00 	bl	8002238 <HAL_GetTick>
 8002838:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800283a:	e009      	b.n	8002850 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800283c:	f7ff fcfc 	bl	8002238 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800284a:	d901      	bls.n	8002850 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e007      	b.n	8002860 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002850:	4b06      	ldr	r3, [pc, #24]	; (800286c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002858:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800285c:	d1ee      	bne.n	800283c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40023800 	.word	0x40023800
 800286c:	40007000 	.word	0x40007000

08002870 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002878:	2300      	movs	r3, #0
 800287a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e291      	b.n	8002daa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 8087 	beq.w	80029a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002894:	4b96      	ldr	r3, [pc, #600]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 030c 	and.w	r3, r3, #12
 800289c:	2b04      	cmp	r3, #4
 800289e:	d00c      	beq.n	80028ba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028a0:	4b93      	ldr	r3, [pc, #588]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 030c 	and.w	r3, r3, #12
 80028a8:	2b08      	cmp	r3, #8
 80028aa:	d112      	bne.n	80028d2 <HAL_RCC_OscConfig+0x62>
 80028ac:	4b90      	ldr	r3, [pc, #576]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028b8:	d10b      	bne.n	80028d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ba:	4b8d      	ldr	r3, [pc, #564]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d06c      	beq.n	80029a0 <HAL_RCC_OscConfig+0x130>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d168      	bne.n	80029a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e26b      	b.n	8002daa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028da:	d106      	bne.n	80028ea <HAL_RCC_OscConfig+0x7a>
 80028dc:	4b84      	ldr	r3, [pc, #528]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a83      	ldr	r2, [pc, #524]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 80028e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e6:	6013      	str	r3, [r2, #0]
 80028e8:	e02e      	b.n	8002948 <HAL_RCC_OscConfig+0xd8>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10c      	bne.n	800290c <HAL_RCC_OscConfig+0x9c>
 80028f2:	4b7f      	ldr	r3, [pc, #508]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a7e      	ldr	r2, [pc, #504]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 80028f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	4b7c      	ldr	r3, [pc, #496]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a7b      	ldr	r2, [pc, #492]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002904:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	e01d      	b.n	8002948 <HAL_RCC_OscConfig+0xd8>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002914:	d10c      	bne.n	8002930 <HAL_RCC_OscConfig+0xc0>
 8002916:	4b76      	ldr	r3, [pc, #472]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a75      	ldr	r2, [pc, #468]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 800291c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	4b73      	ldr	r3, [pc, #460]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a72      	ldr	r2, [pc, #456]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	e00b      	b.n	8002948 <HAL_RCC_OscConfig+0xd8>
 8002930:	4b6f      	ldr	r3, [pc, #444]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a6e      	ldr	r2, [pc, #440]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800293a:	6013      	str	r3, [r2, #0]
 800293c:	4b6c      	ldr	r3, [pc, #432]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a6b      	ldr	r2, [pc, #428]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002942:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002946:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d013      	beq.n	8002978 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002950:	f7ff fc72 	bl	8002238 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002958:	f7ff fc6e 	bl	8002238 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b64      	cmp	r3, #100	; 0x64
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e21f      	b.n	8002daa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296a:	4b61      	ldr	r3, [pc, #388]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0f0      	beq.n	8002958 <HAL_RCC_OscConfig+0xe8>
 8002976:	e014      	b.n	80029a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002978:	f7ff fc5e 	bl	8002238 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002980:	f7ff fc5a 	bl	8002238 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b64      	cmp	r3, #100	; 0x64
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e20b      	b.n	8002daa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002992:	4b57      	ldr	r3, [pc, #348]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f0      	bne.n	8002980 <HAL_RCC_OscConfig+0x110>
 800299e:	e000      	b.n	80029a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d069      	beq.n	8002a82 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029ae:	4b50      	ldr	r3, [pc, #320]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 030c 	and.w	r3, r3, #12
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00b      	beq.n	80029d2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ba:	4b4d      	ldr	r3, [pc, #308]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 030c 	and.w	r3, r3, #12
 80029c2:	2b08      	cmp	r3, #8
 80029c4:	d11c      	bne.n	8002a00 <HAL_RCC_OscConfig+0x190>
 80029c6:	4b4a      	ldr	r3, [pc, #296]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d116      	bne.n	8002a00 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029d2:	4b47      	ldr	r3, [pc, #284]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d005      	beq.n	80029ea <HAL_RCC_OscConfig+0x17a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d001      	beq.n	80029ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e1df      	b.n	8002daa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ea:	4b41      	ldr	r3, [pc, #260]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	493d      	ldr	r1, [pc, #244]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029fe:	e040      	b.n	8002a82 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d023      	beq.n	8002a50 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a08:	4b39      	ldr	r3, [pc, #228]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a38      	ldr	r2, [pc, #224]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002a0e:	f043 0301 	orr.w	r3, r3, #1
 8002a12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a14:	f7ff fc10 	bl	8002238 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a1c:	f7ff fc0c 	bl	8002238 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e1bd      	b.n	8002daa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a2e:	4b30      	ldr	r3, [pc, #192]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0f0      	beq.n	8002a1c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a3a:	4b2d      	ldr	r3, [pc, #180]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	4929      	ldr	r1, [pc, #164]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	600b      	str	r3, [r1, #0]
 8002a4e:	e018      	b.n	8002a82 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a50:	4b27      	ldr	r3, [pc, #156]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a26      	ldr	r2, [pc, #152]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002a56:	f023 0301 	bic.w	r3, r3, #1
 8002a5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5c:	f7ff fbec 	bl	8002238 <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a64:	f7ff fbe8 	bl	8002238 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e199      	b.n	8002daa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a76:	4b1e      	ldr	r3, [pc, #120]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1f0      	bne.n	8002a64 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d038      	beq.n	8002b00 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d019      	beq.n	8002aca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a96:	4b16      	ldr	r3, [pc, #88]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002a98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a9a:	4a15      	ldr	r2, [pc, #84]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002a9c:	f043 0301 	orr.w	r3, r3, #1
 8002aa0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa2:	f7ff fbc9 	bl	8002238 <HAL_GetTick>
 8002aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aa8:	e008      	b.n	8002abc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aaa:	f7ff fbc5 	bl	8002238 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e176      	b.n	8002daa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002abc:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002abe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0f0      	beq.n	8002aaa <HAL_RCC_OscConfig+0x23a>
 8002ac8:	e01a      	b.n	8002b00 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aca:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ace:	4a08      	ldr	r2, [pc, #32]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002ad0:	f023 0301 	bic.w	r3, r3, #1
 8002ad4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad6:	f7ff fbaf 	bl	8002238 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002adc:	e00a      	b.n	8002af4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ade:	f7ff fbab 	bl	8002238 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d903      	bls.n	8002af4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e15c      	b.n	8002daa <HAL_RCC_OscConfig+0x53a>
 8002af0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002af4:	4b91      	ldr	r3, [pc, #580]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002af6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1ee      	bne.n	8002ade <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 80a4 	beq.w	8002c56 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b0e:	4b8b      	ldr	r3, [pc, #556]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10d      	bne.n	8002b36 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b1a:	4b88      	ldr	r3, [pc, #544]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	4a87      	ldr	r2, [pc, #540]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b24:	6413      	str	r3, [r2, #64]	; 0x40
 8002b26:	4b85      	ldr	r3, [pc, #532]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2e:	60bb      	str	r3, [r7, #8]
 8002b30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b32:	2301      	movs	r3, #1
 8002b34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b36:	4b82      	ldr	r3, [pc, #520]	; (8002d40 <HAL_RCC_OscConfig+0x4d0>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d118      	bne.n	8002b74 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002b42:	4b7f      	ldr	r3, [pc, #508]	; (8002d40 <HAL_RCC_OscConfig+0x4d0>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a7e      	ldr	r2, [pc, #504]	; (8002d40 <HAL_RCC_OscConfig+0x4d0>)
 8002b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b4e:	f7ff fb73 	bl	8002238 <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b56:	f7ff fb6f 	bl	8002238 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b64      	cmp	r3, #100	; 0x64
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e120      	b.n	8002daa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b68:	4b75      	ldr	r3, [pc, #468]	; (8002d40 <HAL_RCC_OscConfig+0x4d0>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0f0      	beq.n	8002b56 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d106      	bne.n	8002b8a <HAL_RCC_OscConfig+0x31a>
 8002b7c:	4b6f      	ldr	r3, [pc, #444]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b80:	4a6e      	ldr	r2, [pc, #440]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002b82:	f043 0301 	orr.w	r3, r3, #1
 8002b86:	6713      	str	r3, [r2, #112]	; 0x70
 8002b88:	e02d      	b.n	8002be6 <HAL_RCC_OscConfig+0x376>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10c      	bne.n	8002bac <HAL_RCC_OscConfig+0x33c>
 8002b92:	4b6a      	ldr	r3, [pc, #424]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b96:	4a69      	ldr	r2, [pc, #420]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002b98:	f023 0301 	bic.w	r3, r3, #1
 8002b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b9e:	4b67      	ldr	r3, [pc, #412]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba2:	4a66      	ldr	r2, [pc, #408]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002ba4:	f023 0304 	bic.w	r3, r3, #4
 8002ba8:	6713      	str	r3, [r2, #112]	; 0x70
 8002baa:	e01c      	b.n	8002be6 <HAL_RCC_OscConfig+0x376>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	2b05      	cmp	r3, #5
 8002bb2:	d10c      	bne.n	8002bce <HAL_RCC_OscConfig+0x35e>
 8002bb4:	4b61      	ldr	r3, [pc, #388]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb8:	4a60      	ldr	r2, [pc, #384]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002bba:	f043 0304 	orr.w	r3, r3, #4
 8002bbe:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc0:	4b5e      	ldr	r3, [pc, #376]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc4:	4a5d      	ldr	r2, [pc, #372]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002bc6:	f043 0301 	orr.w	r3, r3, #1
 8002bca:	6713      	str	r3, [r2, #112]	; 0x70
 8002bcc:	e00b      	b.n	8002be6 <HAL_RCC_OscConfig+0x376>
 8002bce:	4b5b      	ldr	r3, [pc, #364]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd2:	4a5a      	ldr	r2, [pc, #360]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002bd4:	f023 0301 	bic.w	r3, r3, #1
 8002bd8:	6713      	str	r3, [r2, #112]	; 0x70
 8002bda:	4b58      	ldr	r3, [pc, #352]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bde:	4a57      	ldr	r2, [pc, #348]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002be0:	f023 0304 	bic.w	r3, r3, #4
 8002be4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d015      	beq.n	8002c1a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bee:	f7ff fb23 	bl	8002238 <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf4:	e00a      	b.n	8002c0c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf6:	f7ff fb1f 	bl	8002238 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e0ce      	b.n	8002daa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c0c:	4b4b      	ldr	r3, [pc, #300]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0ee      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x386>
 8002c18:	e014      	b.n	8002c44 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c1a:	f7ff fb0d 	bl	8002238 <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c20:	e00a      	b.n	8002c38 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c22:	f7ff fb09 	bl	8002238 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e0b8      	b.n	8002daa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c38:	4b40      	ldr	r3, [pc, #256]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1ee      	bne.n	8002c22 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c44:	7dfb      	ldrb	r3, [r7, #23]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d105      	bne.n	8002c56 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c4a:	4b3c      	ldr	r3, [pc, #240]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	4a3b      	ldr	r2, [pc, #236]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002c50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f000 80a4 	beq.w	8002da8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c60:	4b36      	ldr	r3, [pc, #216]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f003 030c 	and.w	r3, r3, #12
 8002c68:	2b08      	cmp	r3, #8
 8002c6a:	d06b      	beq.n	8002d44 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d149      	bne.n	8002d08 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c74:	4b31      	ldr	r3, [pc, #196]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a30      	ldr	r2, [pc, #192]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002c7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c80:	f7ff fada 	bl	8002238 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c88:	f7ff fad6 	bl	8002238 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e087      	b.n	8002daa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c9a:	4b28      	ldr	r3, [pc, #160]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f0      	bne.n	8002c88 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69da      	ldr	r2, [r3, #28]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	019b      	lsls	r3, r3, #6
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbc:	085b      	lsrs	r3, r3, #1
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	041b      	lsls	r3, r3, #16
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc8:	061b      	lsls	r3, r3, #24
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	4a1b      	ldr	r2, [pc, #108]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002cce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002cd2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cd4:	4b19      	ldr	r3, [pc, #100]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a18      	ldr	r2, [pc, #96]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002cda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce0:	f7ff faaa 	bl	8002238 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce8:	f7ff faa6 	bl	8002238 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e057      	b.n	8002daa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cfa:	4b10      	ldr	r3, [pc, #64]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d0f0      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x478>
 8002d06:	e04f      	b.n	8002da8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d08:	4b0c      	ldr	r3, [pc, #48]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a0b      	ldr	r2, [pc, #44]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002d0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d14:	f7ff fa90 	bl	8002238 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d1c:	f7ff fa8c 	bl	8002238 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e03d      	b.n	8002daa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d2e:	4b03      	ldr	r3, [pc, #12]	; (8002d3c <HAL_RCC_OscConfig+0x4cc>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f0      	bne.n	8002d1c <HAL_RCC_OscConfig+0x4ac>
 8002d3a:	e035      	b.n	8002da8 <HAL_RCC_OscConfig+0x538>
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002d44:	4b1b      	ldr	r3, [pc, #108]	; (8002db4 <HAL_RCC_OscConfig+0x544>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d028      	beq.n	8002da4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d121      	bne.n	8002da4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d11a      	bne.n	8002da4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d74:	4013      	ands	r3, r2
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d7a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d111      	bne.n	8002da4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8a:	085b      	lsrs	r3, r3, #1
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d107      	bne.n	8002da4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d001      	beq.n	8002da8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e000      	b.n	8002daa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40023800 	.word	0x40023800

08002db8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e0d0      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dd0:	4b6a      	ldr	r3, [pc, #424]	; (8002f7c <HAL_RCC_ClockConfig+0x1c4>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 030f 	and.w	r3, r3, #15
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d910      	bls.n	8002e00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dde:	4b67      	ldr	r3, [pc, #412]	; (8002f7c <HAL_RCC_ClockConfig+0x1c4>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f023 020f 	bic.w	r2, r3, #15
 8002de6:	4965      	ldr	r1, [pc, #404]	; (8002f7c <HAL_RCC_ClockConfig+0x1c4>)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dee:	4b63      	ldr	r3, [pc, #396]	; (8002f7c <HAL_RCC_ClockConfig+0x1c4>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d001      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e0b8      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d020      	beq.n	8002e4e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d005      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e18:	4b59      	ldr	r3, [pc, #356]	; (8002f80 <HAL_RCC_ClockConfig+0x1c8>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	4a58      	ldr	r2, [pc, #352]	; (8002f80 <HAL_RCC_ClockConfig+0x1c8>)
 8002e1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0308 	and.w	r3, r3, #8
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d005      	beq.n	8002e3c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e30:	4b53      	ldr	r3, [pc, #332]	; (8002f80 <HAL_RCC_ClockConfig+0x1c8>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	4a52      	ldr	r2, [pc, #328]	; (8002f80 <HAL_RCC_ClockConfig+0x1c8>)
 8002e36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e3c:	4b50      	ldr	r3, [pc, #320]	; (8002f80 <HAL_RCC_ClockConfig+0x1c8>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	494d      	ldr	r1, [pc, #308]	; (8002f80 <HAL_RCC_ClockConfig+0x1c8>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d040      	beq.n	8002edc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d107      	bne.n	8002e72 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e62:	4b47      	ldr	r3, [pc, #284]	; (8002f80 <HAL_RCC_ClockConfig+0x1c8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d115      	bne.n	8002e9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e07f      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d107      	bne.n	8002e8a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e7a:	4b41      	ldr	r3, [pc, #260]	; (8002f80 <HAL_RCC_ClockConfig+0x1c8>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d109      	bne.n	8002e9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e073      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e8a:	4b3d      	ldr	r3, [pc, #244]	; (8002f80 <HAL_RCC_ClockConfig+0x1c8>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e06b      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e9a:	4b39      	ldr	r3, [pc, #228]	; (8002f80 <HAL_RCC_ClockConfig+0x1c8>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f023 0203 	bic.w	r2, r3, #3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	4936      	ldr	r1, [pc, #216]	; (8002f80 <HAL_RCC_ClockConfig+0x1c8>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eac:	f7ff f9c4 	bl	8002238 <HAL_GetTick>
 8002eb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eb2:	e00a      	b.n	8002eca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eb4:	f7ff f9c0 	bl	8002238 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e053      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eca:	4b2d      	ldr	r3, [pc, #180]	; (8002f80 <HAL_RCC_ClockConfig+0x1c8>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 020c 	and.w	r2, r3, #12
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d1eb      	bne.n	8002eb4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002edc:	4b27      	ldr	r3, [pc, #156]	; (8002f7c <HAL_RCC_ClockConfig+0x1c4>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 030f 	and.w	r3, r3, #15
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d210      	bcs.n	8002f0c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eea:	4b24      	ldr	r3, [pc, #144]	; (8002f7c <HAL_RCC_ClockConfig+0x1c4>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f023 020f 	bic.w	r2, r3, #15
 8002ef2:	4922      	ldr	r1, [pc, #136]	; (8002f7c <HAL_RCC_ClockConfig+0x1c4>)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efa:	4b20      	ldr	r3, [pc, #128]	; (8002f7c <HAL_RCC_ClockConfig+0x1c4>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d001      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e032      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d008      	beq.n	8002f2a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f18:	4b19      	ldr	r3, [pc, #100]	; (8002f80 <HAL_RCC_ClockConfig+0x1c8>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	4916      	ldr	r1, [pc, #88]	; (8002f80 <HAL_RCC_ClockConfig+0x1c8>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0308 	and.w	r3, r3, #8
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d009      	beq.n	8002f4a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f36:	4b12      	ldr	r3, [pc, #72]	; (8002f80 <HAL_RCC_ClockConfig+0x1c8>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	490e      	ldr	r1, [pc, #56]	; (8002f80 <HAL_RCC_ClockConfig+0x1c8>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f4a:	f000 f821 	bl	8002f90 <HAL_RCC_GetSysClockFreq>
 8002f4e:	4601      	mov	r1, r0
 8002f50:	4b0b      	ldr	r3, [pc, #44]	; (8002f80 <HAL_RCC_ClockConfig+0x1c8>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	091b      	lsrs	r3, r3, #4
 8002f56:	f003 030f 	and.w	r3, r3, #15
 8002f5a:	4a0a      	ldr	r2, [pc, #40]	; (8002f84 <HAL_RCC_ClockConfig+0x1cc>)
 8002f5c:	5cd3      	ldrb	r3, [r2, r3]
 8002f5e:	fa21 f303 	lsr.w	r3, r1, r3
 8002f62:	4a09      	ldr	r2, [pc, #36]	; (8002f88 <HAL_RCC_ClockConfig+0x1d0>)
 8002f64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f66:	4b09      	ldr	r3, [pc, #36]	; (8002f8c <HAL_RCC_ClockConfig+0x1d4>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fd fc40 	bl	80007f0 <HAL_InitTick>

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40023c00 	.word	0x40023c00
 8002f80:	40023800 	.word	0x40023800
 8002f84:	0800518c 	.word	0x0800518c
 8002f88:	20000000 	.word	0x20000000
 8002f8c:	20000018 	.word	0x20000018

08002f90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002f96:	2300      	movs	r3, #0
 8002f98:	607b      	str	r3, [r7, #4]
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fa6:	4b50      	ldr	r3, [pc, #320]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 030c 	and.w	r3, r3, #12
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	d007      	beq.n	8002fc2 <HAL_RCC_GetSysClockFreq+0x32>
 8002fb2:	2b08      	cmp	r3, #8
 8002fb4:	d008      	beq.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x38>
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f040 808d 	bne.w	80030d6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fbc:	4b4b      	ldr	r3, [pc, #300]	; (80030ec <HAL_RCC_GetSysClockFreq+0x15c>)
 8002fbe:	60bb      	str	r3, [r7, #8]
      break;
 8002fc0:	e08c      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fc2:	4b4b      	ldr	r3, [pc, #300]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002fc4:	60bb      	str	r3, [r7, #8]
      break;
 8002fc6:	e089      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fc8:	4b47      	ldr	r3, [pc, #284]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fd0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002fd2:	4b45      	ldr	r3, [pc, #276]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d023      	beq.n	8003026 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fde:	4b42      	ldr	r3, [pc, #264]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	099b      	lsrs	r3, r3, #6
 8002fe4:	f04f 0400 	mov.w	r4, #0
 8002fe8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002fec:	f04f 0200 	mov.w	r2, #0
 8002ff0:	ea03 0501 	and.w	r5, r3, r1
 8002ff4:	ea04 0602 	and.w	r6, r4, r2
 8002ff8:	4a3d      	ldr	r2, [pc, #244]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ffa:	fb02 f106 	mul.w	r1, r2, r6
 8002ffe:	2200      	movs	r2, #0
 8003000:	fb02 f205 	mul.w	r2, r2, r5
 8003004:	440a      	add	r2, r1
 8003006:	493a      	ldr	r1, [pc, #232]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003008:	fba5 0101 	umull	r0, r1, r5, r1
 800300c:	1853      	adds	r3, r2, r1
 800300e:	4619      	mov	r1, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f04f 0400 	mov.w	r4, #0
 8003016:	461a      	mov	r2, r3
 8003018:	4623      	mov	r3, r4
 800301a:	f7fd f8f9 	bl	8000210 <__aeabi_uldivmod>
 800301e:	4603      	mov	r3, r0
 8003020:	460c      	mov	r4, r1
 8003022:	60fb      	str	r3, [r7, #12]
 8003024:	e049      	b.n	80030ba <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003026:	4b30      	ldr	r3, [pc, #192]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	099b      	lsrs	r3, r3, #6
 800302c:	f04f 0400 	mov.w	r4, #0
 8003030:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	ea03 0501 	and.w	r5, r3, r1
 800303c:	ea04 0602 	and.w	r6, r4, r2
 8003040:	4629      	mov	r1, r5
 8003042:	4632      	mov	r2, r6
 8003044:	f04f 0300 	mov.w	r3, #0
 8003048:	f04f 0400 	mov.w	r4, #0
 800304c:	0154      	lsls	r4, r2, #5
 800304e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003052:	014b      	lsls	r3, r1, #5
 8003054:	4619      	mov	r1, r3
 8003056:	4622      	mov	r2, r4
 8003058:	1b49      	subs	r1, r1, r5
 800305a:	eb62 0206 	sbc.w	r2, r2, r6
 800305e:	f04f 0300 	mov.w	r3, #0
 8003062:	f04f 0400 	mov.w	r4, #0
 8003066:	0194      	lsls	r4, r2, #6
 8003068:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800306c:	018b      	lsls	r3, r1, #6
 800306e:	1a5b      	subs	r3, r3, r1
 8003070:	eb64 0402 	sbc.w	r4, r4, r2
 8003074:	f04f 0100 	mov.w	r1, #0
 8003078:	f04f 0200 	mov.w	r2, #0
 800307c:	00e2      	lsls	r2, r4, #3
 800307e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003082:	00d9      	lsls	r1, r3, #3
 8003084:	460b      	mov	r3, r1
 8003086:	4614      	mov	r4, r2
 8003088:	195b      	adds	r3, r3, r5
 800308a:	eb44 0406 	adc.w	r4, r4, r6
 800308e:	f04f 0100 	mov.w	r1, #0
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	02a2      	lsls	r2, r4, #10
 8003098:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800309c:	0299      	lsls	r1, r3, #10
 800309e:	460b      	mov	r3, r1
 80030a0:	4614      	mov	r4, r2
 80030a2:	4618      	mov	r0, r3
 80030a4:	4621      	mov	r1, r4
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f04f 0400 	mov.w	r4, #0
 80030ac:	461a      	mov	r2, r3
 80030ae:	4623      	mov	r3, r4
 80030b0:	f7fd f8ae 	bl	8000210 <__aeabi_uldivmod>
 80030b4:	4603      	mov	r3, r0
 80030b6:	460c      	mov	r4, r1
 80030b8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80030ba:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x158>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	0c1b      	lsrs	r3, r3, #16
 80030c0:	f003 0303 	and.w	r3, r3, #3
 80030c4:	3301      	adds	r3, #1
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d2:	60bb      	str	r3, [r7, #8]
      break;
 80030d4:	e002      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030d6:	4b05      	ldr	r3, [pc, #20]	; (80030ec <HAL_RCC_GetSysClockFreq+0x15c>)
 80030d8:	60bb      	str	r3, [r7, #8]
      break;
 80030da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030dc:	68bb      	ldr	r3, [r7, #8]
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3714      	adds	r7, #20
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40023800 	.word	0x40023800
 80030ec:	00f42400 	.word	0x00f42400
 80030f0:	017d7840 	.word	0x017d7840

080030f4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030f8:	4b03      	ldr	r3, [pc, #12]	; (8003108 <HAL_RCC_GetHCLKFreq+0x14>)
 80030fa:	681b      	ldr	r3, [r3, #0]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	20000000 	.word	0x20000000

0800310c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003110:	f7ff fff0 	bl	80030f4 <HAL_RCC_GetHCLKFreq>
 8003114:	4601      	mov	r1, r0
 8003116:	4b05      	ldr	r3, [pc, #20]	; (800312c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	0b5b      	lsrs	r3, r3, #13
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	4a03      	ldr	r2, [pc, #12]	; (8003130 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003122:	5cd3      	ldrb	r3, [r2, r3]
 8003124:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003128:	4618      	mov	r0, r3
 800312a:	bd80      	pop	{r7, pc}
 800312c:	40023800 	.word	0x40023800
 8003130:	0800519c 	.word	0x0800519c

08003134 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	220f      	movs	r2, #15
 8003142:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003144:	4b12      	ldr	r3, [pc, #72]	; (8003190 <HAL_RCC_GetClockConfig+0x5c>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f003 0203 	and.w	r2, r3, #3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003150:	4b0f      	ldr	r3, [pc, #60]	; (8003190 <HAL_RCC_GetClockConfig+0x5c>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800315c:	4b0c      	ldr	r3, [pc, #48]	; (8003190 <HAL_RCC_GetClockConfig+0x5c>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003168:	4b09      	ldr	r3, [pc, #36]	; (8003190 <HAL_RCC_GetClockConfig+0x5c>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	08db      	lsrs	r3, r3, #3
 800316e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003176:	4b07      	ldr	r3, [pc, #28]	; (8003194 <HAL_RCC_GetClockConfig+0x60>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 020f 	and.w	r2, r3, #15
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	601a      	str	r2, [r3, #0]
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	40023800 	.word	0x40023800
 8003194:	40023c00 	.word	0x40023c00

08003198 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e01d      	b.n	80031e6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d106      	bne.n	80031c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f815 	bl	80031ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2202      	movs	r2, #2
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3304      	adds	r3, #4
 80031d4:	4619      	mov	r1, r3
 80031d6:	4610      	mov	r0, r2
 80031d8:	f000 f986 	bl	80034e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
	...

08003204 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0201 	orr.w	r2, r2, #1
 800321a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689a      	ldr	r2, [r3, #8]
 8003222:	4b0c      	ldr	r3, [pc, #48]	; (8003254 <HAL_TIM_Base_Start_IT+0x50>)
 8003224:	4013      	ands	r3, r2
 8003226:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2b06      	cmp	r3, #6
 800322c:	d00b      	beq.n	8003246 <HAL_TIM_Base_Start_IT+0x42>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003234:	d007      	beq.n	8003246 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f042 0201 	orr.w	r2, r2, #1
 8003244:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	00010007 	.word	0x00010007

08003258 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b02      	cmp	r3, #2
 800326c:	d122      	bne.n	80032b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b02      	cmp	r3, #2
 800327a:	d11b      	bne.n	80032b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f06f 0202 	mvn.w	r2, #2
 8003284:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f905 	bl	80034aa <HAL_TIM_IC_CaptureCallback>
 80032a0:	e005      	b.n	80032ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f8f7 	bl	8003496 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 f908 	bl	80034be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	f003 0304 	and.w	r3, r3, #4
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d122      	bne.n	8003308 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b04      	cmp	r3, #4
 80032ce:	d11b      	bne.n	8003308 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f06f 0204 	mvn.w	r2, #4
 80032d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2202      	movs	r2, #2
 80032de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 f8db 	bl	80034aa <HAL_TIM_IC_CaptureCallback>
 80032f4:	e005      	b.n	8003302 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f8cd 	bl	8003496 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 f8de 	bl	80034be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	f003 0308 	and.w	r3, r3, #8
 8003312:	2b08      	cmp	r3, #8
 8003314:	d122      	bne.n	800335c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f003 0308 	and.w	r3, r3, #8
 8003320:	2b08      	cmp	r3, #8
 8003322:	d11b      	bne.n	800335c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f06f 0208 	mvn.w	r2, #8
 800332c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2204      	movs	r2, #4
 8003332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	f003 0303 	and.w	r3, r3, #3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d003      	beq.n	800334a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f8b1 	bl	80034aa <HAL_TIM_IC_CaptureCallback>
 8003348:	e005      	b.n	8003356 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f8a3 	bl	8003496 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 f8b4 	bl	80034be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	f003 0310 	and.w	r3, r3, #16
 8003366:	2b10      	cmp	r3, #16
 8003368:	d122      	bne.n	80033b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	f003 0310 	and.w	r3, r3, #16
 8003374:	2b10      	cmp	r3, #16
 8003376:	d11b      	bne.n	80033b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f06f 0210 	mvn.w	r2, #16
 8003380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2208      	movs	r2, #8
 8003386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f887 	bl	80034aa <HAL_TIM_IC_CaptureCallback>
 800339c:	e005      	b.n	80033aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f879 	bl	8003496 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 f88a 	bl	80034be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d10e      	bne.n	80033dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d107      	bne.n	80033dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f06f 0201 	mvn.w	r2, #1
 80033d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7fd f9cc 	bl	8000774 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e6:	2b80      	cmp	r3, #128	; 0x80
 80033e8:	d10e      	bne.n	8003408 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f4:	2b80      	cmp	r3, #128	; 0x80
 80033f6:	d107      	bne.n	8003408 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f91a 	bl	800363c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003412:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003416:	d10e      	bne.n	8003436 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003422:	2b80      	cmp	r3, #128	; 0x80
 8003424:	d107      	bne.n	8003436 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800342e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 f90d 	bl	8003650 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003440:	2b40      	cmp	r3, #64	; 0x40
 8003442:	d10e      	bne.n	8003462 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344e:	2b40      	cmp	r3, #64	; 0x40
 8003450:	d107      	bne.n	8003462 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800345a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 f838 	bl	80034d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	f003 0320 	and.w	r3, r3, #32
 800346c:	2b20      	cmp	r3, #32
 800346e:	d10e      	bne.n	800348e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	f003 0320 	and.w	r3, r3, #32
 800347a:	2b20      	cmp	r3, #32
 800347c:	d107      	bne.n	800348e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f06f 0220 	mvn.w	r2, #32
 8003486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f8cd 	bl	8003628 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800348e:	bf00      	nop
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800349e:	bf00      	nop
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b083      	sub	sp, #12
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034c6:	bf00      	nop
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034da:	bf00      	nop
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
	...

080034e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a40      	ldr	r2, [pc, #256]	; (80035fc <TIM_Base_SetConfig+0x114>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d013      	beq.n	8003528 <TIM_Base_SetConfig+0x40>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003506:	d00f      	beq.n	8003528 <TIM_Base_SetConfig+0x40>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a3d      	ldr	r2, [pc, #244]	; (8003600 <TIM_Base_SetConfig+0x118>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d00b      	beq.n	8003528 <TIM_Base_SetConfig+0x40>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a3c      	ldr	r2, [pc, #240]	; (8003604 <TIM_Base_SetConfig+0x11c>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d007      	beq.n	8003528 <TIM_Base_SetConfig+0x40>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a3b      	ldr	r2, [pc, #236]	; (8003608 <TIM_Base_SetConfig+0x120>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d003      	beq.n	8003528 <TIM_Base_SetConfig+0x40>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a3a      	ldr	r2, [pc, #232]	; (800360c <TIM_Base_SetConfig+0x124>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d108      	bne.n	800353a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800352e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	4313      	orrs	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a2f      	ldr	r2, [pc, #188]	; (80035fc <TIM_Base_SetConfig+0x114>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d02b      	beq.n	800359a <TIM_Base_SetConfig+0xb2>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003548:	d027      	beq.n	800359a <TIM_Base_SetConfig+0xb2>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a2c      	ldr	r2, [pc, #176]	; (8003600 <TIM_Base_SetConfig+0x118>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d023      	beq.n	800359a <TIM_Base_SetConfig+0xb2>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a2b      	ldr	r2, [pc, #172]	; (8003604 <TIM_Base_SetConfig+0x11c>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d01f      	beq.n	800359a <TIM_Base_SetConfig+0xb2>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a2a      	ldr	r2, [pc, #168]	; (8003608 <TIM_Base_SetConfig+0x120>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d01b      	beq.n	800359a <TIM_Base_SetConfig+0xb2>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a29      	ldr	r2, [pc, #164]	; (800360c <TIM_Base_SetConfig+0x124>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d017      	beq.n	800359a <TIM_Base_SetConfig+0xb2>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a28      	ldr	r2, [pc, #160]	; (8003610 <TIM_Base_SetConfig+0x128>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d013      	beq.n	800359a <TIM_Base_SetConfig+0xb2>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a27      	ldr	r2, [pc, #156]	; (8003614 <TIM_Base_SetConfig+0x12c>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d00f      	beq.n	800359a <TIM_Base_SetConfig+0xb2>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a26      	ldr	r2, [pc, #152]	; (8003618 <TIM_Base_SetConfig+0x130>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d00b      	beq.n	800359a <TIM_Base_SetConfig+0xb2>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a25      	ldr	r2, [pc, #148]	; (800361c <TIM_Base_SetConfig+0x134>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d007      	beq.n	800359a <TIM_Base_SetConfig+0xb2>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a24      	ldr	r2, [pc, #144]	; (8003620 <TIM_Base_SetConfig+0x138>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d003      	beq.n	800359a <TIM_Base_SetConfig+0xb2>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a23      	ldr	r2, [pc, #140]	; (8003624 <TIM_Base_SetConfig+0x13c>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d108      	bne.n	80035ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a0a      	ldr	r2, [pc, #40]	; (80035fc <TIM_Base_SetConfig+0x114>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d003      	beq.n	80035e0 <TIM_Base_SetConfig+0xf8>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a0c      	ldr	r2, [pc, #48]	; (800360c <TIM_Base_SetConfig+0x124>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d103      	bne.n	80035e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	691a      	ldr	r2, [r3, #16]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	615a      	str	r2, [r3, #20]
}
 80035ee:	bf00      	nop
 80035f0:	3714      	adds	r7, #20
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	40010000 	.word	0x40010000
 8003600:	40000400 	.word	0x40000400
 8003604:	40000800 	.word	0x40000800
 8003608:	40000c00 	.word	0x40000c00
 800360c:	40010400 	.word	0x40010400
 8003610:	40014000 	.word	0x40014000
 8003614:	40014400 	.word	0x40014400
 8003618:	40014800 	.word	0x40014800
 800361c:	40001800 	.word	0x40001800
 8003620:	40001c00 	.word	0x40001c00
 8003624:	40002000 	.word	0x40002000

08003628 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	4603      	mov	r3, r0
 800366c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800366e:	2300      	movs	r3, #0
 8003670:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003672:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003676:	2b84      	cmp	r3, #132	; 0x84
 8003678:	d005      	beq.n	8003686 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800367a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	4413      	add	r3, r2
 8003682:	3303      	adds	r3, #3
 8003684:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003686:	68fb      	ldr	r3, [r7, #12]
}
 8003688:	4618      	mov	r0, r3
 800368a:	3714      	adds	r7, #20
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003698:	f000 fb56 	bl	8003d48 <vTaskStartScheduler>
  
  return osOK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80036a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036a4:	b089      	sub	sp, #36	; 0x24
 80036a6:	af04      	add	r7, sp, #16
 80036a8:	6078      	str	r0, [r7, #4]
 80036aa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	695b      	ldr	r3, [r3, #20]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d020      	beq.n	80036f6 <osThreadCreate+0x54>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d01c      	beq.n	80036f6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685c      	ldr	r4, [r3, #4]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681d      	ldr	r5, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691e      	ldr	r6, [r3, #16]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7ff ffc8 	bl	8003664 <makeFreeRtosPriority>
 80036d4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80036de:	9202      	str	r2, [sp, #8]
 80036e0:	9301      	str	r3, [sp, #4]
 80036e2:	9100      	str	r1, [sp, #0]
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	4632      	mov	r2, r6
 80036e8:	4629      	mov	r1, r5
 80036ea:	4620      	mov	r0, r4
 80036ec:	f000 f8ed 	bl	80038ca <xTaskCreateStatic>
 80036f0:	4603      	mov	r3, r0
 80036f2:	60fb      	str	r3, [r7, #12]
 80036f4:	e01c      	b.n	8003730 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685c      	ldr	r4, [r3, #4]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003702:	b29e      	uxth	r6, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800370a:	4618      	mov	r0, r3
 800370c:	f7ff ffaa 	bl	8003664 <makeFreeRtosPriority>
 8003710:	4602      	mov	r2, r0
 8003712:	f107 030c 	add.w	r3, r7, #12
 8003716:	9301      	str	r3, [sp, #4]
 8003718:	9200      	str	r2, [sp, #0]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	4632      	mov	r2, r6
 800371e:	4629      	mov	r1, r5
 8003720:	4620      	mov	r0, r4
 8003722:	f000 f932 	bl	800398a <xTaskCreate>
 8003726:	4603      	mov	r3, r0
 8003728:	2b01      	cmp	r3, #1
 800372a:	d001      	beq.n	8003730 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800372c:	2300      	movs	r3, #0
 800372e:	e000      	b.n	8003732 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003730:	68fb      	ldr	r3, [r7, #12]
}
 8003732:	4618      	mov	r0, r3
 8003734:	3714      	adds	r7, #20
 8003736:	46bd      	mov	sp, r7
 8003738:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800373a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b084      	sub	sp, #16
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <osDelay+0x16>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	e000      	b.n	8003752 <osDelay+0x18>
 8003750:	2301      	movs	r3, #1
 8003752:	4618      	mov	r0, r3
 8003754:	f000 faae 	bl	8003cb4 <vTaskDelay>
  
  return osOK;
 8003758:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003762:	b480      	push	{r7}
 8003764:	b083      	sub	sp, #12
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f103 0208 	add.w	r2, r3, #8
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f04f 32ff 	mov.w	r2, #4294967295
 800377a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f103 0208 	add.w	r2, r3, #8
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f103 0208 	add.w	r2, r3, #8
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003796:	bf00      	nop
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr

080037a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80037a2:	b480      	push	{r7}
 80037a4:	b083      	sub	sp, #12
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	689a      	ldr	r2, [r3, #8]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	1c5a      	adds	r2, r3, #1
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	601a      	str	r2, [r3, #0]
}
 80037f8:	bf00      	nop
 80037fa:	3714      	adds	r7, #20
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381a:	d103      	bne.n	8003824 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	60fb      	str	r3, [r7, #12]
 8003822:	e00c      	b.n	800383e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	3308      	adds	r3, #8
 8003828:	60fb      	str	r3, [r7, #12]
 800382a:	e002      	b.n	8003832 <vListInsert+0x2e>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	60fb      	str	r3, [r7, #12]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	429a      	cmp	r2, r3
 800383c:	d2f6      	bcs.n	800382c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	1c5a      	adds	r2, r3, #1
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	601a      	str	r2, [r3, #0]
}
 800386a:	bf00      	nop
 800386c:	3714      	adds	r7, #20
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003876:	b480      	push	{r7}
 8003878:	b085      	sub	sp, #20
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	6892      	ldr	r2, [r2, #8]
 800388c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6852      	ldr	r2, [r2, #4]
 8003896:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d103      	bne.n	80038aa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689a      	ldr	r2, [r3, #8]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	1e5a      	subs	r2, r3, #1
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b08e      	sub	sp, #56	; 0x38
 80038ce:	af04      	add	r7, sp, #16
 80038d0:	60f8      	str	r0, [r7, #12]
 80038d2:	60b9      	str	r1, [r7, #8]
 80038d4:	607a      	str	r2, [r7, #4]
 80038d6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80038d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10b      	bne.n	80038f6 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80038de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e2:	b672      	cpsid	i
 80038e4:	f383 8811 	msr	BASEPRI, r3
 80038e8:	f3bf 8f6f 	isb	sy
 80038ec:	f3bf 8f4f 	dsb	sy
 80038f0:	b662      	cpsie	i
 80038f2:	623b      	str	r3, [r7, #32]
 80038f4:	e7fe      	b.n	80038f4 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 80038f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10b      	bne.n	8003914 <xTaskCreateStatic+0x4a>
 80038fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003900:	b672      	cpsid	i
 8003902:	f383 8811 	msr	BASEPRI, r3
 8003906:	f3bf 8f6f 	isb	sy
 800390a:	f3bf 8f4f 	dsb	sy
 800390e:	b662      	cpsie	i
 8003910:	61fb      	str	r3, [r7, #28]
 8003912:	e7fe      	b.n	8003912 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003914:	235c      	movs	r3, #92	; 0x5c
 8003916:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	2b5c      	cmp	r3, #92	; 0x5c
 800391c:	d00b      	beq.n	8003936 <xTaskCreateStatic+0x6c>
 800391e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003922:	b672      	cpsid	i
 8003924:	f383 8811 	msr	BASEPRI, r3
 8003928:	f3bf 8f6f 	isb	sy
 800392c:	f3bf 8f4f 	dsb	sy
 8003930:	b662      	cpsie	i
 8003932:	61bb      	str	r3, [r7, #24]
 8003934:	e7fe      	b.n	8003934 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003936:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800393a:	2b00      	cmp	r3, #0
 800393c:	d01e      	beq.n	800397c <xTaskCreateStatic+0xb2>
 800393e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003940:	2b00      	cmp	r3, #0
 8003942:	d01b      	beq.n	800397c <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003946:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800394c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	2202      	movs	r2, #2
 8003952:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003956:	2300      	movs	r3, #0
 8003958:	9303      	str	r3, [sp, #12]
 800395a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395c:	9302      	str	r3, [sp, #8]
 800395e:	f107 0314 	add.w	r3, r7, #20
 8003962:	9301      	str	r3, [sp, #4]
 8003964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	68b9      	ldr	r1, [r7, #8]
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f000 f850 	bl	8003a14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003974:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003976:	f000 f8dd 	bl	8003b34 <prvAddNewTaskToReadyList>
 800397a:	e001      	b.n	8003980 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800397c:	2300      	movs	r3, #0
 800397e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003980:	697b      	ldr	r3, [r7, #20]
	}
 8003982:	4618      	mov	r0, r3
 8003984:	3728      	adds	r7, #40	; 0x28
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800398a:	b580      	push	{r7, lr}
 800398c:	b08c      	sub	sp, #48	; 0x30
 800398e:	af04      	add	r7, sp, #16
 8003990:	60f8      	str	r0, [r7, #12]
 8003992:	60b9      	str	r1, [r7, #8]
 8003994:	603b      	str	r3, [r7, #0]
 8003996:	4613      	mov	r3, r2
 8003998:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800399a:	88fb      	ldrh	r3, [r7, #6]
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 fff2 	bl	8004988 <pvPortMalloc>
 80039a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00e      	beq.n	80039ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80039ac:	205c      	movs	r0, #92	; 0x5c
 80039ae:	f000 ffeb 	bl	8004988 <pvPortMalloc>
 80039b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	631a      	str	r2, [r3, #48]	; 0x30
 80039c0:	e005      	b.n	80039ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80039c2:	6978      	ldr	r0, [r7, #20]
 80039c4:	f001 f8d2 	bl	8004b6c <vPortFree>
 80039c8:	e001      	b.n	80039ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80039ca:	2300      	movs	r3, #0
 80039cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d017      	beq.n	8003a04 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80039dc:	88fa      	ldrh	r2, [r7, #6]
 80039de:	2300      	movs	r3, #0
 80039e0:	9303      	str	r3, [sp, #12]
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	9302      	str	r3, [sp, #8]
 80039e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e8:	9301      	str	r3, [sp, #4]
 80039ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	68b9      	ldr	r1, [r7, #8]
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f000 f80e 	bl	8003a14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039f8:	69f8      	ldr	r0, [r7, #28]
 80039fa:	f000 f89b 	bl	8003b34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80039fe:	2301      	movs	r3, #1
 8003a00:	61bb      	str	r3, [r7, #24]
 8003a02:	e002      	b.n	8003a0a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a04:	f04f 33ff 	mov.w	r3, #4294967295
 8003a08:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a0a:	69bb      	ldr	r3, [r7, #24]
	}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3720      	adds	r7, #32
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b088      	sub	sp, #32
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
 8003a20:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a24:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	21a5      	movs	r1, #165	; 0xa5
 8003a2e:	f001 fa06 	bl	8004e3e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003a3c:	440b      	add	r3, r1
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	f023 0307 	bic.w	r3, r3, #7
 8003a4a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00b      	beq.n	8003a6e <prvInitialiseNewTask+0x5a>
 8003a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5a:	b672      	cpsid	i
 8003a5c:	f383 8811 	msr	BASEPRI, r3
 8003a60:	f3bf 8f6f 	isb	sy
 8003a64:	f3bf 8f4f 	dsb	sy
 8003a68:	b662      	cpsie	i
 8003a6a:	617b      	str	r3, [r7, #20]
 8003a6c:	e7fe      	b.n	8003a6c <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d01f      	beq.n	8003ab4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a74:	2300      	movs	r3, #0
 8003a76:	61fb      	str	r3, [r7, #28]
 8003a78:	e012      	b.n	8003aa0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	4413      	add	r3, r2
 8003a80:	7819      	ldrb	r1, [r3, #0]
 8003a82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	4413      	add	r3, r2
 8003a88:	3334      	adds	r3, #52	; 0x34
 8003a8a:	460a      	mov	r2, r1
 8003a8c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	4413      	add	r3, r2
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d006      	beq.n	8003aa8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	61fb      	str	r3, [r7, #28]
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	2b0f      	cmp	r3, #15
 8003aa4:	d9e9      	bls.n	8003a7a <prvInitialiseNewTask+0x66>
 8003aa6:	e000      	b.n	8003aaa <prvInitialiseNewTask+0x96>
			{
				break;
 8003aa8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ab2:	e003      	b.n	8003abc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003abe:	2b06      	cmp	r3, #6
 8003ac0:	d901      	bls.n	8003ac6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003ac2:	2306      	movs	r3, #6
 8003ac4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003aca:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ace:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ad0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ada:	3304      	adds	r3, #4
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7ff fe60 	bl	80037a2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae4:	3318      	adds	r3, #24
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7ff fe5b 	bl	80037a2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003af0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af4:	f1c3 0207 	rsb	r2, r3, #7
 8003af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b00:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b04:	2200      	movs	r2, #0
 8003b06:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	68f9      	ldr	r1, [r7, #12]
 8003b14:	69b8      	ldr	r0, [r7, #24]
 8003b16:	f000 fd35 	bl	8004584 <pxPortInitialiseStack>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d002      	beq.n	8003b2c <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b2a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b2c:	bf00      	nop
 8003b2e:	3720      	adds	r7, #32
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b3c:	f000 fe3e 	bl	80047bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b40:	4b53      	ldr	r3, [pc, #332]	; (8003c90 <prvAddNewTaskToReadyList+0x15c>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	3301      	adds	r3, #1
 8003b46:	4a52      	ldr	r2, [pc, #328]	; (8003c90 <prvAddNewTaskToReadyList+0x15c>)
 8003b48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003b4a:	4b52      	ldr	r3, [pc, #328]	; (8003c94 <prvAddNewTaskToReadyList+0x160>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d109      	bne.n	8003b66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b52:	4a50      	ldr	r2, [pc, #320]	; (8003c94 <prvAddNewTaskToReadyList+0x160>)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b58:	4b4d      	ldr	r3, [pc, #308]	; (8003c90 <prvAddNewTaskToReadyList+0x15c>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d110      	bne.n	8003b82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003b60:	f000 fbde 	bl	8004320 <prvInitialiseTaskLists>
 8003b64:	e00d      	b.n	8003b82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003b66:	4b4c      	ldr	r3, [pc, #304]	; (8003c98 <prvAddNewTaskToReadyList+0x164>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d109      	bne.n	8003b82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b6e:	4b49      	ldr	r3, [pc, #292]	; (8003c94 <prvAddNewTaskToReadyList+0x160>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d802      	bhi.n	8003b82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003b7c:	4a45      	ldr	r2, [pc, #276]	; (8003c94 <prvAddNewTaskToReadyList+0x160>)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003b82:	4b46      	ldr	r3, [pc, #280]	; (8003c9c <prvAddNewTaskToReadyList+0x168>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	3301      	adds	r3, #1
 8003b88:	4a44      	ldr	r2, [pc, #272]	; (8003c9c <prvAddNewTaskToReadyList+0x168>)
 8003b8a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003b8c:	4b43      	ldr	r3, [pc, #268]	; (8003c9c <prvAddNewTaskToReadyList+0x168>)
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d039      	beq.n	8003c0e <prvAddNewTaskToReadyList+0xda>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	3334      	adds	r3, #52	; 0x34
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f7fe f961 	bl	8001e68 <prvTraceSaveObjectSymbol>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003baa:	4619      	mov	r1, r3
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f7fe f9c9 	bl	8001f44 <prvTraceSaveObjectData>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2103      	movs	r1, #3
 8003bbc:	2001      	movs	r0, #1
 8003bbe:	f7fd ff35 	bl	8001a2c <prvTraceStoreStringEvent>
 8003bc2:	4b37      	ldr	r3, [pc, #220]	; (8003ca0 <prvAddNewTaskToReadyList+0x16c>)
 8003bc4:	881b      	ldrh	r3, [r3, #0]
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f7fd fa06 	bl	8000fda <prvTraceSetTaskNumberHigh16>
 8003bce:	f7fd fab3 	bl	8001138 <prvTraceGetCurrentTaskHandle>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7fd f9f2 	bl	8000fbe <prvTraceGetTaskNumberHigh16>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	461a      	mov	r2, r3
 8003bde:	4b31      	ldr	r3, [pc, #196]	; (8003ca4 <prvAddNewTaskToReadyList+0x170>)
 8003be0:	881b      	ldrh	r3, [r3, #0]
 8003be2:	4013      	ands	r3, r2
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d011      	beq.n	8003c0e <prvAddNewTaskToReadyList+0xda>
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7fd f9e7 	bl	8000fbe <prvTraceGetTaskNumberHigh16>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	4b2b      	ldr	r3, [pc, #172]	; (8003ca4 <prvAddNewTaskToReadyList+0x170>)
 8003bf6:	881b      	ldrh	r3, [r3, #0]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d006      	beq.n	8003c0e <prvAddNewTaskToReadyList+0xda>
 8003c00:	6879      	ldr	r1, [r7, #4]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c06:	461a      	mov	r2, r3
 8003c08:	2010      	movs	r0, #16
 8003c0a:	f7fd feb7 	bl	800197c <prvTraceStoreEvent2>

		prvAddTaskToReadyList( pxNewTCB );
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7fd f9d5 	bl	8000fbe <prvTraceGetTaskNumberHigh16>
 8003c14:	4603      	mov	r3, r0
 8003c16:	461a      	mov	r2, r3
 8003c18:	4b22      	ldr	r3, [pc, #136]	; (8003ca4 <prvAddNewTaskToReadyList+0x170>)
 8003c1a:	881b      	ldrh	r3, [r3, #0]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d004      	beq.n	8003c2e <prvAddNewTaskToReadyList+0xfa>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4619      	mov	r1, r3
 8003c28:	2030      	movs	r0, #48	; 0x30
 8003c2a:	f7fd fe53 	bl	80018d4 <prvTraceStoreEvent1>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c32:	2201      	movs	r2, #1
 8003c34:	409a      	lsls	r2, r3
 8003c36:	4b1c      	ldr	r3, [pc, #112]	; (8003ca8 <prvAddNewTaskToReadyList+0x174>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	4a1a      	ldr	r2, [pc, #104]	; (8003ca8 <prvAddNewTaskToReadyList+0x174>)
 8003c3e:	6013      	str	r3, [r2, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c44:	4613      	mov	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4413      	add	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4a17      	ldr	r2, [pc, #92]	; (8003cac <prvAddNewTaskToReadyList+0x178>)
 8003c4e:	441a      	add	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	3304      	adds	r3, #4
 8003c54:	4619      	mov	r1, r3
 8003c56:	4610      	mov	r0, r2
 8003c58:	f7ff fdb0 	bl	80037bc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c5c:	f000 fde0 	bl	8004820 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c60:	4b0d      	ldr	r3, [pc, #52]	; (8003c98 <prvAddNewTaskToReadyList+0x164>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00e      	beq.n	8003c86 <prvAddNewTaskToReadyList+0x152>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c68:	4b0a      	ldr	r3, [pc, #40]	; (8003c94 <prvAddNewTaskToReadyList+0x160>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d207      	bcs.n	8003c86 <prvAddNewTaskToReadyList+0x152>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c76:	4b0e      	ldr	r3, [pc, #56]	; (8003cb0 <prvAddNewTaskToReadyList+0x17c>)
 8003c78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	f3bf 8f4f 	dsb	sy
 8003c82:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c86:	bf00      	nop
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	200014ec 	.word	0x200014ec
 8003c94:	200013ec 	.word	0x200013ec
 8003c98:	200014f8 	.word	0x200014f8
 8003c9c:	20001508 	.word	0x20001508
 8003ca0:	20000016 	.word	0x20000016
 8003ca4:	20000014 	.word	0x20000014
 8003ca8:	200014f4 	.word	0x200014f4
 8003cac:	200013f0 	.word	0x200013f0
 8003cb0:	e000ed04 	.word	0xe000ed04

08003cb4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d02a      	beq.n	8003d1c <vTaskDelay+0x68>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003cc6:	4b1d      	ldr	r3, [pc, #116]	; (8003d3c <vTaskDelay+0x88>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00b      	beq.n	8003ce6 <vTaskDelay+0x32>
 8003cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd2:	b672      	cpsid	i
 8003cd4:	f383 8811 	msr	BASEPRI, r3
 8003cd8:	f3bf 8f6f 	isb	sy
 8003cdc:	f3bf 8f4f 	dsb	sy
 8003ce0:	b662      	cpsie	i
 8003ce2:	60bb      	str	r3, [r7, #8]
 8003ce4:	e7fe      	b.n	8003ce4 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8003ce6:	f000 f8bd 	bl	8003e64 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8003cea:	f7fd fa25 	bl	8001138 <prvTraceGetCurrentTaskHandle>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7fd f964 	bl	8000fbe <prvTraceGetTaskNumberHigh16>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	4b11      	ldr	r3, [pc, #68]	; (8003d40 <vTaskDelay+0x8c>)
 8003cfc:	881b      	ldrh	r3, [r3, #0]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <vTaskDelay+0x5a>
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	207a      	movs	r0, #122	; 0x7a
 8003d0a:	f7fd fde3 	bl	80018d4 <prvTraceStoreEvent1>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d0e:	2100      	movs	r1, #0
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 fbd1 	bl	80044b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003d16:	f000 f8b3 	bl	8003e80 <xTaskResumeAll>
 8003d1a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d107      	bne.n	8003d32 <vTaskDelay+0x7e>
		{
			portYIELD_WITHIN_API();
 8003d22:	4b08      	ldr	r3, [pc, #32]	; (8003d44 <vTaskDelay+0x90>)
 8003d24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	f3bf 8f4f 	dsb	sy
 8003d2e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003d32:	bf00      	nop
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	20001514 	.word	0x20001514
 8003d40:	20000014 	.word	0x20000014
 8003d44:	e000ed04 	.word	0xe000ed04

08003d48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b08a      	sub	sp, #40	; 0x28
 8003d4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003d52:	2300      	movs	r3, #0
 8003d54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d56:	463a      	mov	r2, r7
 8003d58:	1d39      	adds	r1, r7, #4
 8003d5a:	f107 0308 	add.w	r3, r7, #8
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7fc fbd6 	bl	8000510 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d64:	6839      	ldr	r1, [r7, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	68ba      	ldr	r2, [r7, #8]
 8003d6a:	9202      	str	r2, [sp, #8]
 8003d6c:	9301      	str	r3, [sp, #4]
 8003d6e:	2300      	movs	r3, #0
 8003d70:	9300      	str	r3, [sp, #0]
 8003d72:	2300      	movs	r3, #0
 8003d74:	460a      	mov	r2, r1
 8003d76:	4932      	ldr	r1, [pc, #200]	; (8003e40 <vTaskStartScheduler+0xf8>)
 8003d78:	4832      	ldr	r0, [pc, #200]	; (8003e44 <vTaskStartScheduler+0xfc>)
 8003d7a:	f7ff fda6 	bl	80038ca <xTaskCreateStatic>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	4b31      	ldr	r3, [pc, #196]	; (8003e48 <vTaskStartScheduler+0x100>)
 8003d82:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d84:	4b30      	ldr	r3, [pc, #192]	; (8003e48 <vTaskStartScheduler+0x100>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	617b      	str	r3, [r7, #20]
 8003d90:	e001      	b.n	8003d96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d92:	2300      	movs	r3, #0
 8003d94:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d13d      	bne.n	8003e18 <vTaskStartScheduler+0xd0>
 8003d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da0:	b672      	cpsid	i
 8003da2:	f383 8811 	msr	BASEPRI, r3
 8003da6:	f3bf 8f6f 	isb	sy
 8003daa:	f3bf 8f4f 	dsb	sy
 8003dae:	b662      	cpsie	i
 8003db0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003db2:	4b26      	ldr	r3, [pc, #152]	; (8003e4c <vTaskStartScheduler+0x104>)
 8003db4:	f04f 32ff 	mov.w	r2, #4294967295
 8003db8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003dba:	4b25      	ldr	r3, [pc, #148]	; (8003e50 <vTaskStartScheduler+0x108>)
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003dc0:	4b24      	ldr	r3, [pc, #144]	; (8003e54 <vTaskStartScheduler+0x10c>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8003dc6:	4b24      	ldr	r3, [pc, #144]	; (8003e58 <vTaskStartScheduler+0x110>)
 8003dc8:	2201      	movs	r2, #1
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	f7fd f9b4 	bl	8001138 <prvTraceGetCurrentTaskHandle>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fd f8f3 	bl	8000fbe <prvTraceGetTaskNumberHigh16>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	461a      	mov	r2, r3
 8003ddc:	4b1f      	ldr	r3, [pc, #124]	; (8003e5c <vTaskStartScheduler+0x114>)
 8003dde:	881b      	ldrh	r3, [r3, #0]
 8003de0:	4013      	ands	r3, r2
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d011      	beq.n	8003e0c <vTaskStartScheduler+0xc4>
 8003de8:	4b1d      	ldr	r3, [pc, #116]	; (8003e60 <vTaskStartScheduler+0x118>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7fd f9ab 	bl	8001148 <prvIsNewTCB>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d009      	beq.n	8003e0c <vTaskStartScheduler+0xc4>
 8003df8:	4b19      	ldr	r3, [pc, #100]	; (8003e60 <vTaskStartScheduler+0x118>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	4b18      	ldr	r3, [pc, #96]	; (8003e60 <vTaskStartScheduler+0x118>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e04:	461a      	mov	r2, r3
 8003e06:	2037      	movs	r0, #55	; 0x37
 8003e08:	f7fd fdb8 	bl	800197c <prvTraceStoreEvent2>
 8003e0c:	4b12      	ldr	r3, [pc, #72]	; (8003e58 <vTaskStartScheduler+0x110>)
 8003e0e:	2202      	movs	r2, #2
 8003e10:	601a      	str	r2, [r3, #0]

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003e12:	f000 fc45 	bl	80046a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003e16:	e00f      	b.n	8003e38 <vTaskStartScheduler+0xf0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1e:	d10b      	bne.n	8003e38 <vTaskStartScheduler+0xf0>
 8003e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e24:	b672      	cpsid	i
 8003e26:	f383 8811 	msr	BASEPRI, r3
 8003e2a:	f3bf 8f6f 	isb	sy
 8003e2e:	f3bf 8f4f 	dsb	sy
 8003e32:	b662      	cpsie	i
 8003e34:	60fb      	str	r3, [r7, #12]
 8003e36:	e7fe      	b.n	8003e36 <vTaskStartScheduler+0xee>
}
 8003e38:	bf00      	nop
 8003e3a:	3718      	adds	r7, #24
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	08005184 	.word	0x08005184
 8003e44:	080042f1 	.word	0x080042f1
 8003e48:	20001510 	.word	0x20001510
 8003e4c:	2000150c 	.word	0x2000150c
 8003e50:	200014f8 	.word	0x200014f8
 8003e54:	200014f0 	.word	0x200014f0
 8003e58:	200013e8 	.word	0x200013e8
 8003e5c:	20000014 	.word	0x20000014
 8003e60:	200013ec 	.word	0x200013ec

08003e64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003e68:	4b04      	ldr	r3, [pc, #16]	; (8003e7c <vTaskSuspendAll+0x18>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	4a03      	ldr	r2, [pc, #12]	; (8003e7c <vTaskSuspendAll+0x18>)
 8003e70:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003e72:	bf00      	nop
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	20001514 	.word	0x20001514

08003e80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e86:	2300      	movs	r3, #0
 8003e88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e8e:	4b4a      	ldr	r3, [pc, #296]	; (8003fb8 <xTaskResumeAll+0x138>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10b      	bne.n	8003eae <xTaskResumeAll+0x2e>
 8003e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9a:	b672      	cpsid	i
 8003e9c:	f383 8811 	msr	BASEPRI, r3
 8003ea0:	f3bf 8f6f 	isb	sy
 8003ea4:	f3bf 8f4f 	dsb	sy
 8003ea8:	b662      	cpsie	i
 8003eaa:	603b      	str	r3, [r7, #0]
 8003eac:	e7fe      	b.n	8003eac <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003eae:	f000 fc85 	bl	80047bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003eb2:	4b41      	ldr	r3, [pc, #260]	; (8003fb8 <xTaskResumeAll+0x138>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	4a3f      	ldr	r2, [pc, #252]	; (8003fb8 <xTaskResumeAll+0x138>)
 8003eba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ebc:	4b3e      	ldr	r3, [pc, #248]	; (8003fb8 <xTaskResumeAll+0x138>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d171      	bne.n	8003fa8 <xTaskResumeAll+0x128>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ec4:	4b3d      	ldr	r3, [pc, #244]	; (8003fbc <xTaskResumeAll+0x13c>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d06d      	beq.n	8003fa8 <xTaskResumeAll+0x128>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ecc:	e03e      	b.n	8003f4c <xTaskResumeAll+0xcc>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ece:	4b3c      	ldr	r3, [pc, #240]	; (8003fc0 <xTaskResumeAll+0x140>)
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	3318      	adds	r3, #24
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7ff fccb 	bl	8003876 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	3304      	adds	r3, #4
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7ff fcc6 	bl	8003876 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f7fd f867 	bl	8000fbe <prvTraceGetTaskNumberHigh16>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	4b33      	ldr	r3, [pc, #204]	; (8003fc4 <xTaskResumeAll+0x144>)
 8003ef6:	881b      	ldrh	r3, [r3, #0]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d004      	beq.n	8003f0a <xTaskResumeAll+0x8a>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	4619      	mov	r1, r3
 8003f04:	2030      	movs	r0, #48	; 0x30
 8003f06:	f7fd fce5 	bl	80018d4 <prvTraceStoreEvent1>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0e:	2201      	movs	r2, #1
 8003f10:	409a      	lsls	r2, r3
 8003f12:	4b2d      	ldr	r3, [pc, #180]	; (8003fc8 <xTaskResumeAll+0x148>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	4a2b      	ldr	r2, [pc, #172]	; (8003fc8 <xTaskResumeAll+0x148>)
 8003f1a:	6013      	str	r3, [r2, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f20:	4613      	mov	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4413      	add	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	4a28      	ldr	r2, [pc, #160]	; (8003fcc <xTaskResumeAll+0x14c>)
 8003f2a:	441a      	add	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	3304      	adds	r3, #4
 8003f30:	4619      	mov	r1, r3
 8003f32:	4610      	mov	r0, r2
 8003f34:	f7ff fc42 	bl	80037bc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f3c:	4b24      	ldr	r3, [pc, #144]	; (8003fd0 <xTaskResumeAll+0x150>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d302      	bcc.n	8003f4c <xTaskResumeAll+0xcc>
					{
						xYieldPending = pdTRUE;
 8003f46:	4b23      	ldr	r3, [pc, #140]	; (8003fd4 <xTaskResumeAll+0x154>)
 8003f48:	2201      	movs	r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f4c:	4b1c      	ldr	r3, [pc, #112]	; (8003fc0 <xTaskResumeAll+0x140>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1bc      	bne.n	8003ece <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <xTaskResumeAll+0xde>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003f5a:	f000 fa7d 	bl	8004458 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003f5e:	4b1e      	ldr	r3, [pc, #120]	; (8003fd8 <xTaskResumeAll+0x158>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d010      	beq.n	8003f8c <xTaskResumeAll+0x10c>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003f6a:	f000 f839 	bl	8003fe0 <xTaskIncrementTick>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d002      	beq.n	8003f7a <xTaskResumeAll+0xfa>
							{
								xYieldPending = pdTRUE;
 8003f74:	4b17      	ldr	r3, [pc, #92]	; (8003fd4 <xTaskResumeAll+0x154>)
 8003f76:	2201      	movs	r2, #1
 8003f78:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1f1      	bne.n	8003f6a <xTaskResumeAll+0xea>

						uxPendedTicks = 0;
 8003f86:	4b14      	ldr	r3, [pc, #80]	; (8003fd8 <xTaskResumeAll+0x158>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003f8c:	4b11      	ldr	r3, [pc, #68]	; (8003fd4 <xTaskResumeAll+0x154>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d009      	beq.n	8003fa8 <xTaskResumeAll+0x128>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003f94:	2301      	movs	r3, #1
 8003f96:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f98:	4b10      	ldr	r3, [pc, #64]	; (8003fdc <xTaskResumeAll+0x15c>)
 8003f9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f9e:	601a      	str	r2, [r3, #0]
 8003fa0:	f3bf 8f4f 	dsb	sy
 8003fa4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003fa8:	f000 fc3a 	bl	8004820 <vPortExitCritical>

	return xAlreadyYielded;
 8003fac:	68bb      	ldr	r3, [r7, #8]
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	20001514 	.word	0x20001514
 8003fbc:	200014ec 	.word	0x200014ec
 8003fc0:	200014ac 	.word	0x200014ac
 8003fc4:	20000014 	.word	0x20000014
 8003fc8:	200014f4 	.word	0x200014f4
 8003fcc:	200013f0 	.word	0x200013f0
 8003fd0:	200013ec 	.word	0x200013ec
 8003fd4:	20001500 	.word	0x20001500
 8003fd8:	200014fc 	.word	0x200014fc
 8003fdc:	e000ed04 	.word	0xe000ed04

08003fe0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
 8003fea:	4b5d      	ldr	r3, [pc, #372]	; (8004160 <xTaskIncrementTick+0x180>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d003      	beq.n	8003ffa <xTaskIncrementTick+0x1a>
 8003ff2:	4b5c      	ldr	r3, [pc, #368]	; (8004164 <xTaskIncrementTick+0x184>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d104      	bne.n	8004004 <xTaskIncrementTick+0x24>
 8003ffa:	4b5b      	ldr	r3, [pc, #364]	; (8004168 <xTaskIncrementTick+0x188>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	3301      	adds	r3, #1
 8004000:	4a59      	ldr	r2, [pc, #356]	; (8004168 <xTaskIncrementTick+0x188>)
 8004002:	6013      	str	r3, [r2, #0]
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004004:	4b56      	ldr	r3, [pc, #344]	; (8004160 <xTaskIncrementTick+0x180>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	f040 8099 	bne.w	8004140 <xTaskIncrementTick+0x160>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800400e:	4b57      	ldr	r3, [pc, #348]	; (800416c <xTaskIncrementTick+0x18c>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	3301      	adds	r3, #1
 8004014:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004016:	4a55      	ldr	r2, [pc, #340]	; (800416c <xTaskIncrementTick+0x18c>)
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d121      	bne.n	8004066 <xTaskIncrementTick+0x86>
		{
			taskSWITCH_DELAYED_LISTS();
 8004022:	4b53      	ldr	r3, [pc, #332]	; (8004170 <xTaskIncrementTick+0x190>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00b      	beq.n	8004044 <xTaskIncrementTick+0x64>
 800402c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004030:	b672      	cpsid	i
 8004032:	f383 8811 	msr	BASEPRI, r3
 8004036:	f3bf 8f6f 	isb	sy
 800403a:	f3bf 8f4f 	dsb	sy
 800403e:	b662      	cpsie	i
 8004040:	603b      	str	r3, [r7, #0]
 8004042:	e7fe      	b.n	8004042 <xTaskIncrementTick+0x62>
 8004044:	4b4a      	ldr	r3, [pc, #296]	; (8004170 <xTaskIncrementTick+0x190>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	60fb      	str	r3, [r7, #12]
 800404a:	4b4a      	ldr	r3, [pc, #296]	; (8004174 <xTaskIncrementTick+0x194>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a48      	ldr	r2, [pc, #288]	; (8004170 <xTaskIncrementTick+0x190>)
 8004050:	6013      	str	r3, [r2, #0]
 8004052:	4a48      	ldr	r2, [pc, #288]	; (8004174 <xTaskIncrementTick+0x194>)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6013      	str	r3, [r2, #0]
 8004058:	4b47      	ldr	r3, [pc, #284]	; (8004178 <xTaskIncrementTick+0x198>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	3301      	adds	r3, #1
 800405e:	4a46      	ldr	r2, [pc, #280]	; (8004178 <xTaskIncrementTick+0x198>)
 8004060:	6013      	str	r3, [r2, #0]
 8004062:	f000 f9f9 	bl	8004458 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004066:	4b45      	ldr	r3, [pc, #276]	; (800417c <xTaskIncrementTick+0x19c>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	429a      	cmp	r2, r3
 800406e:	d358      	bcc.n	8004122 <xTaskIncrementTick+0x142>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004070:	4b3f      	ldr	r3, [pc, #252]	; (8004170 <xTaskIncrementTick+0x190>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d104      	bne.n	8004084 <xTaskIncrementTick+0xa4>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800407a:	4b40      	ldr	r3, [pc, #256]	; (800417c <xTaskIncrementTick+0x19c>)
 800407c:	f04f 32ff 	mov.w	r2, #4294967295
 8004080:	601a      	str	r2, [r3, #0]
					break;
 8004082:	e04e      	b.n	8004122 <xTaskIncrementTick+0x142>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004084:	4b3a      	ldr	r3, [pc, #232]	; (8004170 <xTaskIncrementTick+0x190>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	429a      	cmp	r2, r3
 800409a:	d203      	bcs.n	80040a4 <xTaskIncrementTick+0xc4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800409c:	4a37      	ldr	r2, [pc, #220]	; (800417c <xTaskIncrementTick+0x19c>)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80040a2:	e03e      	b.n	8004122 <xTaskIncrementTick+0x142>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	3304      	adds	r3, #4
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7ff fbe4 	bl	8003876 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d004      	beq.n	80040c0 <xTaskIncrementTick+0xe0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	3318      	adds	r3, #24
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7ff fbdb 	bl	8003876 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80040c0:	68b8      	ldr	r0, [r7, #8]
 80040c2:	f7fc ff7c 	bl	8000fbe <prvTraceGetTaskNumberHigh16>
 80040c6:	4603      	mov	r3, r0
 80040c8:	461a      	mov	r2, r3
 80040ca:	4b2d      	ldr	r3, [pc, #180]	; (8004180 <xTaskIncrementTick+0x1a0>)
 80040cc:	881b      	ldrh	r3, [r3, #0]
 80040ce:	4013      	ands	r3, r2
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d004      	beq.n	80040e0 <xTaskIncrementTick+0x100>
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	4619      	mov	r1, r3
 80040da:	2030      	movs	r0, #48	; 0x30
 80040dc:	f7fd fbfa 	bl	80018d4 <prvTraceStoreEvent1>
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e4:	2201      	movs	r2, #1
 80040e6:	409a      	lsls	r2, r3
 80040e8:	4b26      	ldr	r3, [pc, #152]	; (8004184 <xTaskIncrementTick+0x1a4>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	4a25      	ldr	r2, [pc, #148]	; (8004184 <xTaskIncrementTick+0x1a4>)
 80040f0:	6013      	str	r3, [r2, #0]
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f6:	4613      	mov	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4413      	add	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4a22      	ldr	r2, [pc, #136]	; (8004188 <xTaskIncrementTick+0x1a8>)
 8004100:	441a      	add	r2, r3
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	3304      	adds	r3, #4
 8004106:	4619      	mov	r1, r3
 8004108:	4610      	mov	r0, r2
 800410a:	f7ff fb57 	bl	80037bc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004112:	4b1e      	ldr	r3, [pc, #120]	; (800418c <xTaskIncrementTick+0x1ac>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004118:	429a      	cmp	r2, r3
 800411a:	d3a9      	bcc.n	8004070 <xTaskIncrementTick+0x90>
						{
							xSwitchRequired = pdTRUE;
 800411c:	2301      	movs	r3, #1
 800411e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004120:	e7a6      	b.n	8004070 <xTaskIncrementTick+0x90>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004122:	4b1a      	ldr	r3, [pc, #104]	; (800418c <xTaskIncrementTick+0x1ac>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004128:	4917      	ldr	r1, [pc, #92]	; (8004188 <xTaskIncrementTick+0x1a8>)
 800412a:	4613      	mov	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4413      	add	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	440b      	add	r3, r1
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d907      	bls.n	800414a <xTaskIncrementTick+0x16a>
			{
				xSwitchRequired = pdTRUE;
 800413a:	2301      	movs	r3, #1
 800413c:	617b      	str	r3, [r7, #20]
 800413e:	e004      	b.n	800414a <xTaskIncrementTick+0x16a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004140:	4b08      	ldr	r3, [pc, #32]	; (8004164 <xTaskIncrementTick+0x184>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	3301      	adds	r3, #1
 8004146:	4a07      	ldr	r2, [pc, #28]	; (8004164 <xTaskIncrementTick+0x184>)
 8004148:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800414a:	4b11      	ldr	r3, [pc, #68]	; (8004190 <xTaskIncrementTick+0x1b0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <xTaskIncrementTick+0x176>
		{
			xSwitchRequired = pdTRUE;
 8004152:	2301      	movs	r3, #1
 8004154:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004156:	697b      	ldr	r3, [r7, #20]
}
 8004158:	4618      	mov	r0, r3
 800415a:	3718      	adds	r7, #24
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	20001514 	.word	0x20001514
 8004164:	200014fc 	.word	0x200014fc
 8004168:	200013d0 	.word	0x200013d0
 800416c:	200014f0 	.word	0x200014f0
 8004170:	200014a4 	.word	0x200014a4
 8004174:	200014a8 	.word	0x200014a8
 8004178:	20001504 	.word	0x20001504
 800417c:	2000150c 	.word	0x2000150c
 8004180:	20000014 	.word	0x20000014
 8004184:	200014f4 	.word	0x200014f4
 8004188:	200013f0 	.word	0x200013f0
 800418c:	200013ec 	.word	0x200013ec
 8004190:	20001500 	.word	0x20001500

08004194 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800419a:	4b39      	ldr	r3, [pc, #228]	; (8004280 <vTaskSwitchContext+0xec>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80041a2:	4b38      	ldr	r3, [pc, #224]	; (8004284 <vTaskSwitchContext+0xf0>)
 80041a4:	2201      	movs	r2, #1
 80041a6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80041a8:	e066      	b.n	8004278 <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 80041aa:	4b36      	ldr	r3, [pc, #216]	; (8004284 <vTaskSwitchContext+0xf0>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041b0:	4b35      	ldr	r3, [pc, #212]	; (8004288 <vTaskSwitchContext+0xf4>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	fab3 f383 	clz	r3, r3
 80041bc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80041be:	7afb      	ldrb	r3, [r7, #11]
 80041c0:	f1c3 031f 	rsb	r3, r3, #31
 80041c4:	617b      	str	r3, [r7, #20]
 80041c6:	4931      	ldr	r1, [pc, #196]	; (800428c <vTaskSwitchContext+0xf8>)
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	4613      	mov	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	440b      	add	r3, r1
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10b      	bne.n	80041f2 <vTaskSwitchContext+0x5e>
	__asm volatile
 80041da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041de:	b672      	cpsid	i
 80041e0:	f383 8811 	msr	BASEPRI, r3
 80041e4:	f3bf 8f6f 	isb	sy
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	b662      	cpsie	i
 80041ee:	607b      	str	r3, [r7, #4]
 80041f0:	e7fe      	b.n	80041f0 <vTaskSwitchContext+0x5c>
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	4613      	mov	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4413      	add	r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	4a23      	ldr	r2, [pc, #140]	; (800428c <vTaskSwitchContext+0xf8>)
 80041fe:	4413      	add	r3, r2
 8004200:	613b      	str	r3, [r7, #16]
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	605a      	str	r2, [r3, #4]
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	3308      	adds	r3, #8
 8004214:	429a      	cmp	r2, r3
 8004216:	d104      	bne.n	8004222 <vTaskSwitchContext+0x8e>
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	605a      	str	r2, [r3, #4]
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	4a19      	ldr	r2, [pc, #100]	; (8004290 <vTaskSwitchContext+0xfc>)
 800422a:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 800422c:	4b19      	ldr	r3, [pc, #100]	; (8004294 <vTaskSwitchContext+0x100>)
 800422e:	2201      	movs	r2, #1
 8004230:	601a      	str	r2, [r3, #0]
 8004232:	f7fc ff81 	bl	8001138 <prvTraceGetCurrentTaskHandle>
 8004236:	4603      	mov	r3, r0
 8004238:	4618      	mov	r0, r3
 800423a:	f7fc fec0 	bl	8000fbe <prvTraceGetTaskNumberHigh16>
 800423e:	4603      	mov	r3, r0
 8004240:	461a      	mov	r2, r3
 8004242:	4b15      	ldr	r3, [pc, #84]	; (8004298 <vTaskSwitchContext+0x104>)
 8004244:	881b      	ldrh	r3, [r3, #0]
 8004246:	4013      	ands	r3, r2
 8004248:	b29b      	uxth	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d011      	beq.n	8004272 <vTaskSwitchContext+0xde>
 800424e:	4b10      	ldr	r3, [pc, #64]	; (8004290 <vTaskSwitchContext+0xfc>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4618      	mov	r0, r3
 8004254:	f7fc ff78 	bl	8001148 <prvIsNewTCB>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d009      	beq.n	8004272 <vTaskSwitchContext+0xde>
 800425e:	4b0c      	ldr	r3, [pc, #48]	; (8004290 <vTaskSwitchContext+0xfc>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4619      	mov	r1, r3
 8004264:	4b0a      	ldr	r3, [pc, #40]	; (8004290 <vTaskSwitchContext+0xfc>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426a:	461a      	mov	r2, r3
 800426c:	2037      	movs	r0, #55	; 0x37
 800426e:	f7fd fb85 	bl	800197c <prvTraceStoreEvent2>
 8004272:	4b08      	ldr	r3, [pc, #32]	; (8004294 <vTaskSwitchContext+0x100>)
 8004274:	2202      	movs	r2, #2
 8004276:	601a      	str	r2, [r3, #0]
}
 8004278:	bf00      	nop
 800427a:	3718      	adds	r7, #24
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	20001514 	.word	0x20001514
 8004284:	20001500 	.word	0x20001500
 8004288:	200014f4 	.word	0x200014f4
 800428c:	200013f0 	.word	0x200013f0
 8004290:	200013ec 	.word	0x200013ec
 8004294:	200013e8 	.word	0x200013e8
 8004298:	20000014 	.word	0x20000014

0800429c <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t const *pxTCB;

		if( xTask != NULL )
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d005      	beq.n	80042b6 <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = xTask;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042b2:	60fb      	str	r3, [r7, #12]
 80042b4:	e001      	b.n	80042ba <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
 80042b6:	2300      	movs	r3, #0
 80042b8:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
 80042ba:	68fb      	ldr	r3, [r7, #12]
	}
 80042bc:	4618      	mov	r0, r3
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;

		if( xTask != NULL )
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d004      	beq.n	80042e2 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = xTask;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	683a      	ldr	r2, [r7, #0]
 80042e0:	649a      	str	r2, [r3, #72]	; 0x48
		}
	}
 80042e2:	bf00      	nop
 80042e4:	3714      	adds	r7, #20
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
	...

080042f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80042f8:	f000 f852 	bl	80043a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80042fc:	4b06      	ldr	r3, [pc, #24]	; (8004318 <prvIdleTask+0x28>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d9f9      	bls.n	80042f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004304:	4b05      	ldr	r3, [pc, #20]	; (800431c <prvIdleTask+0x2c>)
 8004306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800430a:	601a      	str	r2, [r3, #0]
 800430c:	f3bf 8f4f 	dsb	sy
 8004310:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004314:	e7f0      	b.n	80042f8 <prvIdleTask+0x8>
 8004316:	bf00      	nop
 8004318:	200013f0 	.word	0x200013f0
 800431c:	e000ed04 	.word	0xe000ed04

08004320 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004326:	2300      	movs	r3, #0
 8004328:	607b      	str	r3, [r7, #4]
 800432a:	e00c      	b.n	8004346 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	4613      	mov	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4413      	add	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	4a12      	ldr	r2, [pc, #72]	; (8004380 <prvInitialiseTaskLists+0x60>)
 8004338:	4413      	add	r3, r2
 800433a:	4618      	mov	r0, r3
 800433c:	f7ff fa11 	bl	8003762 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3301      	adds	r3, #1
 8004344:	607b      	str	r3, [r7, #4]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b06      	cmp	r3, #6
 800434a:	d9ef      	bls.n	800432c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800434c:	480d      	ldr	r0, [pc, #52]	; (8004384 <prvInitialiseTaskLists+0x64>)
 800434e:	f7ff fa08 	bl	8003762 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004352:	480d      	ldr	r0, [pc, #52]	; (8004388 <prvInitialiseTaskLists+0x68>)
 8004354:	f7ff fa05 	bl	8003762 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004358:	480c      	ldr	r0, [pc, #48]	; (800438c <prvInitialiseTaskLists+0x6c>)
 800435a:	f7ff fa02 	bl	8003762 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800435e:	480c      	ldr	r0, [pc, #48]	; (8004390 <prvInitialiseTaskLists+0x70>)
 8004360:	f7ff f9ff 	bl	8003762 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004364:	480b      	ldr	r0, [pc, #44]	; (8004394 <prvInitialiseTaskLists+0x74>)
 8004366:	f7ff f9fc 	bl	8003762 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800436a:	4b0b      	ldr	r3, [pc, #44]	; (8004398 <prvInitialiseTaskLists+0x78>)
 800436c:	4a05      	ldr	r2, [pc, #20]	; (8004384 <prvInitialiseTaskLists+0x64>)
 800436e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004370:	4b0a      	ldr	r3, [pc, #40]	; (800439c <prvInitialiseTaskLists+0x7c>)
 8004372:	4a05      	ldr	r2, [pc, #20]	; (8004388 <prvInitialiseTaskLists+0x68>)
 8004374:	601a      	str	r2, [r3, #0]
}
 8004376:	bf00      	nop
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	200013f0 	.word	0x200013f0
 8004384:	2000147c 	.word	0x2000147c
 8004388:	20001490 	.word	0x20001490
 800438c:	200014ac 	.word	0x200014ac
 8004390:	200014c0 	.word	0x200014c0
 8004394:	200014d8 	.word	0x200014d8
 8004398:	200014a4 	.word	0x200014a4
 800439c:	200014a8 	.word	0x200014a8

080043a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043a6:	e019      	b.n	80043dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80043a8:	f000 fa08 	bl	80047bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043ac:	4b0f      	ldr	r3, [pc, #60]	; (80043ec <prvCheckTasksWaitingTermination+0x4c>)
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3304      	adds	r3, #4
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7ff fa5c 	bl	8003876 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80043be:	4b0c      	ldr	r3, [pc, #48]	; (80043f0 <prvCheckTasksWaitingTermination+0x50>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	3b01      	subs	r3, #1
 80043c4:	4a0a      	ldr	r2, [pc, #40]	; (80043f0 <prvCheckTasksWaitingTermination+0x50>)
 80043c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80043c8:	4b0a      	ldr	r3, [pc, #40]	; (80043f4 <prvCheckTasksWaitingTermination+0x54>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	3b01      	subs	r3, #1
 80043ce:	4a09      	ldr	r2, [pc, #36]	; (80043f4 <prvCheckTasksWaitingTermination+0x54>)
 80043d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80043d2:	f000 fa25 	bl	8004820 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f80e 	bl	80043f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043dc:	4b05      	ldr	r3, [pc, #20]	; (80043f4 <prvCheckTasksWaitingTermination+0x54>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1e1      	bne.n	80043a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80043e4:	bf00      	nop
 80043e6:	3708      	adds	r7, #8
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	200014c0 	.word	0x200014c0
 80043f0:	200014ec 	.word	0x200014ec
 80043f4:	200014d4 	.word	0x200014d4

080043f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004406:	2b00      	cmp	r3, #0
 8004408:	d108      	bne.n	800441c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440e:	4618      	mov	r0, r3
 8004410:	f000 fbac 	bl	8004b6c <vPortFree>
				vPortFree( pxTCB );
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 fba9 	bl	8004b6c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800441a:	e019      	b.n	8004450 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004422:	2b01      	cmp	r3, #1
 8004424:	d103      	bne.n	800442e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 fba0 	bl	8004b6c <vPortFree>
	}
 800442c:	e010      	b.n	8004450 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004434:	2b02      	cmp	r3, #2
 8004436:	d00b      	beq.n	8004450 <prvDeleteTCB+0x58>
 8004438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443c:	b672      	cpsid	i
 800443e:	f383 8811 	msr	BASEPRI, r3
 8004442:	f3bf 8f6f 	isb	sy
 8004446:	f3bf 8f4f 	dsb	sy
 800444a:	b662      	cpsie	i
 800444c:	60fb      	str	r3, [r7, #12]
 800444e:	e7fe      	b.n	800444e <prvDeleteTCB+0x56>
	}
 8004450:	bf00      	nop
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800445e:	4b0c      	ldr	r3, [pc, #48]	; (8004490 <prvResetNextTaskUnblockTime+0x38>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d104      	bne.n	8004472 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004468:	4b0a      	ldr	r3, [pc, #40]	; (8004494 <prvResetNextTaskUnblockTime+0x3c>)
 800446a:	f04f 32ff 	mov.w	r2, #4294967295
 800446e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004470:	e008      	b.n	8004484 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004472:	4b07      	ldr	r3, [pc, #28]	; (8004490 <prvResetNextTaskUnblockTime+0x38>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	4a04      	ldr	r2, [pc, #16]	; (8004494 <prvResetNextTaskUnblockTime+0x3c>)
 8004482:	6013      	str	r3, [r2, #0]
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	200014a4 	.word	0x200014a4
 8004494:	2000150c 	.word	0x2000150c

08004498 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800449e:	4b05      	ldr	r3, [pc, #20]	; (80044b4 <xTaskGetCurrentTaskHandle+0x1c>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	607b      	str	r3, [r7, #4]

		return xReturn;
 80044a4:	687b      	ldr	r3, [r7, #4]
	}
 80044a6:	4618      	mov	r0, r3
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	200013ec 	.word	0x200013ec

080044b8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80044c2:	4b29      	ldr	r3, [pc, #164]	; (8004568 <prvAddCurrentTaskToDelayedList+0xb0>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044c8:	4b28      	ldr	r3, [pc, #160]	; (800456c <prvAddCurrentTaskToDelayedList+0xb4>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	3304      	adds	r3, #4
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7ff f9d1 	bl	8003876 <uxListRemove>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10b      	bne.n	80044f2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80044da:	4b24      	ldr	r3, [pc, #144]	; (800456c <prvAddCurrentTaskToDelayedList+0xb4>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e0:	2201      	movs	r2, #1
 80044e2:	fa02 f303 	lsl.w	r3, r2, r3
 80044e6:	43da      	mvns	r2, r3
 80044e8:	4b21      	ldr	r3, [pc, #132]	; (8004570 <prvAddCurrentTaskToDelayedList+0xb8>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4013      	ands	r3, r2
 80044ee:	4a20      	ldr	r2, [pc, #128]	; (8004570 <prvAddCurrentTaskToDelayedList+0xb8>)
 80044f0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f8:	d10a      	bne.n	8004510 <prvAddCurrentTaskToDelayedList+0x58>
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d007      	beq.n	8004510 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004500:	4b1a      	ldr	r3, [pc, #104]	; (800456c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	3304      	adds	r3, #4
 8004506:	4619      	mov	r1, r3
 8004508:	481a      	ldr	r0, [pc, #104]	; (8004574 <prvAddCurrentTaskToDelayedList+0xbc>)
 800450a:	f7ff f957 	bl	80037bc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800450e:	e026      	b.n	800455e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4413      	add	r3, r2
 8004516:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004518:	4b14      	ldr	r3, [pc, #80]	; (800456c <prvAddCurrentTaskToDelayedList+0xb4>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004520:	68ba      	ldr	r2, [r7, #8]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	429a      	cmp	r2, r3
 8004526:	d209      	bcs.n	800453c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004528:	4b13      	ldr	r3, [pc, #76]	; (8004578 <prvAddCurrentTaskToDelayedList+0xc0>)
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	4b0f      	ldr	r3, [pc, #60]	; (800456c <prvAddCurrentTaskToDelayedList+0xb4>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	3304      	adds	r3, #4
 8004532:	4619      	mov	r1, r3
 8004534:	4610      	mov	r0, r2
 8004536:	f7ff f965 	bl	8003804 <vListInsert>
}
 800453a:	e010      	b.n	800455e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800453c:	4b0f      	ldr	r3, [pc, #60]	; (800457c <prvAddCurrentTaskToDelayedList+0xc4>)
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	4b0a      	ldr	r3, [pc, #40]	; (800456c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	3304      	adds	r3, #4
 8004546:	4619      	mov	r1, r3
 8004548:	4610      	mov	r0, r2
 800454a:	f7ff f95b 	bl	8003804 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800454e:	4b0c      	ldr	r3, [pc, #48]	; (8004580 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	429a      	cmp	r2, r3
 8004556:	d202      	bcs.n	800455e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004558:	4a09      	ldr	r2, [pc, #36]	; (8004580 <prvAddCurrentTaskToDelayedList+0xc8>)
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	6013      	str	r3, [r2, #0]
}
 800455e:	bf00      	nop
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	200014f0 	.word	0x200014f0
 800456c:	200013ec 	.word	0x200013ec
 8004570:	200014f4 	.word	0x200014f4
 8004574:	200014d8 	.word	0x200014d8
 8004578:	200014a8 	.word	0x200014a8
 800457c:	200014a4 	.word	0x200014a4
 8004580:	2000150c 	.word	0x2000150c

08004584 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	3b04      	subs	r3, #4
 8004594:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800459c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	3b04      	subs	r3, #4
 80045a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f023 0201 	bic.w	r2, r3, #1
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	3b04      	subs	r3, #4
 80045b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80045b4:	4a0c      	ldr	r2, [pc, #48]	; (80045e8 <pxPortInitialiseStack+0x64>)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	3b14      	subs	r3, #20
 80045be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	3b04      	subs	r3, #4
 80045ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f06f 0202 	mvn.w	r2, #2
 80045d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	3b20      	subs	r3, #32
 80045d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80045da:	68fb      	ldr	r3, [r7, #12]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3714      	adds	r7, #20
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr
 80045e8:	080045ed 	.word	0x080045ed

080045ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80045f2:	2300      	movs	r3, #0
 80045f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80045f6:	4b13      	ldr	r3, [pc, #76]	; (8004644 <prvTaskExitError+0x58>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fe:	d00b      	beq.n	8004618 <prvTaskExitError+0x2c>
 8004600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004604:	b672      	cpsid	i
 8004606:	f383 8811 	msr	BASEPRI, r3
 800460a:	f3bf 8f6f 	isb	sy
 800460e:	f3bf 8f4f 	dsb	sy
 8004612:	b662      	cpsie	i
 8004614:	60fb      	str	r3, [r7, #12]
 8004616:	e7fe      	b.n	8004616 <prvTaskExitError+0x2a>
 8004618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461c:	b672      	cpsid	i
 800461e:	f383 8811 	msr	BASEPRI, r3
 8004622:	f3bf 8f6f 	isb	sy
 8004626:	f3bf 8f4f 	dsb	sy
 800462a:	b662      	cpsie	i
 800462c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800462e:	bf00      	nop
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0fc      	beq.n	8004630 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004636:	bf00      	nop
 8004638:	3714      	adds	r7, #20
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	20000020 	.word	0x20000020
	...

08004650 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004650:	4b07      	ldr	r3, [pc, #28]	; (8004670 <pxCurrentTCBConst2>)
 8004652:	6819      	ldr	r1, [r3, #0]
 8004654:	6808      	ldr	r0, [r1, #0]
 8004656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800465a:	f380 8809 	msr	PSP, r0
 800465e:	f3bf 8f6f 	isb	sy
 8004662:	f04f 0000 	mov.w	r0, #0
 8004666:	f380 8811 	msr	BASEPRI, r0
 800466a:	4770      	bx	lr
 800466c:	f3af 8000 	nop.w

08004670 <pxCurrentTCBConst2>:
 8004670:	200013ec 	.word	0x200013ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004674:	bf00      	nop
 8004676:	bf00      	nop

08004678 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004678:	4808      	ldr	r0, [pc, #32]	; (800469c <prvPortStartFirstTask+0x24>)
 800467a:	6800      	ldr	r0, [r0, #0]
 800467c:	6800      	ldr	r0, [r0, #0]
 800467e:	f380 8808 	msr	MSP, r0
 8004682:	f04f 0000 	mov.w	r0, #0
 8004686:	f380 8814 	msr	CONTROL, r0
 800468a:	b662      	cpsie	i
 800468c:	b661      	cpsie	f
 800468e:	f3bf 8f4f 	dsb	sy
 8004692:	f3bf 8f6f 	isb	sy
 8004696:	df00      	svc	0
 8004698:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800469a:	bf00      	nop
 800469c:	e000ed08 	.word	0xe000ed08

080046a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80046a6:	4b3f      	ldr	r3, [pc, #252]	; (80047a4 <xPortStartScheduler+0x104>)
 80046a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	22ff      	movs	r2, #255	; 0xff
 80046b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80046c0:	79fb      	ldrb	r3, [r7, #7]
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80046c8:	b2da      	uxtb	r2, r3
 80046ca:	4b37      	ldr	r3, [pc, #220]	; (80047a8 <xPortStartScheduler+0x108>)
 80046cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80046ce:	4b37      	ldr	r3, [pc, #220]	; (80047ac <xPortStartScheduler+0x10c>)
 80046d0:	2207      	movs	r2, #7
 80046d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046d4:	e009      	b.n	80046ea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80046d6:	4b35      	ldr	r3, [pc, #212]	; (80047ac <xPortStartScheduler+0x10c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	3b01      	subs	r3, #1
 80046dc:	4a33      	ldr	r2, [pc, #204]	; (80047ac <xPortStartScheduler+0x10c>)
 80046de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80046e0:	79fb      	ldrb	r3, [r7, #7]
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	005b      	lsls	r3, r3, #1
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046ea:	79fb      	ldrb	r3, [r7, #7]
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f2:	2b80      	cmp	r3, #128	; 0x80
 80046f4:	d0ef      	beq.n	80046d6 <xPortStartScheduler+0x36>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 80046f6:	4b2d      	ldr	r3, [pc, #180]	; (80047ac <xPortStartScheduler+0x10c>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f1c3 0307 	rsb	r3, r3, #7
 80046fe:	2b04      	cmp	r3, #4
 8004700:	d00b      	beq.n	800471a <xPortStartScheduler+0x7a>
 8004702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004706:	b672      	cpsid	i
 8004708:	f383 8811 	msr	BASEPRI, r3
 800470c:	f3bf 8f6f 	isb	sy
 8004710:	f3bf 8f4f 	dsb	sy
 8004714:	b662      	cpsie	i
 8004716:	613b      	str	r3, [r7, #16]
 8004718:	e7fe      	b.n	8004718 <xPortStartScheduler+0x78>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800471a:	4b24      	ldr	r3, [pc, #144]	; (80047ac <xPortStartScheduler+0x10c>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f1c3 0307 	rsb	r3, r3, #7
 8004722:	2b04      	cmp	r3, #4
 8004724:	d00b      	beq.n	800473e <xPortStartScheduler+0x9e>
 8004726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472a:	b672      	cpsid	i
 800472c:	f383 8811 	msr	BASEPRI, r3
 8004730:	f3bf 8f6f 	isb	sy
 8004734:	f3bf 8f4f 	dsb	sy
 8004738:	b662      	cpsie	i
 800473a:	60fb      	str	r3, [r7, #12]
 800473c:	e7fe      	b.n	800473c <xPortStartScheduler+0x9c>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800473e:	4b1b      	ldr	r3, [pc, #108]	; (80047ac <xPortStartScheduler+0x10c>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	021b      	lsls	r3, r3, #8
 8004744:	4a19      	ldr	r2, [pc, #100]	; (80047ac <xPortStartScheduler+0x10c>)
 8004746:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004748:	4b18      	ldr	r3, [pc, #96]	; (80047ac <xPortStartScheduler+0x10c>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004750:	4a16      	ldr	r2, [pc, #88]	; (80047ac <xPortStartScheduler+0x10c>)
 8004752:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	b2da      	uxtb	r2, r3
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800475c:	4b14      	ldr	r3, [pc, #80]	; (80047b0 <xPortStartScheduler+0x110>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a13      	ldr	r2, [pc, #76]	; (80047b0 <xPortStartScheduler+0x110>)
 8004762:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004766:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004768:	4b11      	ldr	r3, [pc, #68]	; (80047b0 <xPortStartScheduler+0x110>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a10      	ldr	r2, [pc, #64]	; (80047b0 <xPortStartScheduler+0x110>)
 800476e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004772:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004774:	f000 f8da 	bl	800492c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004778:	4b0e      	ldr	r3, [pc, #56]	; (80047b4 <xPortStartScheduler+0x114>)
 800477a:	2200      	movs	r2, #0
 800477c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800477e:	f000 f8f9 	bl	8004974 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004782:	4b0d      	ldr	r3, [pc, #52]	; (80047b8 <xPortStartScheduler+0x118>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a0c      	ldr	r2, [pc, #48]	; (80047b8 <xPortStartScheduler+0x118>)
 8004788:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800478c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800478e:	f7ff ff73 	bl	8004678 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004792:	f7ff fcff 	bl	8004194 <vTaskSwitchContext>
	prvTaskExitError();
 8004796:	f7ff ff29 	bl	80045ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3718      	adds	r7, #24
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	e000e400 	.word	0xe000e400
 80047a8:	20001518 	.word	0x20001518
 80047ac:	2000151c 	.word	0x2000151c
 80047b0:	e000ed20 	.word	0xe000ed20
 80047b4:	20000020 	.word	0x20000020
 80047b8:	e000ef34 	.word	0xe000ef34

080047bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c6:	b672      	cpsid	i
 80047c8:	f383 8811 	msr	BASEPRI, r3
 80047cc:	f3bf 8f6f 	isb	sy
 80047d0:	f3bf 8f4f 	dsb	sy
 80047d4:	b662      	cpsie	i
 80047d6:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80047d8:	4b0f      	ldr	r3, [pc, #60]	; (8004818 <vPortEnterCritical+0x5c>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	3301      	adds	r3, #1
 80047de:	4a0e      	ldr	r2, [pc, #56]	; (8004818 <vPortEnterCritical+0x5c>)
 80047e0:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80047e2:	4b0d      	ldr	r3, [pc, #52]	; (8004818 <vPortEnterCritical+0x5c>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d110      	bne.n	800480c <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80047ea:	4b0c      	ldr	r3, [pc, #48]	; (800481c <vPortEnterCritical+0x60>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00b      	beq.n	800480c <vPortEnterCritical+0x50>
 80047f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f8:	b672      	cpsid	i
 80047fa:	f383 8811 	msr	BASEPRI, r3
 80047fe:	f3bf 8f6f 	isb	sy
 8004802:	f3bf 8f4f 	dsb	sy
 8004806:	b662      	cpsie	i
 8004808:	603b      	str	r3, [r7, #0]
 800480a:	e7fe      	b.n	800480a <vPortEnterCritical+0x4e>
	}
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr
 8004818:	20000020 	.word	0x20000020
 800481c:	e000ed04 	.word	0xe000ed04

08004820 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004826:	4b12      	ldr	r3, [pc, #72]	; (8004870 <vPortExitCritical+0x50>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10b      	bne.n	8004846 <vPortExitCritical+0x26>
 800482e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004832:	b672      	cpsid	i
 8004834:	f383 8811 	msr	BASEPRI, r3
 8004838:	f3bf 8f6f 	isb	sy
 800483c:	f3bf 8f4f 	dsb	sy
 8004840:	b662      	cpsie	i
 8004842:	607b      	str	r3, [r7, #4]
 8004844:	e7fe      	b.n	8004844 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8004846:	4b0a      	ldr	r3, [pc, #40]	; (8004870 <vPortExitCritical+0x50>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	3b01      	subs	r3, #1
 800484c:	4a08      	ldr	r2, [pc, #32]	; (8004870 <vPortExitCritical+0x50>)
 800484e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004850:	4b07      	ldr	r3, [pc, #28]	; (8004870 <vPortExitCritical+0x50>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d104      	bne.n	8004862 <vPortExitCritical+0x42>
 8004858:	2300      	movs	r3, #0
 800485a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004862:	bf00      	nop
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	20000020 	.word	0x20000020
	...

08004880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004880:	f3ef 8009 	mrs	r0, PSP
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	4b15      	ldr	r3, [pc, #84]	; (80048e0 <pxCurrentTCBConst>)
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	f01e 0f10 	tst.w	lr, #16
 8004890:	bf08      	it	eq
 8004892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800489a:	6010      	str	r0, [r2, #0]
 800489c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80048a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80048a4:	b672      	cpsid	i
 80048a6:	f380 8811 	msr	BASEPRI, r0
 80048aa:	f3bf 8f4f 	dsb	sy
 80048ae:	f3bf 8f6f 	isb	sy
 80048b2:	b662      	cpsie	i
 80048b4:	f7ff fc6e 	bl	8004194 <vTaskSwitchContext>
 80048b8:	f04f 0000 	mov.w	r0, #0
 80048bc:	f380 8811 	msr	BASEPRI, r0
 80048c0:	bc09      	pop	{r0, r3}
 80048c2:	6819      	ldr	r1, [r3, #0]
 80048c4:	6808      	ldr	r0, [r1, #0]
 80048c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ca:	f01e 0f10 	tst.w	lr, #16
 80048ce:	bf08      	it	eq
 80048d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80048d4:	f380 8809 	msr	PSP, r0
 80048d8:	f3bf 8f6f 	isb	sy
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop

080048e0 <pxCurrentTCBConst>:
 80048e0:	200013ec 	.word	0x200013ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80048e4:	bf00      	nop
 80048e6:	bf00      	nop

080048e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
	__asm volatile
 80048ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f2:	b672      	cpsid	i
 80048f4:	f383 8811 	msr	BASEPRI, r3
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	b662      	cpsie	i
 8004902:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004904:	f7ff fb6c 	bl	8003fe0 <xTaskIncrementTick>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800490e:	4b06      	ldr	r3, [pc, #24]	; (8004928 <SysTick_Handler+0x40>)
 8004910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004914:	601a      	str	r2, [r3, #0]
 8004916:	2300      	movs	r3, #0
 8004918:	603b      	str	r3, [r7, #0]
	__asm volatile
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004920:	bf00      	nop
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	e000ed04 	.word	0xe000ed04

0800492c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004930:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <vPortSetupTimerInterrupt+0x34>)
 8004932:	2200      	movs	r2, #0
 8004934:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004936:	4b0b      	ldr	r3, [pc, #44]	; (8004964 <vPortSetupTimerInterrupt+0x38>)
 8004938:	2200      	movs	r2, #0
 800493a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800493c:	4b0a      	ldr	r3, [pc, #40]	; (8004968 <vPortSetupTimerInterrupt+0x3c>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a0a      	ldr	r2, [pc, #40]	; (800496c <vPortSetupTimerInterrupt+0x40>)
 8004942:	fba2 2303 	umull	r2, r3, r2, r3
 8004946:	099b      	lsrs	r3, r3, #6
 8004948:	4a09      	ldr	r2, [pc, #36]	; (8004970 <vPortSetupTimerInterrupt+0x44>)
 800494a:	3b01      	subs	r3, #1
 800494c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800494e:	4b04      	ldr	r3, [pc, #16]	; (8004960 <vPortSetupTimerInterrupt+0x34>)
 8004950:	2207      	movs	r2, #7
 8004952:	601a      	str	r2, [r3, #0]
}
 8004954:	bf00      	nop
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	e000e010 	.word	0xe000e010
 8004964:	e000e018 	.word	0xe000e018
 8004968:	20000000 	.word	0x20000000
 800496c:	10624dd3 	.word	0x10624dd3
 8004970:	e000e014 	.word	0xe000e014

08004974 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004974:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004984 <vPortEnableVFP+0x10>
 8004978:	6801      	ldr	r1, [r0, #0]
 800497a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800497e:	6001      	str	r1, [r0, #0]
 8004980:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004982:	bf00      	nop
 8004984:	e000ed88 	.word	0xe000ed88

08004988 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b08a      	sub	sp, #40	; 0x28
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004990:	2300      	movs	r3, #0
 8004992:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004994:	f7ff fa66 	bl	8003e64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004998:	4b6d      	ldr	r3, [pc, #436]	; (8004b50 <pvPortMalloc+0x1c8>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d101      	bne.n	80049a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80049a0:	f000 f962 	bl	8004c68 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80049a4:	4b6b      	ldr	r3, [pc, #428]	; (8004b54 <pvPortMalloc+0x1cc>)
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4013      	ands	r3, r2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f040 8090 	bne.w	8004ad2 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d01e      	beq.n	80049f6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80049b8:	2208      	movs	r2, #8
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4413      	add	r3, r2
 80049be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f003 0307 	and.w	r3, r3, #7
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d015      	beq.n	80049f6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f023 0307 	bic.w	r3, r3, #7
 80049d0:	3308      	adds	r3, #8
 80049d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f003 0307 	and.w	r3, r3, #7
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00b      	beq.n	80049f6 <pvPortMalloc+0x6e>
	__asm volatile
 80049de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e2:	b672      	cpsid	i
 80049e4:	f383 8811 	msr	BASEPRI, r3
 80049e8:	f3bf 8f6f 	isb	sy
 80049ec:	f3bf 8f4f 	dsb	sy
 80049f0:	b662      	cpsie	i
 80049f2:	617b      	str	r3, [r7, #20]
 80049f4:	e7fe      	b.n	80049f4 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d06a      	beq.n	8004ad2 <pvPortMalloc+0x14a>
 80049fc:	4b56      	ldr	r3, [pc, #344]	; (8004b58 <pvPortMalloc+0x1d0>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d865      	bhi.n	8004ad2 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004a06:	4b55      	ldr	r3, [pc, #340]	; (8004b5c <pvPortMalloc+0x1d4>)
 8004a08:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004a0a:	4b54      	ldr	r3, [pc, #336]	; (8004b5c <pvPortMalloc+0x1d4>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a10:	e004      	b.n	8004a1c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d903      	bls.n	8004a2e <pvPortMalloc+0xa6>
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1f1      	bne.n	8004a12 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004a2e:	4b48      	ldr	r3, [pc, #288]	; (8004b50 <pvPortMalloc+0x1c8>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d04c      	beq.n	8004ad2 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004a38:	6a3b      	ldr	r3, [r7, #32]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2208      	movs	r2, #8
 8004a3e:	4413      	add	r3, r2
 8004a40:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	6a3b      	ldr	r3, [r7, #32]
 8004a48:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	1ad2      	subs	r2, r2, r3
 8004a52:	2308      	movs	r3, #8
 8004a54:	005b      	lsls	r3, r3, #1
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d920      	bls.n	8004a9c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4413      	add	r3, r2
 8004a60:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	f003 0307 	and.w	r3, r3, #7
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00b      	beq.n	8004a84 <pvPortMalloc+0xfc>
 8004a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a70:	b672      	cpsid	i
 8004a72:	f383 8811 	msr	BASEPRI, r3
 8004a76:	f3bf 8f6f 	isb	sy
 8004a7a:	f3bf 8f4f 	dsb	sy
 8004a7e:	b662      	cpsie	i
 8004a80:	613b      	str	r3, [r7, #16]
 8004a82:	e7fe      	b.n	8004a82 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	1ad2      	subs	r2, r2, r3
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a96:	69b8      	ldr	r0, [r7, #24]
 8004a98:	f000 f948 	bl	8004d2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a9c:	4b2e      	ldr	r3, [pc, #184]	; (8004b58 <pvPortMalloc+0x1d0>)
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	4a2c      	ldr	r2, [pc, #176]	; (8004b58 <pvPortMalloc+0x1d0>)
 8004aa8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004aaa:	4b2b      	ldr	r3, [pc, #172]	; (8004b58 <pvPortMalloc+0x1d0>)
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	4b2c      	ldr	r3, [pc, #176]	; (8004b60 <pvPortMalloc+0x1d8>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d203      	bcs.n	8004abe <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004ab6:	4b28      	ldr	r3, [pc, #160]	; (8004b58 <pvPortMalloc+0x1d0>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a29      	ldr	r2, [pc, #164]	; (8004b60 <pvPortMalloc+0x1d8>)
 8004abc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	4b24      	ldr	r3, [pc, #144]	; (8004b54 <pvPortMalloc+0x1cc>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ace:	2200      	movs	r2, #0
 8004ad0:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d005      	beq.n	8004ae4 <pvPortMalloc+0x15c>
 8004ad8:	4b22      	ldr	r3, [pc, #136]	; (8004b64 <pvPortMalloc+0x1dc>)
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4413      	add	r3, r2
 8004ae0:	4a20      	ldr	r2, [pc, #128]	; (8004b64 <pvPortMalloc+0x1dc>)
 8004ae2:	6013      	str	r3, [r2, #0]
 8004ae4:	f7fc fb28 	bl	8001138 <prvTraceGetCurrentTaskHandle>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7fc fa67 	bl	8000fbe <prvTraceGetTaskNumberHigh16>
 8004af0:	4603      	mov	r3, r0
 8004af2:	461a      	mov	r2, r3
 8004af4:	4b1c      	ldr	r3, [pc, #112]	; (8004b68 <pvPortMalloc+0x1e0>)
 8004af6:	881b      	ldrh	r3, [r3, #0]
 8004af8:	4013      	ands	r3, r2
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00f      	beq.n	8004b20 <pvPortMalloc+0x198>
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d006      	beq.n	8004b14 <pvPortMalloc+0x18c>
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	2038      	movs	r0, #56	; 0x38
 8004b0e:	f7fc ff35 	bl	800197c <prvTraceStoreEvent2>
 8004b12:	e005      	b.n	8004b20 <pvPortMalloc+0x198>
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	4619      	mov	r1, r3
 8004b1a:	20e9      	movs	r0, #233	; 0xe9
 8004b1c:	f7fc ff2e 	bl	800197c <prvTraceStoreEvent2>
	}
	( void ) xTaskResumeAll();
 8004b20:	f7ff f9ae 	bl	8003e80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	f003 0307 	and.w	r3, r3, #7
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00b      	beq.n	8004b46 <pvPortMalloc+0x1be>
 8004b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b32:	b672      	cpsid	i
 8004b34:	f383 8811 	msr	BASEPRI, r3
 8004b38:	f3bf 8f6f 	isb	sy
 8004b3c:	f3bf 8f4f 	dsb	sy
 8004b40:	b662      	cpsie	i
 8004b42:	60fb      	str	r3, [r7, #12]
 8004b44:	e7fe      	b.n	8004b44 <pvPortMalloc+0x1bc>
	return pvReturn;
 8004b46:	69fb      	ldr	r3, [r7, #28]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3728      	adds	r7, #40	; 0x28
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	20005128 	.word	0x20005128
 8004b54:	20005134 	.word	0x20005134
 8004b58:	2000512c 	.word	0x2000512c
 8004b5c:	20005120 	.word	0x20005120
 8004b60:	20005130 	.word	0x20005130
 8004b64:	20000d70 	.word	0x20000d70
 8004b68:	20000014 	.word	0x20000014

08004b6c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d067      	beq.n	8004c4e <vPortFree+0xe2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004b7e:	2308      	movs	r3, #8
 8004b80:	425b      	negs	r3, r3
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	4413      	add	r3, r2
 8004b86:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	685a      	ldr	r2, [r3, #4]
 8004b90:	4b31      	ldr	r3, [pc, #196]	; (8004c58 <vPortFree+0xec>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4013      	ands	r3, r2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10b      	bne.n	8004bb2 <vPortFree+0x46>
 8004b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9e:	b672      	cpsid	i
 8004ba0:	f383 8811 	msr	BASEPRI, r3
 8004ba4:	f3bf 8f6f 	isb	sy
 8004ba8:	f3bf 8f4f 	dsb	sy
 8004bac:	b662      	cpsie	i
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	e7fe      	b.n	8004bb0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00b      	beq.n	8004bd2 <vPortFree+0x66>
 8004bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bbe:	b672      	cpsid	i
 8004bc0:	f383 8811 	msr	BASEPRI, r3
 8004bc4:	f3bf 8f6f 	isb	sy
 8004bc8:	f3bf 8f4f 	dsb	sy
 8004bcc:	b662      	cpsie	i
 8004bce:	60bb      	str	r3, [r7, #8]
 8004bd0:	e7fe      	b.n	8004bd0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	685a      	ldr	r2, [r3, #4]
 8004bd6:	4b20      	ldr	r3, [pc, #128]	; (8004c58 <vPortFree+0xec>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d036      	beq.n	8004c4e <vPortFree+0xe2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d132      	bne.n	8004c4e <vPortFree+0xe2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	4b1a      	ldr	r3, [pc, #104]	; (8004c58 <vPortFree+0xec>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	43db      	mvns	r3, r3
 8004bf2:	401a      	ands	r2, r3
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004bf8:	f7ff f934 	bl	8003e64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	4b16      	ldr	r3, [pc, #88]	; (8004c5c <vPortFree+0xf0>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4413      	add	r3, r2
 8004c06:	4a15      	ldr	r2, [pc, #84]	; (8004c5c <vPortFree+0xf0>)
 8004c08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
 8004c0a:	4b15      	ldr	r3, [pc, #84]	; (8004c60 <vPortFree+0xf4>)
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	4a12      	ldr	r2, [pc, #72]	; (8004c60 <vPortFree+0xf4>)
 8004c16:	6013      	str	r3, [r2, #0]
 8004c18:	f7fc fa8e 	bl	8001138 <prvTraceGetCurrentTaskHandle>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7fc f9cd 	bl	8000fbe <prvTraceGetTaskNumberHigh16>
 8004c24:	4603      	mov	r3, r0
 8004c26:	461a      	mov	r2, r3
 8004c28:	4b0e      	ldr	r3, [pc, #56]	; (8004c64 <vPortFree+0xf8>)
 8004c2a:	881b      	ldrh	r3, [r3, #0]
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d007      	beq.n	8004c44 <vPortFree+0xd8>
 8004c34:	6879      	ldr	r1, [r7, #4]
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	425b      	negs	r3, r3
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	2039      	movs	r0, #57	; 0x39
 8004c40:	f7fc fe9c 	bl	800197c <prvTraceStoreEvent2>
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c44:	6938      	ldr	r0, [r7, #16]
 8004c46:	f000 f871 	bl	8004d2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004c4a:	f7ff f919 	bl	8003e80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c4e:	bf00      	nop
 8004c50:	3718      	adds	r7, #24
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	20005134 	.word	0x20005134
 8004c5c:	2000512c 	.word	0x2000512c
 8004c60:	20000d70 	.word	0x20000d70
 8004c64:	20000014 	.word	0x20000014

08004c68 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c6e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004c72:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004c74:	4b27      	ldr	r3, [pc, #156]	; (8004d14 <prvHeapInit+0xac>)
 8004c76:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f003 0307 	and.w	r3, r3, #7
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00c      	beq.n	8004c9c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	3307      	adds	r3, #7
 8004c86:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f023 0307 	bic.w	r3, r3, #7
 8004c8e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	4a1f      	ldr	r2, [pc, #124]	; (8004d14 <prvHeapInit+0xac>)
 8004c98:	4413      	add	r3, r2
 8004c9a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ca0:	4a1d      	ldr	r2, [pc, #116]	; (8004d18 <prvHeapInit+0xb0>)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ca6:	4b1c      	ldr	r3, [pc, #112]	; (8004d18 <prvHeapInit+0xb0>)
 8004ca8:	2200      	movs	r2, #0
 8004caa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004cb4:	2208      	movs	r2, #8
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	1a9b      	subs	r3, r3, r2
 8004cba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f023 0307 	bic.w	r3, r3, #7
 8004cc2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	4a15      	ldr	r2, [pc, #84]	; (8004d1c <prvHeapInit+0xb4>)
 8004cc8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004cca:	4b14      	ldr	r3, [pc, #80]	; (8004d1c <prvHeapInit+0xb4>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004cd2:	4b12      	ldr	r3, [pc, #72]	; (8004d1c <prvHeapInit+0xb4>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	1ad2      	subs	r2, r2, r3
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ce8:	4b0c      	ldr	r3, [pc, #48]	; (8004d1c <prvHeapInit+0xb4>)
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	4a0a      	ldr	r2, [pc, #40]	; (8004d20 <prvHeapInit+0xb8>)
 8004cf6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	4a09      	ldr	r2, [pc, #36]	; (8004d24 <prvHeapInit+0xbc>)
 8004cfe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d00:	4b09      	ldr	r3, [pc, #36]	; (8004d28 <prvHeapInit+0xc0>)
 8004d02:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d06:	601a      	str	r2, [r3, #0]
}
 8004d08:	bf00      	nop
 8004d0a:	3714      	adds	r7, #20
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr
 8004d14:	20001520 	.word	0x20001520
 8004d18:	20005120 	.word	0x20005120
 8004d1c:	20005128 	.word	0x20005128
 8004d20:	20005130 	.word	0x20005130
 8004d24:	2000512c 	.word	0x2000512c
 8004d28:	20005134 	.word	0x20005134

08004d2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d34:	4b28      	ldr	r3, [pc, #160]	; (8004dd8 <prvInsertBlockIntoFreeList+0xac>)
 8004d36:	60fb      	str	r3, [r7, #12]
 8004d38:	e002      	b.n	8004d40 <prvInsertBlockIntoFreeList+0x14>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	60fb      	str	r3, [r7, #12]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d8f7      	bhi.n	8004d3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	4413      	add	r3, r2
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d108      	bne.n	8004d6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	685a      	ldr	r2, [r3, #4]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	441a      	add	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	441a      	add	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d118      	bne.n	8004db4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	4b15      	ldr	r3, [pc, #84]	; (8004ddc <prvInsertBlockIntoFreeList+0xb0>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d00d      	beq.n	8004daa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685a      	ldr	r2, [r3, #4]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	441a      	add	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	601a      	str	r2, [r3, #0]
 8004da8:	e008      	b.n	8004dbc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004daa:	4b0c      	ldr	r3, [pc, #48]	; (8004ddc <prvInsertBlockIntoFreeList+0xb0>)
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	601a      	str	r2, [r3, #0]
 8004db2:	e003      	b.n	8004dbc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d002      	beq.n	8004dca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004dca:	bf00      	nop
 8004dcc:	3714      	adds	r7, #20
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	20005120 	.word	0x20005120
 8004ddc:	20005128 	.word	0x20005128

08004de0 <__libc_init_array>:
 8004de0:	b570      	push	{r4, r5, r6, lr}
 8004de2:	4e0d      	ldr	r6, [pc, #52]	; (8004e18 <__libc_init_array+0x38>)
 8004de4:	4c0d      	ldr	r4, [pc, #52]	; (8004e1c <__libc_init_array+0x3c>)
 8004de6:	1ba4      	subs	r4, r4, r6
 8004de8:	10a4      	asrs	r4, r4, #2
 8004dea:	2500      	movs	r5, #0
 8004dec:	42a5      	cmp	r5, r4
 8004dee:	d109      	bne.n	8004e04 <__libc_init_array+0x24>
 8004df0:	4e0b      	ldr	r6, [pc, #44]	; (8004e20 <__libc_init_array+0x40>)
 8004df2:	4c0c      	ldr	r4, [pc, #48]	; (8004e24 <__libc_init_array+0x44>)
 8004df4:	f000 f82c 	bl	8004e50 <_init>
 8004df8:	1ba4      	subs	r4, r4, r6
 8004dfa:	10a4      	asrs	r4, r4, #2
 8004dfc:	2500      	movs	r5, #0
 8004dfe:	42a5      	cmp	r5, r4
 8004e00:	d105      	bne.n	8004e0e <__libc_init_array+0x2e>
 8004e02:	bd70      	pop	{r4, r5, r6, pc}
 8004e04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e08:	4798      	blx	r3
 8004e0a:	3501      	adds	r5, #1
 8004e0c:	e7ee      	b.n	8004dec <__libc_init_array+0xc>
 8004e0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e12:	4798      	blx	r3
 8004e14:	3501      	adds	r5, #1
 8004e16:	e7f2      	b.n	8004dfe <__libc_init_array+0x1e>
 8004e18:	080051ac 	.word	0x080051ac
 8004e1c:	080051ac 	.word	0x080051ac
 8004e20:	080051ac 	.word	0x080051ac
 8004e24:	080051b0 	.word	0x080051b0

08004e28 <memcpy>:
 8004e28:	b510      	push	{r4, lr}
 8004e2a:	1e43      	subs	r3, r0, #1
 8004e2c:	440a      	add	r2, r1
 8004e2e:	4291      	cmp	r1, r2
 8004e30:	d100      	bne.n	8004e34 <memcpy+0xc>
 8004e32:	bd10      	pop	{r4, pc}
 8004e34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e3c:	e7f7      	b.n	8004e2e <memcpy+0x6>

08004e3e <memset>:
 8004e3e:	4402      	add	r2, r0
 8004e40:	4603      	mov	r3, r0
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d100      	bne.n	8004e48 <memset+0xa>
 8004e46:	4770      	bx	lr
 8004e48:	f803 1b01 	strb.w	r1, [r3], #1
 8004e4c:	e7f9      	b.n	8004e42 <memset+0x4>
	...

08004e50 <_init>:
 8004e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e52:	bf00      	nop
 8004e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e56:	bc08      	pop	{r3}
 8004e58:	469e      	mov	lr, r3
 8004e5a:	4770      	bx	lr

08004e5c <_fini>:
 8004e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e5e:	bf00      	nop
 8004e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e62:	bc08      	pop	{r3}
 8004e64:	469e      	mov	lr, r3
 8004e66:	4770      	bx	lr
